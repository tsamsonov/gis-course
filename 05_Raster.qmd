---
title: "Растровый анализ"
subtitle: "Основы геоинформатики. Лекция 5"
date: 03/22/2024
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Растровая геометрия

**Растровая геометрия** определяется физическим расположением узлов в пространстве. Распространены следующие виды геометрий:

![](images/raster_geom.svg){width="100%"}

::: callout-note
## Хранение данных

Значения растра хранятся в виде матрицы вне зависимости от геометрии растра.
:::

## Измерения растра

**Измерения растра** задают отображение данных на геометрию.

::: columns
::: {.column width="65%"}
![](images/dimensions.svg){width="100%"}
:::

::: {.column width="35%"}
::: callout-tip
## X и Y

В большинстве случаев измерения 1 и 2 носят названия **X** и **Y**, но для аффинных и криволинейных растров они достаточно условны.
:::
:::
:::

::: callout-note
## Куб данных

Растры, в которых 3 и более измерений, называются растровыми **кубами данных**.
:::

## Измерения растра

**Измерения растра** задают отображение данных на геометрию.

```{r}
library(stars)
library(dplyr)
library(tidyr)
dem = read_stars('../r-geo-course/data/world/gebco.tif') |> 
  st_warp(crs = 4326, cellsize = 5)
plot(dem, main = NULL)
attr(dem, 'dimensions')
```

## Изменение проекции

**Изменение проекции** растра возможно двумя путями

::: columns
::: {.column width="50%"}
::: callout-note
## Трансформация (transform)

Трансформирует координаты узлов в указанную проекцию. Матрица значений остаётся прежней, однако геометрия становится криволинейной.

![](images/raster_transform.svg){width="100%"}
:::
:::

::: {.column width="50%"}
::: callout-note
## Деформация (warp)

Создает новую регулярную геометрию растра в указанной проекции. Матрица значений пересчитывается, поскольку местоположение узлов изменяется.

![](images/raster_warp.svg){width="100%"}
:::
:::
:::

## Трансформация

**Трансформация** приводит к созданию *криволинейного* растра.

```{r}
dem_prj = st_transform(dem, '+proj=eck4')
plot(dem_prj, main = NULL)
attr(dem_prj, 'dimensions')
```

## Деформация

**Деформация** обычно осуществляется на *регулярный* растр.

```{r}
dem_warp = st_warp(dem, crs = '+proj=eck4')
plot(dem_warp, main = NULL)
attr(dem_warp, 'dimensions')
```

## Передискретизация

**Передискретизация** --- изменение пространственного положения узлов растра. Требует пересчета матрицы его значений.

::: columns
::: {.column width="50%"}
![](images/resampling.svg){width="100%"}
:::

::: {.column width="50%"}
**Примеры использования**

::: callout-tip
## Изменение разрешения

Переход к более низкому *разрешению* позволяет уменьшить объем и детализацию данных.
:::

::: callout-tip
## Изменение проекции

При деформации узлы новой сетки проецируются в исходную проекцию и определяются их значения.
:::
:::
:::

## Передискретизация

**Метод ближайшего соседа** --- функция покрытия, при которой берётся значение ближайшего узла растра.

::: columns
::: {.column width="65%"}
![](images/resampling_nn.svg){width="100%"}
:::

::: {.column width="35%"}
::: callout-tip
## Применение

Метод ближайшего соседа используется для категориальных растров, которые хранят данные в номинальных и порядковых шкалах. Например, генезис четвертичных отложений.
:::
:::
:::

## Передискретизация

**Билинейный метод** --- функция покрытия, при которой значение получается билинейной интерполяцией внутри исходной ячейки.

::: columns
::: {.column width="60%"}
![](images/resampling_bilinear.svg){width="100%"}
:::

::: {.column width="40%"}
$$f(x, y) = r_{00} + r_{01}x + r_{10}y + r_{11}xy$$

$$\begin{cases}
r_{00} = f_{00},\\
r_{01} = f_{01} - f_{00},\\
r_{10} = f_{10} - f_{00},\\
r_{11} = f_{00} + f_{11} - f_{01} - f_{10}.
\end{cases}$$

Координаты $x$ и $y$ меняются в диапазоне от $0$ до $1$ в пределах ячейки.
:::
:::

## Растровая алгебра

::: columns
::: {.column width="50%"}
**Локальные операции** производят вычисления в каждом узле по отдельности.

::: callout-tip
## Примеры

-   На основе растров температур и осадков вычислить индекс засушливости.

-   Классифицировать растр углов наклона.
:::
:::

::: {.column width="50%"}
![](images/local.svg){width="100%"}
:::
:::

## Растровая алгебра

Пример **локальной операции** --- вычисление мощности оледенения.

```{r}
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(ggnewscale)

bed = rast('../r-geo-course/data/etopo1_bed.tif')
ice = rast('../r-geo-course/data/etopo1_ice.tif')
countries = read_sf('../r-geo-course/data/countries.gpkg')

ggplot() +
  geom_spatraster(data = bed) +
  scale_fill_hypso_tint_c(palette = "gmt_globe") +
  ggtitle('ETOPO Bedrock')
```

## Растровая алгебра

Пример **локальной операции** --- вычисление мощности оледенения.

```{r}
ggplot() +
  geom_spatraster(data = ice) +
  scale_fill_hypso_tint_c(palette = "gmt_globe") +
  ggtitle('ETOPO Ice surface')
```

## Растровая алгебра

Пример **локальной операции** --- вычисление мощности оледенения.

```{r}
ice.depth = ice - bed
ice.depth[ice.depth == 0] = NA

ggplot() +
  geom_spatraster(data = bed) +
  scale_fill_gradient(low = 'black', 
                      high = 'white',
                      guide="none") +
  new_scale_fill() +
  geom_spatraster(data = ice.depth) +
  scale_fill_gradient(low = 'white', 
                      high = 'navyblue', 
                      na.value = "transparent") +
  geom_sf(data = countries, fill = NA) +
  labs(title = 'Мощность покровного оледенения',
         fill = '[м]')
```

## Растровая алгебра

::: columns
::: {.column width="50%"}
**Фокальные операции** производят вычисления на основе значений из окрестности каждого узла.

::: callout-tip
## Примеры

-   Выполнить фильтрацию (сглаживание) цифровой модели рельефа.

-   Обнаружить границы (резкие перепады яркости) на космическом снимке.
:::
:::

::: {.column width="50%"}
![](images/focal.svg){width="100%"}
:::
:::

## Растровая алгебра

Размеры и форма окрестностей могут различаться.

![](images/neighborhoods.svg){width="100%"}

## Свёртка

**Свёртка** — фокальный оператор, при котором берется сумма произведений значения растра и плавающего окна.

::: columns
::: {.column width="50%"}
Для пикселя с индексами $(3,2)$ и окна $3\times3$ будет равно:

$$
r'_{32} = w_{00} \cdot r_{21} + w_{01} \cdot r_{22} + w_{02} \cdot r_{23} \\ + 
w_{10} \cdot r_{31} + w_{11} \cdot r_{32} + w_{12} \cdot r_{33} \\ +
w_{20} \cdot r_{41} + w_{21} \cdot r_{42} + w_{22} \cdot r_{43}
$$

Для произвольного $(i,j)$:

$$
r'_{ij} = \sum_{k=0}^2 \sum_{m=0}^2 w_{km}\cdot r_{i+k-1,j+m-1} 
$$
:::

::: {.column width="50%"}
![](images/convolution.svg){width="100%"}
:::
:::

## Растровая алгебра

Пример **фокальной операции** --- сглаживание растра методом среднего значения. Получается свёрткой с матрицей $n \times n$, где каждый элемент равен $w_{km} = 1/n^2$:

```{r}
# Вырежем кусок из ЦМР
dem = crop(ice, ext(-120, -75, 10, 40))

# Среднее
wgt = matrix(c(1, 1, 1,
               1, 1, 1,
               1, 1, 1) / 9, 
              nrow = 3)
# на самом деле проще написать так:
# wgt = matrix(1/9, 3, 3), но полная форма записана для наглядности

# выполним обработку ЦМР с помощью фокального фильтра
filtered = focal(dem, w = wgt)

ggplot() +
  geom_spatraster(data = c(dem, filtered)) +
  scale_fill_hypso_tint_c(palette = "etopo1") + 
  facet_wrap(~lyr)
```

## Растровая алгебра

::: columns
::: {.column width="50%"}
Существуют фокальные операции с *нефиксированной (растущей)* окрестностью.

::: callout-tip
## Евклидово распределение

**Евклидово распределение** (Euclidean allocation) относит каждый пиксел растра к ближайшему по расстоянию объекту. Полученный объект является растровой диаграммой Вороного.
:::
:::

::: {.column width="50%"}
![](images/voronoy.gif){width="100%"}
:::
:::

## Растровая алгебра

**Евклидово расстояние** (Euclidean distance) создает растр, в узлах которого хранится расстояние до ближайшего объекта.

```{r}
roads = read_sf("../r-geo-course/data/roads.gpkg") # Дороги
poi = read_sf("../r-geo-course/data/poi_point.gpkg") # Точки интереса
rayons = read_sf("../r-geo-course/data/boundary_polygon.gpkg") # Границы районов
stations = read_sf("../r-geo-course/data/metro_stations.gpkg") # Станции метро
water = read_sf("../r-geo-course/data/water_polygon.gpkg") # Водные объекты

dist_grid = stations |> 
  rast(resolution = 25) |> 
  rasterize(stations, y = _) |> 
  gridDist(NA)

ggplot() +
  geom_spatraster_contour_filled(
    data = dist_grid
  ) +
  geom_spatraster_contour(
    data = dist_grid, 
    linewidth = 0.25, 
    color = 'black') +
  geom_sf(data = water, 
          linewidth = 0.1) +
  geom_sf(data = roads, 
          linewidth = 0.1) +
  geom_sf(data = stations, 
          color = 'darkviolet') +
  labs(title = 'Расстояние до ближайшей станции метро',
       fill = 'м') +
  theme_bw()
```

## Растровая алгебра

::: columns
::: {.column width="50%"}
**Зональные операции** производят агрегирование данных одного растра в пределах зон, определяемых другим растром или векторным набором данных.

::: callout-tip
## Примеры

-   Определить наиболее распространенный тип почв в пределах каждого ландшафта.

-   Вычислить средний угол наклона для каждого водосборного бассейна.
:::
:::

::: {.column width="50%"}
![](images/zonal.svg){width="100%"}
:::
:::

## Растровая алгебра

Пример **зональной операции** --- построение климатограммы.

```{r}
#| fig-cap: "Типы земельного покрова"
#| fig-align: left
files = list.files('/Volumes/Data/Spatial/WorldClim/2.1/tavg',
                   full.names = TRUE)
temp = rast(files)

data(land, package = 'tmap')
terraland = rast(land['cover'])

pal = c("#003200", "#3C9600", "#006E00", "#556E19", "#00C800", 
        "#8CBE8C", "#467864", "#B4E664", "#9BC832", "#EBFF64", 
        "#F06432", "#9132E6", "#E664E6", "#9B82E6", "#B4FEF0", 
        "#646464", "#C8C8C8", "#FF0000", "#FFFFFF", "#5ADCDC")
ggplot() +
  geom_spatraster(data = terraland) +
  scale_fill_manual(values = pal, 
                    guide = guide_legend(ncol = 3), 
                    name = NULL) + 
  theme(legend.position = 'bottom')
```

## Растровая алгебра

Пример **зональной операции** --- построение климатограммы.

```{r}
#| fig-cap: "Среднемесячная температура"
#| fig-align: "left"
plot(temp)
```

## Растровая алгебра

Пример **зональной операции** --- построение климатограммы.

```{r}
cover = project(terraland, temp, method = 'near')

cover_north = crop(
  cover, ext(-180, 180, 0, 90)
)
temp_north = crop(
  temp, ext(-180, 180, 0, 90)
)
stats = zonal(temp_north, cover_north, 
              mean, na.rm = TRUE)

zonal_stats = stats |> 
  rename(cover = 1) |> 
  pivot_longer(
    -cover, 
    names_to = 'month', 
    values_to = 'tavg', 
    names_prefix = 'wc2.1_10m_tavg_', 
    names_transform = as.integer
  ) |> 
  mutate(month = ordered(month, 1:12, 
                         month.abb))

head(zonal_stats, 20)
```

## Растровая алгебра

Пример **зональной операции** --- построение климатограммы.

```{r}
ggplot(zonal_stats) +
  geom_line(
    aes(x = month, 
        y = tavg, 
        color = cover, 
        group = cover), 
    size = 1
  ) +
  scale_color_manual(
    values = pal
  )
```

## Растровая алгебра

::: columns
::: {.column width="50%"}
**Глобальные операции** производят вычисления над всеми узлами растра сразу.

::: callout-tip
## Примеры

-   Вычислить среднее значение по растру плотности населения.

-   Определить наиболее распространенный тип растительности для всей территории.
:::
:::

::: {.column width="50%"}
![](images/global.svg){width="100%"}
:::
:::

## Растровая алгебра

::: columns
::: {.column width="60%"}
**Растровый оверлей** --- частный случай локальной операции, при котором вычисляется линейная комбинация (сумма, среднее и т.д.) значений из нескольких растров.

$$
R = w_1 r_1 + w_2 r_2 + ...w_n r_n = \sum_{i=1}^n w_i r_i
$$

::: callout-note
## Взвешенный оверлей

Растровый оверлей называют *взвешенным*, если коэффициенты в линейной комбинации представляют собой веса значений
:::
:::

::: {.column width="40%"}
![](images/raster_overlay.svg){width="100%"}
:::
:::

## Взвешенный оверлей

Пример **взвешенного оверлея** --- выбор территорий, обладающей оптимальной совокупностью признаков:

![](images/image-46018781.png)

## Извлечение данных

Данные из растра можно **извлекать** по указанным векторным объектам с помощью *функции покрытия*. Например, в точке:

```{r}
#| fig-cap: "Мощность покровного оледенения в точке"
#| fig-align: "left"
pnt = tibble::tibble(
  x = -45, y = 70,
  z = terra::extract(ice.depth, 
                     bind_cols(x,y))[, 2]
)

ggplot() +
  geom_spatraster(data = ice.depth) +
  scale_fill_gradient(low = 'white', 
                      high = 'navyblue', 
                      na.value = "transparent") +
  geom_point(aes(x, y), pnt, 
             size = 3, color = 'red') +
  geom_text(aes(x, y, label = z), 
            pnt, fontface = 'bold', size = 5,
            vjust = 'bottom', hjust = 'left',
            nudge_x = 1, nudge_y = 1) +
  coord_sf(xlim = c(-80, -10), ylim = c(58, 85)) +
  labs(title = 'Мощность покровного оледенения',
       fill = '[м]', x = NULL, y = NULL)
```

## Извлечение данных

Аналогично выполняется построение профиля, но данные извлекаются из всех ячеек, находящихся на линии профиля.

![](images/mapedit_profile.png)

## Извлечение данных

Аналогично выполняется построение профиля, но данные извлекаются из всех ячеек, находящихся на линии профиля.

```{r}
profile = st_read('../r-geo-course/data/profile.gpkg', quiet = TRUE)
temprof = terra::extract(temp, profile, cells = TRUE, xy = TRUE)

tempdf = temprof %>%
  mutate(dist = 0.001 * c(0, dplyr::select(., x, y) |>  
                             geosphere::distGeo() |> 
                             cumsum() |> 
                             head(-1))) |>  
  select(-c(x, y, cell, ID)) |> 
  pivot_longer(-dist, 
               names_to = 'month', values_to = 'tavg', 
               names_prefix = 'wc2.1_10m_tavg_', 
               names_transform = as.integer)

ggplot(tempdf, 
       aes(x = dist, y = tavg)) +
  geom_line() +
  geom_smooth(span = 0.1) +
  annotate('text', x = 0, 
           y = 10, label = 'A') +
  annotate('text', x = max(tempdf$dist), 
           y = 10, label = 'B') +
  ggtitle('Профиль среднемесячной 
          температуры июня по линии A—B') +
  facet_wrap(~month)
```

## Словарик

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Геометрия растра

Измерение растра

Передискретизация

Ближайший сосед

Билинейная интерполяция

Локальный анализ

Фокальный анализ

Зональный анализ

Глобальный анализ

Окрестность

Свертка
:::

::: {.column width="50%" style="color: red"}
Raster geometry

Raster dimension

Resampling

Nearest neighbor

Bilinear interpolation

Local analysis

Focal analysis

Zonal analysis

Global analysis

Neighborhood

Convolution
:::
:::

## Библиография
