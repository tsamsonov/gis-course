---
title: "Упорядочение и индексация пространственных данных"
subtitle: "Геоинформатика I"
date: today
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    width: 1280
    height: 720
    slide-number: true
    footer: "Самсонов Т. Е. Геоинформатика: курс лекций"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Хранение данных

Данные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу

![](images/ordering_comp1.svg){width="100%"}

## Хранение данных

Данные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу

![](images/ordering_comp2.svg){width="100%"}

## Генерация Z-кривой

::: columns
::: {.column width="50%"}
1.  Конвертировать в бинарное представление индексы ячеек $u$ (по $X$) и $v$ (по $Y$).

    $$
    \color{blue}{u = 10}, \color{red}{v = 10}
    $$

2.  Расположить биты полученных значен ий вперемежку (через один):

    $$
    \color{violet}{w =} \color{blue}{1}\color{red}{1}\color{blue}{0}\color{red}{0}
    $$

3.  Вычислить десятичный номер полученного значения

    $$
    \color{violet}{1100_2} \rightarrow \color{green}{12_{10}}
    $$
:::

::: {.column width="50%"}
![](images/zcurve.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.
:::

::: {.column width="50%"}
![](images/guilbert1.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.

2.  Расположить биты полученных значений вперемежку (через один).
:::

::: {.column width="50%"}
![](images/guilbert2.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.

2.  Расположить биты полученных значений вперемежку (через один).

3.  Разделить полученное число *слева направо* на двухбитные строки.
:::

::: {.column width="50%"}
![](images/guilbert3.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.

2.  Расположить биты полученных значений вперемежку (через один).

3.  Разделить полученное число *слева направо* на двухбитные строки.

4.  Сопоставить каждой двухбитной строке десятичную цифру $d$ по правилам:

    $$
    \texttt{00} \rightarrow 0,~\texttt{01} \rightarrow 1\\\texttt{10} \rightarrow 3,~\texttt{11} \rightarrow 2
    $$
:::

::: {.column width="50%"}
![](images/guilbert4.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.
:::

::: {.column width="50%"}
![](images/guilbert5.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.

2.  В цикле по $k \leftarrow 0…n-1$, где $n = |D|$:

    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.

    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.
:::

::: {.column width="50%"}
![](images/guilbert6.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.

2.  В цикле по $k \leftarrow 0…n-1$, где $n = |D|$:

    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.

    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.

3.  Преобразовать каждую цифру в истинное 2-битовое представление
:::

::: {.column width="50%"}
![](images/guilbert7.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

::: columns
::: {.column width="50%"}
1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.

2.  В цикле по $k \leftarrow 0…n-1$, где $n = |D|$:

    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.

    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.

3.  Преобразовать каждую цифру в истинное 2-битовое представление.

4.  Вычислить искомый номер.
:::

::: {.column width="50%"}
![](images/guilbert8.svg){width="100%"}
:::
:::

## Генерация кривой Гильберта

1.  Конвертировать в бинарное представление индексы ячеек $i$ и $j$.

2.  Расположить биты полученных значений вперемежку (через один).

3.  Разделить полученное число *слева направо* на двухбитные строки.

4.  Сопоставить каждой двухбитной строке десятичную цифру $d$ по правилам:

    $$
    \texttt{00} \rightarrow 0,~\texttt{01} \rightarrow 1,~\texttt{10} \rightarrow 3,~\texttt{11} \rightarrow 2
    $$

5.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.

6.  В цикле по $k \leftarrow 0…n-1$, где $n = |D|$:

    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.

    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.

7.  Преобразовать каждую цифру в истинное 2-битовое представление

8.  Вычислить искомый номер.

## Индекс

::: columns
::: {.column width="50%"}

Индекс

:   Специальный объект базы данных, предназначенный для повышения скорости поиска объектов

Состоит из ключей и указателей:

-   **ключ** --- значение или интервал значений одного или более *полей*;

-   **указатели** --- ссылки на кортежи с соответствующими значениями *полей*.

::: callout-tip
## Принцип работы

Сначала ищется нужный блок индекса, затем непосредственно объект
:::
:::

::: {.column width="50%"}
![](images/index.svg){width="90%"}
:::
:::

## Пространственный индекс

::: columns
::: {.column width="50%"}

Пространственный индекс

:   Индекс, предназначенный для поиска пространственных объектов

Повышает скорость запросов:

1.  **Идентификации**: определить объект(ы), находящиеся в точке
2.  **Ближайшего** **соседа**: найти все объекты в пределах заданного расстояния
3.  **Диапазона**: выбрать объекты по заданному охвату координат
:::

::: {.column width="50%"}
![](images/spatial_index.svg){width="100%"}
:::
:::

## Сеточный индекс

::: columns
::: {.column width="50%"}
Простейший вид индекса, который часто используется для точечных данных.

-   пространство разделяется линиями сетки на полосы --- страйпы;

-   число линий и расстояние между ними может быть разным для осей;

-   точки индексируются по ячейкам --- пересечениям полос

::: callout-tip
## Принцип работы

Сначала ищутся нужные ячейки по диапазону координат. После этого запрос работает с точками из этих ячеек.
:::
:::

::: {.column width="50%"}
![](images/grid_file.svg){width="100%"}
:::
:::

## Библиография
