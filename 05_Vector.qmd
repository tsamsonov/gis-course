---
title: "Векторный анализ"
subtitle: "Основы геоинформатики. Лекция 5"
date: 03/15/2024
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Пространственные отношения

Отношение

:   Свойство двух или более объектов, выраженное в наличии или отсутствии определенной связи между ними.

Пространственное отношение

:   Отношение пространственных объектов, которое зависит от их местоположения.

::: callout-note
## Предикат

Формальным представлением отношения является **предикат** --- функция, определенная на множестве объектов и принимающая для их упорядоченного набора значение **1** (`ИСТИНА`) или **0** (`ЛОЖЬ`). Предикаты пространственных отношений называются пространственными.
:::

## Пространственные отношения

К основным видам пространственных отношений относятся:

1.  **Метрические** --- определяются расстояниями между объектами.

2.  **Топологические** --- определяются пересечениями объектов.

3.  **Дирекционные** --- определяются направлениями между объектами

::: callout-note
## Пространственные предикаты

Функции, которые устанавливают наличие метрических, топологических и дирекционных отношений, являются пространственными предикатами.
:::

## Расстояния

::: columns
::: {.column width="50%"}
#### Евклидово расстояние

Используется в плоских прямоугольных системах координат

$$
d(A,B) = \sqrt{(x_A - x_B)^2 + (y_A - y_B)^2}
$$

::: callout-warning
## Ограничения

Евклидово расстояние наследует искажения проекции, а также предполагает, что объекты доступны напрямую.
:::
:::

::: {.column width="50%"}
![](images/dist_euc.svg){fig-align="center" width="70%"}
:::
:::

## Расстояния

::: columns
::: {.column width="50%"}
#### Манхэттенское расстояние

Аппроксимирует реальное расстояние между точками в транспортных сетях с ортогональной планировкой.

$$
d(A,B) = |x_A - x_B| + |y_A - y_B|
$$

::: callout-warning
## Ограничения

Даёт преимущества только в том случае когда дорожная сеть ориентирована по направлениям осей $X$ и $Y$.
:::
:::

::: {.column width="50%"}
![](images/dist_manh.svg){width="70%" fig-align="center"}
:::
:::

## Расстояния

::: columns
::: {.column width="50%"}
#### Геодезические расстояние

Кратчайшее расстояние между точками на поверхности эллипсоида. Для сферы:

$$
d(A,B) = \\ \arccos ( 
\sin \phi_A \sin \phi_B + \\ 
\cos \phi_A \cos \phi_B \cos(\lambda_A - \lambda_B))
$$
:::

::: {.column width="50%"}
![](images/dist_geo.svg){fig-align="center" width="75%"}
:::
:::

::: callout-note
## Геодезическая линия и ортодромия

Линия кратчайшего расстояния *на эллипсоиде* --- **геодезическая**.\
Линия кратчайшего расстояния *на сфере* --- **ортодромия.**
:::

## Метрические отношения

**Метрические отношения** устанавливают расстояния между объектами с использованием выбранной метрики.

![](images/dist_all.svg){width="100%"}

::: callout-note
## Метрики

Для оценки расстояний может использоваться множество других метрик. Они не исчерпываются приведенными примерами.
:::

## Топологические отношения

Топологические отношения можно описать в терминах пересечения трех областей каждого объекта [@egenhofer1991]:

::: columns
::: {.column width="40%"}
-   Внутренняя область ($A^o$)

-   Граница ($\partial A$)

-   Внешняя область ($A^-$)
:::

::: {.column width="60%"}
![](images/egenhofer.svg){fig-align="left" width="70%"}
:::
:::

Матрица Эгенхофера **9-IM** содержит 0 или 1 в зависимости от наличия или отсутствия пересечения:

$$
\begin{bmatrix}
A^o  \cap B^o \ne \emptyset   &   A^o \cap \partial{B} \ne \emptyset & A^o \cap B^- \ne \emptyset \\
\partial{A} \cap B^o \ne \emptyset   &    \partial{A} \cap \partial{B} \ne \emptyset  &  \partial{A} \cap B^- \ne \emptyset \\
A^- \cap B^o \ne \emptyset    &    A^- \cap \partial{B} \ne \emptyset   &   A^-  \cap B^- \ne \emptyset
\end{bmatrix}
$$

## Топологические отношения

::: columns
::: {.column width="60%"}

Не пересекает

:   Внутренняя область и граница **A** не имеют пересечений с внутренней областью и границей **B**

$$
\begin{bmatrix} 
    0 & 0 & \bf{1} \\
    0 & 0 & \bf{1} \\
    \bf{1} & \bf{1} & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что объекты никак не соприкасаются в пространстве.
:::
:::

::: {.column width="40%"}
![](images/topo_disjoint.svg){width="70%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="60%"}

Равен

:   Границы, внутренние и внешние области **A** пересекаются с *аналогичными* элементами **B**

$$
\begin{bmatrix} 
    \bf{1} & 0 & 0 \\
    0 & \bf{1} & 0 \\
    0 & 0 & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что объекты совпадают.
:::
:::

::: {.column width="40%"}
![](images/topo_equals.svg){width="70%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="60%"}

Перекрывает

:   Все компоненты **A** пересекаются со всеми компонентами **B**

$$
\begin{bmatrix} 
    \bf{1} & \bf{1} & \bf{1} \\
    \bf{1} & \bf{1} & \bf{1} \\
    \bf{1} & \bf{1} & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что объекты имеют частичное перекрытие.
:::
:::

::: {.column width="40%"}
![](images/topo_overlaps.svg){width="70%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="60%"}

Касается

:   Внутренняя область и граница **A** не пересекатся с внутренней областью **B** и наоборот.

$$
\begin{bmatrix} 
    0 & 0 & \bf{1} \\
    0 & \bf{1} & \bf{1} \\
    \bf{1} & \bf{1} & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что объекты касаются друг друга снаружи.
:::
:::

::: {.column width="40%"}
![](images/topo_touches.svg){width="70%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="65%"}

Покрывает

:   Внешняя область **A** не пересекается с границей и внутренней областью **B**, а граница **A** не пересекается с внутренней областью **B**.

$$
\begin{bmatrix} 
    \bf{1} & \bf{1} & \bf{1} \\
    0 & \bf{1} & \bf{1} \\
    0 & 0 & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что один объект содержит внутри себя другой объект, который касается его границы.
:::
:::

::: {.column width="35%"}
![](images/topo_covers.svg){width="70%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="65%"}

Покрыт

:   Внешняя область **B** не пересекается с границей и внутренней областью **A**, а граница **B** не пересекается с внутренней областью **A**.

$$
\begin{bmatrix} 
    \bf{1} & 0 & 0 \\
    \bf{1} & \bf{1} & 0 \\
    \bf{1} & \bf{1} & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что один объект содержится внутри другого объекта и касается его границы.
:::
:::

::: {.column width="35%"}
![](images/topo_covered.svg){width="70%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="65%"}

Содержит

:   Внешняя область и граница **A** не пересекается с границей и внутренней областью **B**, остальные пересечения присутствуют.

$$
\begin{bmatrix} 
    \bf{1} & \bf{1} & \bf{1} \\
    0 & 0 & \bf{1} \\
    0 & 0 & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что один объект содержит внутри себя другой объект.
:::
:::

::: {.column width="35%"}
![](images/topo_contains.svg){width="80%"}
:::
:::

## Топологические отношения

::: columns
::: {.column width="65%"}

Внутри

:   Внешняя область и граница **B** не пересекается с границей и внутренней областью **A**, остальные пересечения присутствуют.

$$
\begin{bmatrix} 
    \bf{1} & 0 & 0 \\
    \bf{1} & 0 & 0 \\
    \bf{1} & \bf{1} & \bf{1} \\
\end{bmatrix}
$$

::: callout-note
## Применение

Используется чтобы установить, что один объект содержится внутри другого объекта.
:::
:::

::: {.column width="35%"}
![](images/topo_within.svg){width="70%"}
:::
:::

## Топологические отношения

Пересекает

:   Внутренняя область или граница **A** пересекается с внутренней областью или границей **B**.

![](images/topo_all.svg){fig-align="center" width="100%"}

## Пересдача контрольной работы №1

| Группа                                 | Преподаватели                          | Пересдача                              |
|------------------------|------------------------|------------------------|
| 206, 207, 209, 213, 214, 217           | Грищенко, Карпачевский, Ушакова, Энтин | **Четверг 21 марта, 17:00, ауд. 1903** |
| 201, 202, 204, 210, 212, 218, 221, 222 | Аляутдинов, Титов                      | **Вторник 26 марта, 17:30, ауд. 1903** |

## Дирекционные отношения

::: columns
::: {.column width="50%"}
**Угловая (коническая) модель** базируется на вычислении угла направления с точки **A** в точку **B**.

-   Как правило используется дирекционный угол или азимут.

::: callout-caution
## Ограничения

Применима только для точечных объектов
:::
:::

::: {.column width="50%"}
![](images/dir_ang.svg){width="70%"}
:::
:::

## Дирекционные отношения

::: columns
::: {.column width="60%"}
**Прямоугольная модель** разделяет плоскость на 9 секторов относительно прямоугольника, ограничивающего объект.

-   Используется минимальный ограничивающий прямоугольник со сторонами, параллельными осям координат.

::: callout-caution
## Ограничения

Дает качественную оценку направления по сторонам света
:::
:::

::: {.column width="40%"}
![](images/dir_mbr.svg){width="100%"}
:::
:::

## Дирекционные отношения

::: columns
::: {.column width="50%"}
**Проективная модель** используется для оценки направления на третий объект **C** относительно двух других объектов **A** и **B**.

-   Плоскость делится на 4 "конуса", а также область между объектами.

::: callout-caution
## Ограничения

Дает качественную оценку направления и применяется для *движущихся* объектов
:::
:::

::: {.column width="50%"}
![](images/dir_proj.svg){width="100%"}
:::
:::

## Пространственные запросы

Пространственные запросы аналогичны атрибутивным, но в качестве условия используют пространственные отношения.

![](images/sp_relations.svg){width="100%"}

## Пространственные запросы

::: columns
::: {.column width="50%"}
![Дома на расстоянии 100 м от реки](images/dist_bld.svg){fig-align="left" width="60%"}

![Почвенные разрезы в пределах леса](images/within_pts.svg){fig-align="left" width="60%"}
:::

::: {.column width="50%"}
![Дороги, примыкающие к границе](images/touch_rds.svg){fig-align="left" width="60%"}

![Метеостанции к северо-западу от гидропоста](images/dir_meteo.svg){fig-align="left" width="55%"}
:::
:::

## Длина / периметр

::: columns
::: {.column width="50%"}
Рассчитываются как сумма длин отрезков, составляющих контур объекта:

$$
L =\\ \sum_{i=0}^{n-2}\sqrt{(x_{i+1}-x_i)^2 + (y_{i+1}-y_i)^2}
$$

::: callout-note
## Полигон

У полигона последняя точка должна иметь такие же координаты, как и первая.
:::
:::

::: {.column width="50%"}
![](images/perimeter.svg){width="100%"}
:::
:::

## Площадь

::: columns
::: {.column width="50%"}
Рассчитывается как сумма площадей трапеций, ограниченных сверху отрезками, составляющими контур объекта:

$$
A = \frac{1}{2}\sum_{i=0}^{n-2} \underbrace{(y_{i+1}+y_{i})}_{\texttt{основания}}\underbrace{(x_{i+1}-x_{i})}_{\texttt{высота}}
$$

::: callout-note
## Отрицательная площадь

Трапеции, у которых $i+1$-я точка имеет меньший X, чем $i$-я, имеют отрицательную площадь.
:::
:::

::: {.column width="50%"}
![](images/area.svg){width="100%"}
:::
:::

## Принадлежность точки полигону

Луч, выпущенный из точки в направлении оси $X$, пересекает границу полигона **нечетное** количество раз.

::: columns
::: {.column width="60%"}
![](images/point_polygon.svg){width="90%"}
:::

::: {.column width="40%"}
::: callout-note
## Обратите внимание

Если луч пересекает одну из *вершин* полигона, и оба примыкающих к ней отрезка находятся по одну сторону от луча, это засчитывается как два пересечения.
:::
:::
:::

::: callout-tip
## Применение

Данная операция активно используется при оценке топологических отношений — например, для выполнения пространственных запросов.
:::

## Ограничивающий прямоугольник

::: columns
::: {.column width="50%"}
**Ограничивающий прямоугольник** определяет охват данных по осям координат.

Задаётся координатами углов:

-   левого нижнего $(x_{min}, y_{min})$

-   правого верхнего $(x_{max}, y_{max})$
:::

::: {.column width="50%"}
![](images/bbox.svg){width="100%"}
:::
:::

::: callout-tip
## Применение

Ограничивающий прямоугольник является важным элементом *метаданных* --- описания пространственных данных, но также используется и в аналитических задачах.
:::

## Выпуклая оболочка

::: columns
::: {.column width="50%"}
**Выпуклая оболочка** --- наименьший по площади выпуклый многоугольник, *покрывающий* заданное множество точек.

::: callout-note
## Выпуклое множество

Множество, в котором отрезок, соединяющий любые две точки также находится внутри этого множества.

![](images/non_convex.svg){width="65%"}
:::
:::

::: {.column width="50%"}
![](images/convex_hull.svg){width="75%"}

::: callout-tip
## Применение

Выпуклые оболочки используются для восстановления ареалов по точечным измерениям. Также выпуклая оболочка является границей *триангуляционного покрытия*.
:::
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.
:::

::: {.column width="45%"}
![](images/convex_hull_1.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.
:::

::: {.column width="45%"}
![](images/convex_hull_2.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.

3.  Пока $q_k \neq q_0$ начиная с $k=1$

    -   найти точку $q_{k+1}$ с минимальным углом поворота относительно прямой, проходящей через $\overline{q_{k-1}q_k}$;

    -   $k = k + 1$.

$k = 2,~q_2 \neq q_0$
:::

::: {.column width="45%"}
![](images/convex_hull_3.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.

3.  Пока $q_k \neq q_0$ начиная с $k=1$

    -   найти точку $q_{k+1}$ с минимальным углом поворота относительно прямой, проходящей через $\overline{q_{k-1}q_k}$;

    -   $k = k + 1$.

$k=3,~q_3 \neq q_0$
:::

::: {.column width="45%"}
![](images/convex_hull_4.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.

3.  Пока $q_k \neq q_0$ начиная с $k=1$

    -   найти точку $q_{k+1}$ с минимальным углом поворота относительно прямой, проходящей через $\overline{q_{k-1}q_k}$;

    -   $k = k + 1$.

$k=4,~q_4 \neq q_0$
:::

::: {.column width="45%"}
![](images/convex_hull_5.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.

3.  Пока $q_k \neq q_0$ начиная с $k=1$

    -   найти точку $q_{k+1}$ с минимальным углом поворота относительно прямой, проходящей через $\overline{q_{k-1}q_k}$;

    -   $k = k + 1$.

$k=5,~q_5 \neq q_0$
:::

::: {.column width="45%"}
![](images/convex_hull_6.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.

3.  Пока $q_k \neq q_0$ начиная с $k=1$

    -   найти точку $q_{k+1}$ с минимальным углом поворота относительно прямой, проходящей через $\overline{q_{k-1}q_k}$;

    -   $k = k + 1$.

$k=6,~q_6 = q_0$
:::

::: {.column width="45%"}
![](images/convex_hull_7.svg){width="100%"}
:::
:::

## Выпуклая оболочка

Известный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:

::: columns
::: {.column width="55%"}
1.  Найти точку $q_0$ с минимальной координатой $X$.

2.  Найти точку $q_1$ с минимальным дир. углом относительно $q_0$.

3.  Пока $q_k \neq q_0$ начиная с $k=1$

    -   найти точку $q_{k+1}$ с минимальным углом поворота относительно прямой, проходящей через $\overline{q_{k-1}q_k}$;

    -   $k = k + 1$.

4.  Восстановить полигон по точкам $q_0, q_1, … q_k$, где $k > 2$ и $q_0 = q_k$.
:::

::: {.column width="45%"}
![](images/convex_hull_8.svg){width="100%"}
:::
:::

## Диаграмма Вороного

::: columns
::: {.column width="40%"}
![](images/voronoy_outline.svg){width="100%"}
:::

::: {.column width="60%"}

Диаграмма Вороного

:   Диаграмма Вороного конечного множества точек $S$ на плоскости представляет такое разбиение плоскости, при котором каждая область этого разбиения образует множество точек, более близких к одному из элементов множества $S$, чем к любому другому элементу множества.
:::
:::

::: callout-tip
## Применение

Диаграмма Вороного используется при моделировании зон влияния объектов.
:::

## Диаграмма Вороного

**Пример**: количество заведений общественного питания в окрестностях станций метро

```{r, fig.height = 5, fig.width = 6.5, fig.align='left'}
library(sf)
library(tidyverse)
library(classInt)
library(mapsf) # Удобное построение тематических карт средствами plot()s

roads = read_sf("../r-geo-course/data/roads.gpkg") # Дороги
poi = read_sf("../r-geo-course/data/poi_point.gpkg") # Точки интереса
rayons = read_sf("../r-geo-course/data/boundary_polygon.gpkg") # Границы районов
stations = read_sf("../r-geo-course/data/metro_stations.gpkg") # Станции метро
water = read_sf("../r-geo-course/data/water_polygon.gpkg") # Водные объекты

stations$label = 'М' # пригодится для подписей

frame = roads |> st_bbox() |> st_as_sfc() |> st_geometry()

# Функция отвечает за рисование базовой карты
basemap2 = function(add = FALSE){
  
  mf_base(frame, col = NA, add = add)
  mf_base(water, 
       col = "lightskyblue1",
       border = "lightskyblue3",
       add = TRUE)
  mf_base(roads,
       col = "gray70", 
       add = TRUE)
  
  mf_base(poi_food, 
     col = "deepskyblue4", 
     pch = 20, cex = 0.5, 
     add = TRUE)
  
  mf_base(stations, 
     col = "slategray4", 
     pch = 20, 
     cex = 3, 
     add = TRUE)
  
  mf_label(stations,
     var = 'label',
     col = "white",
     cex = 0.6)
}

poi_food = poi |>  
  select(NAME, AMENITY) |> 
  filter(AMENITY %in% c("restaurant", "bar", "cafe", 
                        "pub", "fast_food")) |> 
  mutate(count = 1)


zones = stations |> 
  st_combine() |> 
  st_voronoi() |> 
  st_collection_extract() |> 
  st_crop(frame)

# Агрегруем данные по каждой зоне
zones_poi = aggregate(poi_food['count'], zones, sum)

# Визуализируем результат

basemap2()
mf_base(zones, col = adjustcolor("white", alpha.f = 0.5),
        add = TRUE)
mf_map(zones_poi, var = 'count', type = 'prop', 
       col = adjustcolor("turquoise3", alpha.f = 0.5),
       border = F,
       leg_title = "Заведений\nпитания")
mf_label(zones_poi, 
     var = 'count',
     col = "turquoise4",
     cex = log(zones_poi$count)/4)
```

## Центроид и срединная ось

::: columns
::: {.column width="50%"}
**Центроид** --- точка, представляющая среднее значение координат полигона без учета последней точки (которая совпадает с первой):

$$
C = \Bigg(\frac{1}{n-1}\sum_{i=0}^{n-2} x_i, \frac{1}{n-1}\sum_{i=0}^{n-2} y_i \Bigg)
$$

**Срединная ось** --- линия равноудаленная от границ полигона.
:::

::: {.column width="50%"}
![](images/centroid_axis.svg){width="100%"}

::: callout-tip
## Применение

Используются для картографической генерализации.
:::
:::
:::

## Буферные зоны

**Буферная зона** --- это множество точек, располагающихся в пределах заданного расстояния относительно объекта.

::: columns
::: {.column width="40%"}
-   буфер точки представляет собой круг;

-   буфер полигона может быть положительным и отрицательным;

-   буфер точки или линии всегда положительный.
:::

::: {.column width="60%"}
![](images/buffering.svg){width="65%"}
:::
:::

::: callout-tip
## Применение

Используются при анализе влияния. Например, определения водоохранных зон.
:::

## Буферные зоны

**Пример:** кафе в 100-метровой буферной зоне р. Москвы

```{r, fig.height = 5, fig.width = 5, fig.align='left'}
river = water |> filter(NAME == "Москва") |> st_union()
zone = st_buffer(river, dist = 100)

selected_poi = poi_food[zone, ]

basemap2()

# Визуализируем результаты анализа
mf_base(zone,
     col = adjustcolor("sienna3", alpha.f = 0.5),
     border = "sienna3",
     add = TRUE)

mf_base(river,
     col = adjustcolor("cyan", alpha.f = 0.5),
     border = "black",
     add = TRUE)

mf_base(selected_poi, 
     col = "red", 
     pch = 20, 
     cex = 1.5, 
     add = TRUE)
```

## Буферные зоны

**Пример**: изменение количества кафе на $1~км^2$ при удалении от станции метро (расширение буферной зоны).

```{r}
Расстояние = seq(50, 300, 50)

Плотность = sapply(Расстояние, function(d) {
  buf = st_buffer(stations, dist = d) %>% 
    st_union()
  npoi = nrow(poi_food[buf, ])
  return(npoi / units::set_units(st_area(buf), km^2))
})

qplot(Расстояние, Плотность, geom = 'line', linewidth=1)
```

## Преобразование моделей объектов

Между любыми моделями пространственных объектов возможны взаимные преобразования.

::: columns
::: {.column width="60%"}
![](images/conversions.svg){width="100%"}
:::

::: {.column width="40%"}
::: callout-tip
## Применение

Например, можно получить из полигона заповедника поворотные точки его границы. Или восстановить линию почвенного профиля по точкам разрезов.
:::

::: callout-important
## Мультигеометрия

При конвертации полигона или линии в точки обычно получается мультиточечный объект.
:::
:::
:::

## Преобразования мультиобъектов

В некоторых случаях требуется преобразовать мультиобъект в множество отдельных объектов и наоборот.

![](images/multi_conv.svg){width="100%"}

::: callout-tip
## Применение

Например, требуется провести анализ в пределах отдельных островов архипелага.
:::

## Слияние (объединение по признаку)

**Слияние** (объединение по признаку) --- это объединение геометрий пересекающихся объектов с одинаковым значением атрибута.

![](images/dissolve.svg){width="85%"}

::: callout-tip
## Применение

Слияние всегда сопровождает агрегирование атрибутов и используется при укрупнении единиц картографирования. Также может применяться при векторизации, когда объект создается по фрагментам, которые далее необходимо объединить.
:::

## Оверлей

**Оверлей** — пространственное наложение двух или более пространственных объектов, при котором образуется их геометрическая и атрибутивная композиция.

![](images/overlay.svg){width="100%"}

**Оверлей** — одна из самых полезных геометрических операций.

## Оверлей

::: columns
::: {.column width="50%"}
*Пересечение* используется для **обрезки данных** по указанной области.

Область обрезки может быть произвольной, но чаще всего используется ограничивающий прямоугольник

::: callout-note
## Clip

Обрезка данных *(clip)* является частным случаем пересечения с полигональным объектом, при котором наследуются только атрибуты обрезаемых объектов.
:::
:::

::: {.column width="50%"}
![](images/clip.svg){width="100%"}
:::
:::

## Оверлей

::: columns
::: {.column width="50%"}
**Пространственная ассоциация** — взаимосвязь местоположения объектов — также может быть исследована путем оверлея.

Для двух классов $A$ и $B$:

-   односторонняя ассоциация:\
    $|A \cap B|/ |A|$

-   двусторонняя ассоциация:\
    $|A \cap B| / |A \cup B|$
:::

::: {.column width="50%"}
![](images/assoc.svg){width="80%"}
:::
:::

Для анализа ассоциации двух явлений --- например *типов почв и рельефа* --- состоящих из множества классов, используются специальные индексы. Например, индекс [**Крамера V**](https://en.wikipedia.org/wiki/Cramér%27s_V).

## Оверлей

::: columns
::: {.column width="50%"}
**Пространственные соотношения** различных типов объектов в пределах заданных участков также определяются методом оверлея.

Доля класса $A$ в пределах участка $C$:

$$
|A \cap C|/ |C|
$$
:::

::: {.column width="50%"}
![](images/ratio.svg){width="100%"}
:::
:::

::: callout-tip
## Пример

Модели формирования речного стока работают на растровой сетке и требуют задания соотношения типов подстилающей поверхности для каждой ячейки.
:::

## Отношение геометрии и атрибутов

В геореляционных базах данных допустимое множество операций над атрибутом также зависит от того как он получен относительно пространства.

**Опора измерений** — физический объем, подвергнутый измерению.

::: columns
::: {.column width="50%"}
::: callout-note
## Экстенсивные атрибуты

Пропорциональны опоре измерений. Суммируются при объединении территорий и делятся при разделении.

![Численность населения](images/extensive.svg){width="100%"}
:::
:::

::: {.column width="50%"}
::: callout-note
## Интенсивные атрибуты

Не пропорциональны опоре измерений. Осредняются при объединении территорий и остаются прежними при разделении.

![Плотность населения](images/intensive.svg){width="100%"}
:::
:::
:::

## Оверлей

**Интерполяция, взвешенная на площадь** — способ пересчета количественного показателя между сетками учетных единиц.

::: columns
::: {.column width="50%"}
Для каждой из $q$ выходных единиц $T_j$, средневзвешенное значение $Y_i$ извлеченное из $p$ исходных единиц $S_i$, равно:

$$
\hat{Y_j}(T_j) = \sum_{i=1}^p w_{ij} Y_i(S_i)
$$

-   экстенсивная: $w_{ij} = \frac{|T_j \cap S_i|}{|S_i|}$

-   интенсивная: $w_{ij} = \frac{|T_j \cap S_i|}{|T_j|}$
:::

::: {.column width="50%"}
![](images/areaweighted.svg){width="100%"}
:::
:::

## Словарик (часть 1)

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Пространственное отношение

Евклидово расстояние

Геодезическое расстояние

Метрическое отношение

Топологическое отношение

Дирекционное отношение

Пространственный запрос

Огранич. прямоугольник

Выпуклая оболочка
:::

::: {.column width="50%" style="color: red"}
Spatial relation

Euclidean distance

Geodesic distance

Metric relation

Topological relation

Directional relation

Spatial query

Bounding box

Convex hull
:::
:::

## Словарик (часть 2)

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Диаграмма Вороного

Центроид

Срединная ось

Буферная зона

Слияние

Оверлей

Обрезка

Интерполяция, взвешенная на площадь
:::

::: {.column width="50%" style="color: red"}
Voronoy diagram

Centroid

Medial axis

Buffer

Dissolve

Overlay

Clip

Area-weighted interpolation
:::
:::

## Библиография
