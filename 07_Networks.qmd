---
title: "Сетевой анализ"
subtitle: "Основы геоинформатики: лекция 7"
date: 03/22/2024
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  message: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom_small.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Географические сети

Сетевые формы структурной организации явлений играют большую роль в географическое среде

![](images/net_examples.svg){width="100%"}

Для моделирования таких структур используется *теория графов*.

## Граф

Простой граф $G(V,E)$ --- совокупность множества вершин $V = \{v_1, v_2, ...\}$ и множества ребер $E$ [@newman2018].

::: columns
::: {.column width="50%"}
-   $E$ состоит из упорядоченных пар элементов множества вершин:

    $$
    e_{ij} = \{v_i, v_j \},~ i \neq j
    $$

-   $V$ не пусто;

-   $E$ может быть пустым;

-   не все комбинации $\{v_i, v_j \}$ могут входить в $E$.
:::

::: {.column width="50%"}
![](images/graph.svg){width="100%"}
:::
:::

## Матрица смежности

Представление ребер в виде матрицы $A = \{a_{ij}\}$, где $a_{ij} = 1$, если существует ребро $e_{ij}$, и $a_{ij} = 0$, если такого ребра нет.

::: columns
::: {.column width="45%"}
![](images/adj_1.svg){width="100%"}
:::

::: {.column width="55%"}
$$
\begin{bmatrix}
0 & 0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} & 0 & 0 \\
0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} & 0 \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & \color{blue}{\mathbf 1} \\
0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
\end{bmatrix}
$$
:::
:::

## Матрица смежности

Представление ребер в виде матрицы $A = \{a_{ij}\}$, где $a_{ij} = 1$, если существует ребро $e_{ij}$, и $a_{ij} = 0$, если такого ребра нет.

::: columns
::: {.column width="45%"}
![](images/adj_2.svg){width="100%"}
:::

::: {.column width="55%"}
$$
\begin{bmatrix}
0 & 0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & 0 & 0 \\
0 & 0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & 0 & 0 \\
0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & 0 & 0 & 0 \\
0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & 0 & 0 & 0 \\
0 & 0 & \color{red}{\mathbf 1} & \color{red}{\mathbf 1} & 0 & 0 & \color{red}{\mathbf 1} & 0 \\
\color{red}{\mathbf 1} & \color{red}{\mathbf 1} & 0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & 0 \\
0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & \color{red}{\mathbf 1} & 0 & \color{red}{\mathbf 1} \\
0 & 0 & 0 & 0 & 0 & 0 & \color{red}{\mathbf 1} & 0 \\
\end{bmatrix}
$$
:::
:::

## Топологическая эквивалентность

**Топологически эквивалентными** являются графы, у которых совпадают матрицы смежности [@barthelemy:2022].

![](images/two_graphs_raw.svg){width="100%"}

::: callout-note
## Географические сети

Географические сети отличаются тем, что для них важную роль играет не только топологическая эквивалентность, но также местоположение (координаты) вершин.
:::

## Топологическая эквивалентность

**Топологически эквивалентными** являются графы, у которых совпадают матрицы смежности [@barthelemy:2022].

![](images/two_graphs.svg){width="100%"}

::: callout-note
## Географические сети

Географические сети отличаются тем, что для них важную роль играет не только топологическая эквивалентность, но также местоположение (координаты) вершин.
:::

## Задачи

**Основные направления** сетевого анализа:

1.  **Решение задач на графах** --- построение маршрутов, изохрон, матриц корреспонденций, определение ближайших пунктов обслуживания и оптимизация их расстановки.
2.  **Структурный анализ** --- вычисление показателей, характеризующих топологию сети, значимость ее отдельных элементов
3.  **Динамика** **и** **эволюция** географических сетей
4.  **Надежность, устойчивость и уязвимость** географических сетей.

## Решение задач на графах

::: columns
::: {.column width="50%"}
Необходимо на основе векторных данных создать графовую (сетевую) модель, состоящую из вершин и ребер

::: callout-important
## Важно

Для того чтобы граф построился корректно, линии должны быть аккуратно пристыкованы друг к другу в местах сочленений. В противном случае в местах их стыковки не будут созданы вершины графа.
:::
:::

::: {.column width="50%"}
```{r}
library(sf)
library(tidyverse)
library(classInt)
library(osrm) # Использование онлайн-сервиса маршрутизации OSRM
library(sfnetworks)
library(tidygraph)
library(ggrepel)

# Чтение данных

db = 'data/moscow.gpkg'
roads = read_sf(db, "roads") # Дороги
poi = read_sf(db, "poi") # Точки интереса
rayons = read_sf(db, "districts") # Границы районов
stations = read_sf(db, "metro_stations") # Станции метро
water = read_sf(db, "water") # Водные объекты

# Прочитаем текущие параметры компоновки
def = par(no.readonly = TRUE)

# Уберем поля, чтобы карта занимала весь экран
par(mar = c(0,0,0,0))

# Получим ограничивающий прямоугольник слоя дорог в качестве общего охвата карты
frame = roads |>  
  st_bbox() |>
  st_as_sfc() |> 
  st_geometry()

poi.food = poi |>  
    select(NAME, AMENITY) |> 
    filter(AMENITY %in% c("restaurant", "bar", "cafe", "pub", "fast_food"))

lines = roads |> 
  st_cast('LINESTRING')

twoway = lines |>
  filter(is.na(ONEWAY) | ONEWAY != 'yes') |>
  st_reverse() |>
  bind_rows(lines)

net = twoway |>
  st_geometry() |>
  lapply(function(x) round(x, 0)) |>
  st_sfc(crs = st_crs(roads)) |>
  as_sfnetwork()
```

```{r, fig.height=8, fig.width=8, fig.align='left'}
autoplot(net) + 
  theme_void()
```
:::
:::

## Кратчайший маршрут

Выполняется поиск последовательности ребер графа, которая дает минимальную стоимость передвижения между точками.

::: columns
::: {.column width="45%"}
::: callout-note
## Особенности

-   стоимость одного ребра графа обычно выражается в времени передвижения по нему, либо его длине;

-   стоимость может быть масштабирована на коэффициент значимости ребра;

-   дополнительные задержки могут быть заложены в вершинах графа;

-   может учитываться трафик движения.
:::
:::

::: {.column width="55%"}
```{r, fig.height=8, fig.width=8, fig.align='left'}
# Инициализируем систему координат WGS84, используемую в OSRM
WGS84 = st_crs(4326)

# Извлечем информацию о системе координат исходных точек
UTM = st_crs(poi)

# Выберем целевой объект
psel = poi |>  
  filter(NAME == "Центральный детский магазин" & SHOP == "toys") |> 
  mutate(x = geom[[1]][1],
         y = geom[[1]][2], 
         NAME = 'ЦДМ')

# Преобразуем координаты точки в WGS84
psel.wgs = st_transform(psel, WGS84)

# Выбираем и проецируем начальную точку
origin = poi |> filter(NAME == 'Молодая Гвардия')  |> 
  mutate(x = geom[[1]][1],
         y = geom[[1]][2])
origin_wgs = st_transform(origin, WGS84)
  
# Выбираем и проецируем конечную точку
destination = poi |>  
  filter(NAME == 'Чебуречная "Дружба"') |> 
  mutate(x = geom[[1]][1],
         y = geom[[1]][2])
destination_wgs = st_transform(destination, WGS84)

# Строим маршрут
route = osrmRoute(origin_wgs, 
                  destination_wgs, 
                  overview = "full") # вернуть результат в виде объекта класса Spatial

# Преобразуем результат обратно в UTM
route.utm = st_transform(route, UTM)

ggplot() + 
  geom_sf(data = st_as_sf(net, "edges"), color = 'grey') +
  geom_sf(data = st_as_sf(net, "nodes"), color = 'grey') +
  geom_sf(data = route, color = 'red', linewidth = 4, alpha = 0.5) +
  geom_sf(data = origin, size = 10, color = 'steelblue4', alpha = 0.85) +
  geom_sf(data = destination, size = 10, color = 'steelblue4', alpha = 0.85) +
  geom_label_repel(data = destination, box.padding = 1,
                   mapping = aes(x,y, label = NAME), size = 10) +
  geom_label_repel(data = origin, box.padding = 1,
                   mapping = aes(x,y, label = NAME), size = 10) +
  theme_void()
```
:::
:::

## Задача коммивояжёра

::: columns
::: {.column width="40%"}
**Задача коммивояжера** --- определение оптимального маршрута объезда заданного множества точек

::: callout-note
## Использование

Одна из самых распространенных задач в логистике. Решается в целях оптимизации объезда клиентов, складов и т.д. Вычислительно является сложной задачей.
:::
:::

::: {.column width="60%"}
```{r, fig.height=4, fig.width=4, out.width='100%', dpi=300,  fig.align='left'}
sber = poi |>  
  filter(OSM_ID %in% c(2298789061, 1705988219, 
                       1531266598, 916076946, 2043705976)) %>% 
  bind_cols(st_coordinates(x = .))

sber_wgs = st_transform(sber, WGS84)

route = osrmTrip(sber, overview = "full")[[1]]$trip |> 
  mutate(order = ordered(row_number()))

ggplot() + 
  geom_sf(data = st_as_sf(net, "edges"), color = 'grey', linewidth = 0.25) +
  geom_sf(data = st_as_sf(net, "nodes"), color = 'grey', size = 0.5) +
  geom_sf(data = route, mapping = aes(color = order), 
          linewidth = 2, alpha = 0.85) +
  geom_sf(data = sber, size = 5, color = 'darkgreen', alpha = 0.85) +
  geom_label_repel(data = sber, box.padding = 1,
                   mapping = aes(X,Y, label = NAME), size = 5) +
  theme_void()
```
:::
:::

## Ближайший пункт обслуживания

::: columns
::: {.column width="40%"}
Задача данного класса позволяет находить для каждой точки клиента ближайший к ней пункт обслуживания

::: callout-tip
## Пример

Для каждого заведения общепита найти ближайшее по времени отделение Сбербанка **для пешехода**
:::
:::

::: {.column width="60%"}
```{r, fig.height=4, fig.width=4, out.width='100%', dpi=300,  fig.align='left'}
bars = poi.food %>%
  # filter(AMENITY %in% c('bar', 'pub')) %>% 
  bind_cols(st_coordinates(x = .)) |> 
  dplyr::sample_n(100)

bars_wgs = st_transform(bars, WGS84)

odmatrix = osrmTable(src = bars_wgs, dst = sber_wgs, osrm.profile	
= 'foot')$durations

best = apply(odmatrix, 1, which.min)

connects = st_sfc(
  lapply(seq_along(best), \(i) {
    st_linestring(
      rbind(
        c(bars$X[i], bars$Y[i]),
        c(sber$X[best[i]], sber$Y[best[i]])
      )
    )
  }),
  crs = UTM
)

ggplot() + 
  geom_sf(data = st_as_sf(net, "edges"), color = 'grey', linewidth = 0.25) +
  geom_sf(data = st_as_sf(net, "nodes"), color = 'grey', size = 0.5) +
  geom_sf(data = connects, linewidth = 1, alpha = 0.85) +
  geom_sf(data = sber, size = 5, color = 'darkgreen', alpha = 0.85) +
  geom_label_repel(data = sber, box.padding = 1,
                   mapping = aes(X,Y, label = NAME), size = 5) +
  theme_void()
```
:::
:::

## Ближайший пункт обслуживания

::: columns
::: {.column width="40%"}
Задача данного класса позволяет находить для каждой точки клиента ближайший к ней пункт обслуживания

::: callout-tip
## Пример

Для каждого заведения общепита найти ближайшее по времени отделение Сбербанка **для автомобилиста**
:::
:::

::: {.column width="60%"}
```{r, fig.height=4, fig.width=4, out.width='100%', dpi=300,  fig.align='left'}
odmatrix = osrmTable(src = bars_wgs, dst = sber_wgs, 
                     osrm.profile	= 'car')$durations

best = apply(odmatrix, 1, which.min)

connects = st_sfc(
  lapply(seq_along(best), \(i) {
    st_linestring(
      rbind(
        c(bars$X[i], bars$Y[i]),
        c(sber$X[best[i]], sber$Y[best[i]])
      )
    )
  }),
  crs = UTM
)

ggplot() + 
  geom_sf(data = st_as_sf(net, "edges"), color = 'grey', linewidth = 0.25) +
  geom_sf(data = st_as_sf(net, "nodes"), color = 'grey', size = 0.5) +
  geom_sf(data = connects, linewidth = 1, alpha = 0.85) +
  geom_sf(data = sber, size = 5, color = 'darkgreen', alpha = 0.85) +
  geom_label_repel(data = sber, box.padding = 1,
                   mapping = aes(X,Y, label = NAME), size = 5) +
  theme_void()
```
:::
:::

## Изохроны

::: columns
::: {.column width="40%"}
**Изохрона** --- это линия постоянного времени движения от или до заданной точки.

::: callout-note
## Алгоритм построения

1.  В каждой вершине графа вычислить время движения от/до указанной точки.
2.  Собрать из вершин триангуляционное покрытие --- поверхность времени движения.
3.  Извлечь из покрытия изолинии для заданных значений.
:::
:::

::: {.column width="60%"}
```{r, fig.height=4, fig.width=4, out.width='100%', dpi=300,  fig.align='left'}
service_area = osrmIsochrone(psel.wgs, breaks = 1:5)

# Преобразуем зону обратно в UTM для дальнейших операций
service_area_utm = st_transform(st_as_sf(service_area), UTM)

# Отбираем точки
selected_poi = poi.food[service_area_utm, ]

box = st_bbox(roads)

ggplot() + 
  geom_sf(data = service_area_utm, mapping = aes(fill = isomin), 
          linewidth = 0) +
  scale_fill_fermenter(breaks = 0:5, name = 'мин', palette = 'Reds') +
  geom_sf(data = st_as_sf(net, "edges"), color = 'grey', linewidth = 0.25) +
  geom_sf(data = st_as_sf(net, "nodes"), color = 'grey', size = 0.5) +
  geom_sf(data = service_area_utm, fill = NA,
          color = 'black', linewidth = 0.5) +
  scale_x_continuous(limits = box[c(1,3)], expand = c(0,0)) +
  scale_y_continuous(limits = box[c(2,4)], expand = c(0,0)) +
  geom_sf(data = psel, size = 5, color = 'steelblue4', alpha = 0.85) +
  geom_label_repel(data = psel, box.padding = 1,
                   mapping = aes(x,y, label = NAME), size = 10) +
  theme_void()
```
:::
:::

## Анализ структуры

::: columns
::: {.column width="50%"}
**Анализ структуры** географической сети охарактеризовать ее устройство в виде формальных показателей, определить топологические отношения и центральность отдельных элементов.

::: callout-note
## Центральность

Центральность --- это важность элемента сети. Существует множество показателей центральности
:::
:::

::: {.column width="50%"}
```{r, fig.height=5, fig.width=5, out.width='100%', dpi=300,  fig.align='left'}
net = as_sfnetwork(roxel)
autoplot(net) +
  theme_void()
```
:::
:::

## Центральность

::: columns
::: {.column width="40%"}
**Центральность по промежуточности** показывает количество маршрутов, проходящих через узел/ребро.

::: callout-note
## Расчет и интерпретация

1.  Строятся маршруты между всеми возможными парами вершин в графе.
2.  В каждой вершине суммируется число прошедших через нее маршрутов.

Результат показывает основные магистрали в сети.
:::
:::

::: {.column width="60%"}
```{r, fig.height=5, fig.width=5, out.width='100%', dpi=300,  fig.align='left'}
net = net %>%
  activate("nodes") %>%
  mutate(bc = centrality_betweenness())

ggplot() +
  geom_sf(data = st_as_sf(net, "edges"), col = "grey50") +
  geom_sf(data = st_as_sf(net, "nodes"), 
          aes(fill = bc, size = bc), shape = 21) +
  scale_fill_viridis_c(option="magma") +
  theme_void()
```
:::
:::

## Центральность

::: columns
::: {.column width="40%"}
**Центральность по близости** обратно пропорциональна сумме расстояний от вершины до остальных вершин.

::: callout-tip
## Интерпретация

Центральность по близости позволяет выделить условный "центр" сети --- множество вершин, равноудаленных от всех остальных
:::
:::

::: {.column width="60%"}
```{r, fig.height=5, fig.width=5, out.width='100%', dpi=300,  fig.align='left'}
net = net %>%
  activate("nodes") %>%
  mutate(cc = centrality_closeness(mode = 'all'))

nodes = st_as_sf(net, "nodes") |> 
  filter(cc < 1)

ggplot() +
  geom_sf(data = st_as_sf(net, "edges"), col = "grey50") +
  geom_sf(data = nodes, 
          aes(fill = cc, size = cc), shape = 21) +
  scale_fill_viridis_c(option="magma") +
  #scale_color_gradient(low = 'lightcyan', high = 'red') +
  scale_size(range = c(1.5, 4)) +
  guides(size = guide_legend(reverse=T)) +
  theme_void()
```
:::
:::

## Центральность

::: columns
::: {.column width="40%"}
**Центральность по степени** показывает количество ребер, с которыми связана вершина.

::: callout-note
## Интерпретация

Центральность по степени является локальной характеристикой, она показывается важность вершины в ее собственной окрестности
:::
:::

::: {.column width="60%"}
```{r, fig.height=5, fig.width=5, out.width='100%', dpi=300,  fig.align='left'}
net = net %>%
  activate("nodes") %>%
  mutate(dc = centrality_degree(mode = 'total'))

ggplot() +
  geom_sf(data = st_as_sf(net, "edges"), col = "grey50") +
  geom_sf(data = st_as_sf(net, "nodes"), aes(fill = dc, size = dc), shape = 21) +
  scale_fill_viridis_c(option="magma") +
  # scale_color_gradient(low = 'lightcyan', high = 'red') +
  scale_size(range = c(1.5, 4)) +
  guides(size = guide_legend(reverse=T)) +
  theme_void()
```
:::
:::

## Центральность

::: columns
::: {.column width="40%"}
**Центральность по влиятельности** показывает сумму степеней вершин, с которыми связана текущая вершина.

::: callout-note
## Интерпретация

Центральность по влиятельности позволяет выделить области графа, в которых наблюдается сложная топология сети
:::
:::

::: {.column width="60%"}
```{r, fig.height=5, fig.width=5, out.width='100%', dpi=300,  fig.align='left'}
net = net %>%
  activate("nodes") %>%
  mutate(ec = centrality_eigen())

ggplot() +
  geom_sf(data = st_as_sf(net, "edges"), col = "grey50") +
  geom_sf(data = st_as_sf(net, "nodes"), aes(fill = ec, size = ec), shape = 21) +
  scale_fill_viridis_c(option="magma") +
  #scale_color_gradient(low = 'lightcyan', high = 'red') +
  scale_size(range = c(1.5, 4)) +
  guides(size = guide_legend(reverse=T)) +
  theme_void()
```
:::
:::

## Словарик

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Сеть

Граф

Матрица смежности

Маршрут

Задача коммивояжёра

Ближайший пункт обслуживания

Изохрона

Центральность

Прмежуточность

Близость

Степень
:::

::: {.column width="50%" style="color: red"}
Network

Graph

Adjacency matrix

Route

Traveling salesman problem

Closest facility

Isochrone

Centrality

Betweenness

Closeness

Degree
:::
:::

## Библиография
