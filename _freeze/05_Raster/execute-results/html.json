{
  "hash": "91d34ffe859a231305f1fbb42f344315",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Растровый анализ\"\nsubtitle: \"Основы геоинформатики. Лекция 5\"\ndate: 03/22/2024\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    slide-number: true\n    footer: \"Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Растровая геометрия\n\n**Растровая геометрия** определяется физическим расположением узлов в пространстве. Распространены следующие виды геометрий:\n\n![](images/raster_geom.svg){width=\"100%\"}\n\n::: callout-note\n## Хранение данных\n\nЗначения растра хранятся в виде матрицы вне зависимости от геометрии растра.\n:::\n\n## Измерения растра\n\n**Измерения растра** задают отображение данных на геометрию.\n\n::: columns\n::: {.column width=\"65%\"}\n![](images/dimensions.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"35%\"}\n::: callout-tip\n## X и Y\n\nВ большинстве случаев измерения 1 и 2 носят названия **X** и **Y**, но для аффинных и криволинейных растров они достаточно условны.\n:::\n:::\n:::\n\n::: callout-note\n## Куб данных\n\nРастры, в которых 3 и более измерений, называются растровыми **кубами данных**.\n:::\n\n## Измерения растра\n\n**Измерения растра** задают отображение данных на геометрию.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  from to offset delta refsys x/y\nx    1 72   -180     5 WGS 84 [x]\ny    1 36     90    -5 WGS 84 [y]\n```\n\n\n:::\n:::\n\n\n## Изменение проекции\n\n**Изменение проекции** растра возможно двумя путями\n\n::: columns\n::: {.column width=\"50%\"}\n::: callout-note\n## Трансформация (transform)\n\nТрансформирует координаты узлов в указанную проекцию. Матрица значений остаётся прежней, однако геометрия становится криволинейной.\n\n![](images/raster_transform.svg){width=\"100%\"}\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: callout-note\n## Деформация (warp)\n\nСоздает новую регулярную геометрию растра в указанной проекции. Матрица значений пересчитывается, поскольку местоположение узлов изменяется.\n\n![](images/raster_warp.svg){width=\"100%\"}\n:::\n:::\n:::\n\n## Трансформация\n\n**Трансформация** приводит к созданию *криволинейного* растра.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  from to     refsys                         values x/y\nx    1 72 +proj=eck4 [72x36] -16679857,...,16679857 [x]\ny    1 36 +proj=eck4   [72x36] -8446752,...,8446752 [y]\ncurvilinear grid\n```\n\n\n:::\n:::\n\n\n## Деформация\n\n**Деформация** обычно осуществляется на *регулярный* растр.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  from to    offset   delta     refsys x/y\nx    1 77 -16892421  438764 +proj=eck4 [x]\ny    1 39   8460601 -433877 +proj=eck4 [y]\n```\n\n\n:::\n:::\n\n\n## Передискретизация\n\n**Передискретизация** --- изменение пространственного положения узлов растра. Требует пересчета матрицы его значений.\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/resampling.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"50%\"}\n**Примеры использования**\n\n::: callout-tip\n## Изменение разрешения\n\nПереход к более низкому *разрешению* позволяет уменьшить объем и детализацию данных.\n:::\n\n::: callout-tip\n## Изменение проекции\n\nПри деформации узлы новой сетки проецируются в исходную проекцию и определяются их значения.\n:::\n:::\n:::\n\n## Передискретизация\n\n**Метод ближайшего соседа** --- функция покрытия, при которой берётся значение ближайшего узла растра.\n\n::: columns\n::: {.column width=\"65%\"}\n![](images/resampling_nn.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"35%\"}\n::: callout-tip\n## Применение\n\nМетод ближайшего соседа используется для категориальных растров, которые хранят данные в номинальных и порядковых шкалах. Например, генезис четвертичных отложений.\n:::\n:::\n:::\n\n## Передискретизация\n\n**Билинейный метод** --- функция покрытия, при которой значение получается билинейной интерполяцией внутри исходной ячейки.\n\n::: columns\n::: {.column width=\"60%\"}\n![](images/resampling_bilinear.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"40%\"}\n$$f(x, y) = r_{00} + r_{01}x + r_{10}y + r_{11}xy$$\n\n$$\\begin{cases}\nr_{00} = f_{00},\\\\\nr_{01} = f_{01} - f_{00},\\\\\nr_{10} = f_{10} - f_{00},\\\\\nr_{11} = f_{00} + f_{11} - f_{01} - f_{10}.\n\\end{cases}$$\n\nКоординаты $x$ и $y$ меняются в диапазоне от $0$ до $1$ в пределах ячейки.\n:::\n:::\n\n## Растровая алгебра\n\n::: columns\n::: {.column width=\"50%\"}\n**Локальные операции** производят вычисления в каждом узле по отдельности.\n\n::: callout-tip\n## Примеры\n\n-   На основе растров температур и осадков вычислить индекс засушливости.\n\n-   Классифицировать растр углов наклона.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/local.svg){width=\"100%\"}\n:::\n:::\n\n## Растровая алгебра\n\nПример **локальной операции** --- вычисление мощности оледенения.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\nПример **локальной операции** --- вычисление мощности оледенения.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\nПример **локальной операции** --- вычисление мощности оледенения.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\n::: columns\n::: {.column width=\"50%\"}\n**Фокальные операции** производят вычисления на основе значений из окрестности каждого узла.\n\n::: callout-tip\n## Примеры\n\n-   Выполнить фильтрацию (сглаживание) цифровой модели рельефа.\n\n-   Обнаружить границы (резкие перепады яркости) на космическом снимке.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/focal.svg){width=\"100%\"}\n:::\n:::\n\n## Растровая алгебра\n\nРазмеры и форма окрестностей могут различаться.\n\n![](images/neighborhoods.svg){width=\"100%\"}\n\n## Свёртка\n\n**Свёртка** — фокальный оператор, при котором берется сумма произведений значения растра и плавающего окна.\n\n::: columns\n::: {.column width=\"50%\"}\nДля пикселя с индексами $(3,2)$ и окна $3\\times3$ будет равно:\n\n$$\nr'_{32} = w_{00} \\cdot r_{21} + w_{01} \\cdot r_{22} + w_{02} \\cdot r_{23} \\\\ + \nw_{10} \\cdot r_{31} + w_{11} \\cdot r_{32} + w_{12} \\cdot r_{33} \\\\ +\nw_{20} \\cdot r_{41} + w_{21} \\cdot r_{42} + w_{22} \\cdot r_{43}\n$$\n\nДля произвольного $(i,j)$:\n\n$$\nr'_{ij} = \\sum_{k=0}^2 \\sum_{m=0}^2 w_{km}\\cdot r_{i+k-1,j+m-1} \n$$\n:::\n\n::: {.column width=\"50%\"}\n![](images/convolution.svg){width=\"100%\"}\n:::\n:::\n\n## Растровая алгебра\n\nПример **фокальной операции** --- сглаживание растра методом среднего значения. Получается свёрткой с матрицей $n \\times n$, где каждый элемент равен $w_{km} = 1/n^2$:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\n::: columns\n::: {.column width=\"50%\"}\nСуществуют фокальные операции с *нефиксированной (растущей)* окрестностью.\n\n::: callout-tip\n## Евклидово распределение\n\n**Евклидово распределение** (Euclidean allocation) относит каждый пиксел растра к ближайшему по расстоянию объекту. Полученный объект является растровой диаграммой Вороного.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/voronoy.gif){width=\"100%\"}\n:::\n:::\n\n## Растровая алгебра\n\n**Евклидово расстояние** (Euclidean distance) создает растр, в узлах которого хранится расстояние до ближайшего объекта.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\n::: columns\n::: {.column width=\"50%\"}\n**Зональные операции** производят агрегирование данных одного растра в пределах зон, определяемых другим растром или векторным набором данных.\n\n::: callout-tip\n## Примеры\n\n-   Определить наиболее распространенный тип почв в пределах каждого ландшафта.\n\n-   Вычислить средний угол наклона для каждого водосборного бассейна.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/zonal.svg){width=\"100%\"}\n:::\n:::\n\n## Растровая алгебра\n\nПример **зональной операции** --- построение климатограммы.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Типы земельного покрова](05_Raster_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='left' width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\nПример **зональной операции** --- построение климатограммы.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Среднемесячная температура](05_Raster_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='left' width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\nПример **зональной операции** --- построение климатограммы.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n   cover                      month   tavg\n   <chr>                      <ord>  <dbl>\n 1 Broadleaf Evergreen Forest Jan   22.5  \n 2 Broadleaf Evergreen Forest Feb   23.1  \n 3 Broadleaf Evergreen Forest Mar   24.0  \n 4 Broadleaf Evergreen Forest Apr   24.7  \n 5 Broadleaf Evergreen Forest May   24.9  \n 6 Broadleaf Evergreen Forest Jun   24.7  \n 7 Broadleaf Evergreen Forest Jul   24.5  \n 8 Broadleaf Evergreen Forest Aug   24.6  \n 9 Broadleaf Evergreen Forest Sep   24.6  \n10 Broadleaf Evergreen Forest Oct   24.3  \n11 Broadleaf Evergreen Forest Nov   23.5  \n12 Broadleaf Evergreen Forest Dec   22.7  \n13 Broadleaf Deciduous Forest Jan   -7.22 \n14 Broadleaf Deciduous Forest Feb   -5.11 \n15 Broadleaf Deciduous Forest Mar    0.246\n16 Broadleaf Deciduous Forest Apr    7.19 \n17 Broadleaf Deciduous Forest May   13.1  \n18 Broadleaf Deciduous Forest Jun   17.6  \n19 Broadleaf Deciduous Forest Jul   19.6  \n20 Broadleaf Deciduous Forest Aug   18.4  \n```\n\n\n:::\n:::\n\n\n## Растровая алгебра\n\nПример **зональной операции** --- построение климатограммы.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Растровая алгебра\n\n::: columns\n::: {.column width=\"50%\"}\n**Глобальные операции** производят вычисления над всеми узлами растра сразу.\n\n::: callout-tip\n## Примеры\n\n-   Вычислить среднее значение по растру плотности населения.\n\n-   Определить наиболее распространенный тип растительности для всей территории.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/global.svg){width=\"100%\"}\n:::\n:::\n\n## Растровая алгебра\n\n::: columns\n::: {.column width=\"60%\"}\n**Растровый оверлей** --- частный случай локальной операции, при котором вычисляется линейная комбинация (сумма, среднее и т.д.) значений из нескольких растров.\n\n$$\nR = w_1 r_1 + w_2 r_2 + ...w_n r_n = \\sum_{i=1}^n w_i r_i\n$$\n\n::: callout-note\n## Взвешенный оверлей\n\nРастровый оверлей называют *взвешенным*, если коэффициенты в линейной комбинации представляют собой веса значений\n:::\n:::\n\n::: {.column width=\"40%\"}\n![](images/raster_overlay.svg){width=\"100%\"}\n:::\n:::\n\n## Взвешенный оверлей\n\nПример **взвешенного оверлея** --- выбор территорий, обладающей оптимальной совокупностью признаков:\n\n![](images/image-46018781.png)\n\n## Извлечение данных\n\nДанные из растра можно **извлекать** по указанным векторным объектам с помощью *функции покрытия*. Например, в точке:\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Мощность покровного оледенения в точке](05_Raster_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='left' width=960}\n:::\n:::\n\n\n## Извлечение данных\n\nАналогично выполняется построение профиля, но данные извлекаются из всех ячеек, находящихся на линии профиля.\n\n![](images/mapedit_profile.png)\n\n## Извлечение данных\n\nАналогично выполняется построение профиля, но данные извлекаются из всех ячеек, находящихся на линии профиля.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_Raster_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Словарик\n\n::: columns\n::: {.column width=\"50%\" style=\"color: blue; text-align: end;\"}\nГеометрия растра\n\nИзмерение растра\n\nПередискретизация\n\nБлижайший сосед\n\nБилинейная интерполяция\n\nЛокальный анализ\n\nФокальный анализ\n\nЗональный анализ\n\nГлобальный анализ\n\nОкрестность\n\nСвертка\n:::\n\n::: {.column width=\"50%\" style=\"color: red\"}\nRaster geometry\n\nRaster dimension\n\nResampling\n\nNearest neighbor\n\nBilinear interpolation\n\nLocal analysis\n\nFocal analysis\n\nZonal analysis\n\nGlobal analysis\n\nNeighborhood\n\nConvolution\n:::\n:::\n\n## Библиография\n",
    "supporting": [
      "05_Raster_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}