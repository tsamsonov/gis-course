{
  "hash": "77c03cfef21c749d2b0ab2cd2fe23962",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Модели пространственных данных\"\nsubtitle: \"Основы геоинформатики. Лекция 2\"\ndate: 02/07/2025\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    margin: 0.2\n    slide-number: true\n    footer: \"Самсонов Т. Е. Основы геоинформатики: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n\n## Три уровня моделирования\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.white-text, \n.white-text h2 {\n color: white;\n text-shadow: 2px 2px 2px black;\n}\n</style>\n:::\n\n\n\n::::: columns\n::: {.column width=\"10%\"}\n![](images/123.png){width=\"65%\"}\n:::\n\n::: {.column width=\"90%\"}\n\nКонцептуальная модель [@gost:43.0.3-2009]\n\n:   Абстрактная модель, определяющая структуру исследуемого объекта (составные части и связи), свойства составных частей, причинно-следственные связи\n\nМодель пространственных данных [@lurie:2016]\n\n:   Набор логических правил формализованного цифрового описания объектов реальности как пространственных объектов.\n\nМодели пространственных объектов\n\n:   Геометрические примитивы, используемые для координатного описания пространственных объектов или их частей.\n:::\n:::::\n\n## Концептуальные модели {.white-text background-image=\"images/image-1401221242.png\"}\n\nВ реальном мире существует бесконечное разнообразие явлений.\n\n## Концептуальные модели {.white-text background-image=\"images/image-633758101.png\"}\n\n**Объектно-ориентированная модель** используется когда явление интерпретируется как состоящее из дискретных объектов с четкими границами. *Характеристики объектов в пределах их границ предполагаются постоянными*.\\\n\\\n\\\n\\\n\\\n\\\n\\\n\n::: callout-tip\n## Пример\n\nЗдания имеют четкие границы и моделируются как отдельные объекты\n:::\n\n## Концептуальные модели {.white-text background-image=\"images/image-1627346778.png\"}\n\n**Сетевая модель** используется для интерпретации явлений, состоящих из множества связанных между собой объектов. *Сетевая модель является производной от объектно-ориентированной*.\n\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\n::: callout-tip\n## Пример\n\nАвтомобильные дороги образуют сетевую структуру\n:::\n\n## Концептуальные модели {.white-text background-image=\"images/image-1639184355.png\"}\n\n**Модель географических полей** используется для интерпретации явлений, *сплошным* образом покрывающих пространство. Как правило, моделируемая характеристика явления меняется *непрерывно*, но это не является обязательным условием.\n\n\\\n\\\n\\\n\\\n\\\n\\\n\n::: callout-tip\n## Пример\n\nЗемная поверхность имеет сплошной характер, ее высота меняется \\[не\\]прерывно\n:::\n\n## Концептуальные модели\n\nОсобенности концептуальных моделей географических явлений:\n\n1.  Всегда являются *упрощением* реальности.\n\n2.  Обобщают модели *картографической локализации* (по пунктам, на линиях, по площадям, рассеянной, сплошной).\n\n3.  Выбираются в соответствии с масштабом и целью исследования, а также способом *интерпретации* явления.\n\n    ::: callout-tip\n    ## Пример\n\n    Рельеф может рассматриватиься как совокупность форм (объектно-ориентированная модель) и как поверхность (модель географического поля).\n    :::\n\n4.  Определяют выбор *модели пространственных данных*.\n\n## Модели пространственных данных\n\nМодель пространственных данных задаётся отображением множества объектов на множество значений их атрибутов.\n\n::::::: columns\n:::: {.column width=\"50%\"}\n**Простой** **объект** имеет одно значение каждого атрибута.\n\n::: callout-note\n## Вектор (vector)\n\nКаждый *объект* имеет кортеж значений атрибутов. Объект называется **векторным,** т.к. любая точка на границе описывается *векторным уравнением*.\n\n![](images/simple_feature.svg){width=\"100%\"}\n:::\n::::\n\n:::: {.column width=\"50%\"}\n**Сложный** **объект** имеет множест-во значений каждого атрибута.\n\n::: callout-note\n## Покрытие (coverage)\n\nВ каждой *точке*, принадлежащей объекту, существует кортеж значений атрибутов. Его можно запросить с помощью функции, которая называется **покрытием**.\n\n![](images/complex_feature.svg){width=\"100%\"}\n:::\n::::\n:::::::\n\n## Векторное уравнение\n\n**Векторное уравнение** позволяет получать координаты промежуточных точек на основе конечного числа опорных точек.\n\n::::: columns\n::: {.column width=\"50%\"}\nПусть $\\mathbf{p_0}$ — начальная точка отрезка, а $\\mathbf{p_1}$ — конечная точка.\n\nТогда произвольная точка $\\mathbf{p}$ на отрезке определяется значением параметра $0 \\leq t \\leq 1$ в *векторном уравнении*:\n\n$$\n\\mathbf{p} = (1-t)\\mathbf{p_0} + t\\mathbf{p_1}\n$$\n:::\n\n::: {.column width=\"50%\"}\n![](images/vector_eq.svg){width=\"100%\"}\n:::\n:::::\n\n## Векторная модель\n\n**Simple Features** --- стандарт @OGC2010, который определяет общую модель хранения и доступа к простым (векторным) объектам.\n\n-   все геометрии состоят из точек;\n-   все точки в геометрии имеют одинаковую размерность;\n-   размерность точек может быть 2, 3 или 4.\n\nВ дополнение к обязательным измерениям $X$ и $Y$ *возможны*:\n\n-   $Z$, обозначающее высоту\n-   $M$, обозначающее некоторую меру --- например, время\n\nСуществует 4 варианта координат: $XY$, $XYZ$, $XYM$ и $XYZM$.\n\nВ географических координатах $X$ --- долгота, $Y$ --- широта.\n\n## Векторная модель\n\nСтандарт включает в себя **17 моделей пространственных объектов**.\n\n:::::: columns\n::: {.column width=\"50%\"}\nОсновными являются 7 моделей:\n\n-   **Линейно связные**: `POINT`, `LINESTRING`, `POLYGON`\n-   **Линейно несвязные**: `MULTIPOINT`, `MULTILINESTRING`, `MULTIPOLYGON`, `GEOMETRYCOLLECTION`\n:::\n\n:::: {.column width=\"50%\"}\n::: callout-note\n## Линейная связность\n\nЛинейно связным называется пространство, в котором любые две точки можно соединить непрерывной кривой.\n\n![](images/connect.svg){width=\"60%\"}\n:::\n::::\n::::::\n\nОставшиеся виды моделей включают: `CIRCULARSTRING`, `COMPOUNDCURVE`, `CURVEPOLYGON`, `MULTICURVE`, `MULTISURFACE`, `CURVE`, `SURFACE`, `POLYHEDRALSURFACE`, `TIN`, `TRIANGLE`.\n\n## Векторная модель\n\n![](images/simple_features.svg){width=\"100%\"}\n\n## Векторная модель\n\n**Линейно связные** модели пространственных объектов.\n\n| Тип | Описание |\n|------------------------------------|------------------------------------|\n| `POINT` | нуль-мерная геометрия, содержащая одну точку |\n| `LINESTRING` | последовательность точек, соединенных прямыми, несамопересекающимися отрезками; одномерная геометрия |\n| `POLYGON` | геометрия с положительной площадью (двумерная); последовательность точек, отрезки между которыми формируют замкнутое кольцо без самопересечений; первое кольцо является внешним, ноль и более остальных колец представляют дырки внутри полигона |\n\n## Векторная модель\n\n**Линейно несвязные** модели пространственных объектов.\n\n| Тип | Описание |\n|------------------------------------|------------------------------------|\n| `MULTIPOINT` | множество точек; геометрия типа `MULTIPOINT` называется *простой* если ни одна пара точек в `MULTIPOINT` не совпадает |\n| `MULTILINESTRING` | множество линий |\n| `MULTIPOLYGON` | множество полигонов |\n| `GEOMETRYCOLLECTION` | множество геометрий произвольного типа за исключением `GEOMETRYCOLLECTION` |\n\n## Хранение координат\n\n\n\n::: {.cell}\n\n:::\n\n\n\n**Well-Known Text (WKT)** --- текстовый формат\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPOINT (0.5 0.5)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLINESTRING (0 1, 0.5 1.5, 1.2 1.2, 2 1.3, 3 2)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPOLYGON ((0.5 0.5, 2 0, 3 2, 1.5 4, 0 3, 0.5 0.5), (1 1, 0.8 2, 2 2.2, 1.4 1.1, 1 1))\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMULTIPOINT ((0.5 0.5), (1 3), (2 1), (0.2 2), (2 3), (1.5 1.5))\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMULTILINESTRING ((0.5 1.5, 1.2 1.2, 2 1.3), (0 1.5, 0.5 2, 1.2 1.7), (2 1.8, 3 2.5))\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n## Назначение\n\nФормат **WKT** используется в текстовых форматах файлов, а также для визуального анализа координат объектов. Он занимает много места в памяти компьютера и медленно читается/записывается программами.\n:::\n\n## Хранение координат\n\n**Well-Known Binary (WKB)** --- бинарный формат\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPOINT: 01 01 00 00 00 00 00 00 00 00 00 e0 3f 00 00 00 00 00 00 e0 3f\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLINESTRING: 01 02 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 e0 3f 00 00 00 00 00 00 f8 3f 33 33 33 33 33 33 f3 3f 33 33 33 33 33 33 f3 3f 00 00 00 00 00 00 00 40 cd cc cc cc cc cc f4 3f 00 00 00 00 00 00 08 40 00 00 00 00 00 00 00 40\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n## Назначение\n\nФормат **WKB** используется в бинарных форматах файлов, в том числе а базах данных. Он занимает мало места в памяти компьютера и быстро читается/записывается программами, но не подходит для визуального анализа.\n:::\n\n## Особенности векторной модели\n\n1.  Используется для реализации объектно-ориентированной концептуальной модели.\n2.  Основана на генерализации. Физическое или абстрактное тело представляется в виде конечного множества координат.\n3.  В зависимости от уровня детализации один и тот же объект может представляться с помощью разной модели.\n4.  Значения атрибутов в пределах границ каждого объекта предполагаются постоянными.\n\n::: callout-warning\n## Ограничение\n\nВекторная модель не годится для представления *географических полей*.\n:::\n\n## Покрытие\n\nПокрытие [@ogc-07-011:2005]\n\n:   Пространственный объект, который действует как **функция**, возвращающая значения\n\n    -   в пределах своей *области значений* (атрибутивного домена);\n\n    -   в пределах своей *области определения* (пространственного, временного или пространственно-временного домена);\n\n    для любой точки в системе координат покрытия.\n\n![](images/complex_feature.svg){fig-align=\"center\" width=\"100%\"}\n\n## Модель покрытий\n\n::::::::: columns\n::::::: {.column width=\"60%\"}\nМодель покрытий предполагает, что можно представить поле изменения атрибутов внутри объектов.\n\n:::::: callout-important\n## Однако есть проблема\n\n::::: columns\n::: {.column width=\"20%\"}\n![](images/rick_thinking.png)\n:::\n\n::: {.column width=\"80%\"}\nГеографические поля определены на бесконечном множестве точек, в то время как любые модели данных состоят из конечного числа элементов. Как обойти это ограничение?\n:::\n:::::\n::::::\n:::::::\n\n::: {.column width=\"40%\"}\n![](images/transform_cov.svg){width=\"45%\"}\n:::\n:::::::::\n\n::: callout-tip\n## Решение\n\nНеобходимо внутри объекта создать сетку опорных геометрий и определить функцию, которая сможет интерполировать значения между ними.\n:::\n\n## Топологическое покрытие\n\nПостроение покрытия начинается с простого объекта, обозначающего границу покрытия.\n\n![](images/cov_details_1.svg){width=\"100%\"}\n\n## Топологическое покрытие\n\nВ **топологическом покрытии** объект разрезается узлами и дугами на области фиксированных значений поля.\n\n![](images/cov_details_3.svg){width=\"100%\"}\n\n## Топологическое покрытие\n\n**Функция покрытия** в каждой точке возвращает значение полигона, который её *покрывает*. Покрытие является сплошным.\n\n![](images/cov_details_4.svg){width=\"100%\"}\n\n## Топологическое покрытие\n\n:::::: columns\n::: {.column width=\"65%\"}\nЭлементы топологической модели имеют свои названия.\n\n![](images/cov_details_5.svg){width=\"100%\"}\n:::\n\n:::: {.column width=\"35%\"}\n::: callout-caution\n## Ограничение\n\nТопологическая модель подходит только для представления полей с пространственной структурой в виде областей фиксированных значений.\n:::\n::::\n::::::\n\n## Триангуляционное покрытие\n\nПостроение покрытия начинается с простого объекта.\n\n![](images/tin_details_1.svg){width=\"100%\"}\n\n## Триангуляционное покрытие\n\nВ объект добавляются известные значения геополя в точках.\n\n![](images/tin_details_2.svg){width=\"100%\"}\n\n## Триангуляционное покрытие\n\nТочки данных соединяются *сплошной* сеткой треугольников --- **триангуляцией**.\n\n![](images/tin_details_3.svg){width=\"100%\"}\n\n## Триангуляционное покрытие\n\n**Функция покрытия** реализуется путем *интерполяции* (линейной, естественной и т.д.) поля внутри треугольников.\n\n![](images/tin_details_4.svg){width=\"100%\"}\n\n## Триангуляционное покрытие\n\n::::: columns\n::: {.column width=\"60%\"}\nДля каждого треугольника находят уравнение плоскости:\n\n$$Ax + By + Cz + D = 0$$\n\n$$f(x, y) = -\\frac{1}{C}(Ax+By+D)$$\n\nИскомые коэффициенты $A, B, C, D$ находят решением уравнения: $$\\begin{vmatrix}\nx - x_1 & y - y_1 & z - z_1 \\\\ \nx_2 - x_1 & y_2 - y_1 & z_2 - z_1 \\\\ \nx_3 - x_1 & y_3 - y_1 & z_3 - z_1\n\\end{vmatrix} = 0$$\n:::\n\n::: {.column width=\"40%\"}\n![](images/tin_interp.svg){width=\"100%\"}\n:::\n:::::\n\n## Триангуляционное покрытие\n\nУ каждого узла есть ячейка (область влияния). Совокупность таких ячеек называется **диаграммой Вороного**.\n\n![](images/tin_details_5.svg){width=\"100%\"}\n\n## Триангуляционное покрытие\n\nДиаграмма Вороного дает альтернативную функцию покрытия, в которой поле считается *постоянным* в пределах ячеек.\n\n![](images/tin_details_6.svg){width=\"100%\"}\n\n## Диаграмма Вороного\n\n::::: columns\n::: {.column width=\"50%\"}\n![](images/voronoy.gif)\n:::\n\n::: {.column width=\"50%\"}\n\nДиаграмма Вороного\n\n:   Диаграмма Вороного конечного множества точек $S$ на плоскости представляет такое разбиение плоскости, при котором каждая область этого разбиения образует множество точек, более близких к одному из элементов множества $S$, чем к любому другому элементу множества.\n:::\n:::::\n\n## Триангуляционное покрытие\n\nЭлементы триангуляционной модели имеют свои названия.\n\n![](images/tin_details_7.svg){width=\"100%\"}\n\n## Растровое покрытие\n\nВ растровом покрытии множество узлов с данными поля упорядочивается в виде матрицы --- **растра**.\n\n![](images/raster_details_1.svg){width=\"100%\"}\n\n## Растровое покрытие\n\nСетка граней на узлах с данными обеспечивает сплошное покрытие объекта.\n\n![](images/raster_details_2.svg){width=\"100%\"}\n\n## Растровое покрытие\n\nФункция покрытия реализуется путем *интерполяции* (билинейной, кубической и т.д.) внутри граней.\n\n![](images/raster_details_3.svg){width=\"100%\"}\n\n## Растровое покрытие\n\n**Билинейный метод** --- функция покрытия, при которой значение получается билинейной интерполяцией внутри грани.\n\n::::: columns\n::: {.column width=\"60%\"}\n![](images/coverage_bilinear.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"40%\"}\n$$f(x, y) = r_{00} + r_{01}x + r_{10}y + r_{11}xy$$\n\n$$\\begin{cases}\nr_{00} = f_{00},\\\\\nr_{01} = f_{01} - f_{00},\\\\\nr_{10} = f_{10} - f_{00},\\\\\nr_{11} = f_{00} + f_{11} - f_{01} - f_{10}.\n\\end{cases}$$\n\nКоординаты $x$ и $y$ меняются в диапазоне от $0$ до $1$ в пределах ячейки.\n:::\n:::::\n\n## Растровое покрытие\n\nУ каждого узла растра есть ассоциированная с ним зона влияния --- **ячейка (пиксель)**.\n\n![](images/raster_details_4.svg){width=\"100%\"}\n\n## Растровое покрытие\n\nПиксельное представление даёт альтернативную функцию покрытия, в которой поле считается *постоянным* в ячейке.\n\n![](images/raster_details_5.svg){width=\"100%\"}\n\n## Растровое покрытие\n\n**Метод ближайшего соседа** --- функция покрытия, при которой берётся значение ближайшего узла растра.\n\n:::::: columns\n::: {.column width=\"65%\"}\n![](images/coverage_nn.svg){width=\"100%\"}\n:::\n\n:::: {.column width=\"35%\"}\n::: callout-tip\n## Применение\n\nМетод ближайшего соседа используется для категориальных растров, которые хранят данные в номинальных и порядковых шкалах. Например, генезис четвертичных отложений.\n:::\n::::\n::::::\n\n## Растровое покрытие\n\nЭлементы растровой модели имеют свои названия.\n\n![](images/raster_details_6.svg){width=\"100%\"}\n\n## Геометрия растра\n\n**Геометрия растра** определяет, где именно располагаются в пространстве узлы и может быть описана параметрами:\n\n| Параметр    | Назначение                              |\n|-------------|-----------------------------------------|\n| `NCOLS`     | Количество столбцов                     |\n| `NROWS`     | Количество строк                        |\n| `XLLCENTER` | Координата $X$ левого нижнего узла      |\n| `YLLCENTER` | Координата $Y$ левого нижнего узла      |\n| `CELLSIZE`  | Размер ячейки (расстояние между узлами) |\n\n::: callout-important\n## Обратите внимание\n\nРастр может иметь разное расстояние между узлами по осям $X$ и $Y$. В этом случае вместо `CELLSIZE` указывается два параметра: `CELLSIZEX` и `CELLSIZEY` .\n:::\n\n## Сравнение моделей покрытий\n\n:::::: columns\n::: {.column width=\"65%\"}\n![](images/raster_tin.svg){width=\"100%\"}\n:::\n\n:::: {.column width=\"35%\"}\nМодели покрытий имеют схожие элементы с одинаковыми названиями.\n\nЯчейки имеют альтернативные имена (области и пиксели)\n\n::: callout-note\n## TIN\n\nТриангуляцию сокращенно называют TIN (Triangular Irregular Network)\n:::\n::::\n::::::\n\n## Преимущества моделей\n\n::::: columns\n::: {.column width=\"50%\"}\n**Растр**\n\n1.  Регулярная матричная структура, позволяющая унифицировать операторы обработки данных.\n2.  Компактное хранение (достаточно указать местоположение угла растра).\n3.  Соответствие устройству матрицы сканерных снимков.\n:::\n\n::: {.column width=\"50%\"}\n**TIN**\n\n1.  Иррегулярная структура, позволяющая уплотнять данные в областях высокой изменчивости поля.\n2.  Более точное взаимодействие с векторными данными, в т.ч. совместный анализ.\n3.  Соответствие устройству трёхмерных моделей.\n:::\n:::::\n\n## Словарик\n\n::::: columns\n::: {.column width=\"50%\" style=\"color: blue; text-align: end;\"}\nВекторные данные\n\nРастровые данные\n\nПокрытие\n\nУзел\n\nРебро\n\nГрань\n\nЯчейка\n\nПиксель\n\nТриангуляция\n\nБлижайший сосед\n\nБилинейная интерполяция\n:::\n\n::: {.column width=\"50%\" style=\"color: red\"}\nVector data\n\nRaster data\n\nCoverage\n\nNode\n\nEdge\n\nFace\n\nCell\n\nPixel\n\nTriangulation\n\nNearest neighbour\n\nBilinear interpolation\n:::\n:::::\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}