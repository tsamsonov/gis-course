{
  "hash": "990695b8aead4864eac2bd8458b2d7fc",
  "result": {
    "markdown": "---\ntitle: \"PostGIS. Создание и загрузка данных\"\nsubtitle: \"Геоинформатика I. Базы пространственных данных\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Базовые библиотеки\n\nФункциональность **PostGIS** опирается на 4 библиотеки:\n\n::: columns\n::: {.column width=\"50%\"}\n::: columns\n::: {.column width=\"30%\"}\n![](images/gdalicon.png){width=\"100%\"}\n:::\n\n::: {.column width=\"70%\"}\n**GDAL** выполняет конвертацию между форматами данных и растровые операции\n:::\n:::\n\n**PROJ** выполняет преобразования систем координат\n\n![](images/projicon.png){width=\"70%\"}\n:::\n\n::: {.column width=\"50%\"}\n**GEOS** выполняет геометрические операции в *2D*\n\n![](images/geosicon.png)\n\n**\\[SF\\]CGAL** выполняет геометрические операции в *3D*\n\n![](images/CGAL.png){width=\"70%\"}\n:::\n:::\n\n## Структура базы данных\n\n![](images/pg_database.svg){width=\"100%\"}\n\n## Структура схемы\n\n![](images/pg_schema1.svg){width=\"100%\"}\n\n## Структура схемы (продолжение)\n\n![](images/pg_schema2.svg){width=\"100%\"}\n\n## Создание пустой БД\n\n**Создание БД** (запрос к любой существующей БД)\n\n``` sql\nCREATE DATABASE satino;\n```\n\n**Создание схемы и активация расширения**\n\n``` sql\nCREATE SCHEMA postgis;\nGRANT USAGE ON schema postgis to public; -- доступ для всех\nCREATE EXTENSION postgis SCHEMA postgis; -- включить postgis для схемы\nCREATE EXTENSION postgis_raster SCHEMA postgis; -- включить растры для схемы\nALTER DATABASE satino SET search_path=public,postgis; -- добавить в путь поиска\n```\n\n**Проверка установки**\n\n``` sql\nSELECT postgis_full_version();\n```\n\n::: callout-important\n## Внимание\n\nУстановка расширения `postgis` через графический интерфейс не позволяет выбрать схему и выполняется в схеме `public`.\n:::\n\n## Типы пространственных данных\n\nВ PostGIS существует 4 типа пространственных данных\n\n|     | Тип         | Особенности                                     |\n|-----|-------------|-------------------------------------------------|\n| 1   | `geometry`  | Векторные данные в декартовой системе координат |\n| 2   | `geography` | Векторные данные в угловой системе координат    |\n| 3   | `raster`    | Растровые данные (многомерные)                  |\n| 4   | `topology`  | Топологические данные (вершины и грани).        |\n\n::: callout-note\n## Топологические данные\n\nТип данных `topology` используется для хранения топологических покрытий и сетевых данных. Для анализа последних применяется отдельное расширение **pgRouting**.\n:::\n\n::: callout-tip\n## Интересный факт\n\nPostGIS позволяет хранить несколько пространственных столбцов в одной таблице\n:::\n\n## Каталог систем координат\n\n::: columns\n::: {.column width=\"30%\"}\nСистемы координат хранятся в таблице `spatial_ref_sys`\n\n::: callout-note\n#### SRS vs CRS\n\nНесмотря на то, что каталог имеет называется *SRS (Spatial Reference Systems)*, по факту он хранит описание *CRS (Coordinate Reference Systems)*.\n:::\n\n::: callout-important\n#### Терминология WKT\n\nТерминология WKT при описании CRS может не полностью соответствовать стандартами ISO / OGC\n:::\n:::\n\n::: {.column width=\"70%\"}\n![](images/srs_postgis.png)\n:::\n:::\n\n## Создание пространственных таблиц\n\nПри создании пространственных таблиц необходимо указать\n\n-   уникальный идентификатор\n\n-   геометрический столбец заданного типа и КСО\n\nНапример, таблица точек гидрологических промеров может иметь следующий состав:\n\n``` sql\nCREATE TABLE postgis.hydro_measures (\n\tfid serial primary key,\n\tdepth real,\n\tgeom geography(point, 4326)\n)\n```\n\n## Ручное создание данных\n\nВставка новых строк выполняется посредством стандартной команды INSERT:\n\n``` sql\nINSERT INTO postgis.hydro_measures(fid, depth, geom)\nVALUES\n\t(1, 1.23, ST_GeomFromText('POINT (36.37802128 55.21121827)')),\n\t(2, 1.57, ST_GeomFromText('POINT (36.37834198 55.21127511)')),\n\t(3, 0.78, ST_GeomFromText('POINT (36.37861509 55.21139158)')),\n\t(4, 0.95, ST_GeomFromText('POINT (36.37905934 55.21137259)')),\n\t(5, 1.11, ST_GeomFromText('POINT (36.37938529 55.21125473)'));\n```\n\nАльтернативный синтаксис через преобразование строки к типу данных:\n\n``` sql\nINSERT INTO postgis.hydro_measures(fid, depth, geom)\nVALUES\n\t(1, 1.23, 'POINT (36.37802128 55.21121827)'::geography),\n\t(2, 1.57, 'POINT (36.37834198 55.21127511)'::geography),\n\t(3, 0.78, 'POINT (36.37861509 55.21139158)'::geography),\n\t(4, 0.95, 'POINT (36.37905934 55.21137259)'::geography),\n\t(5, 1.11, 'POINT (36.37938529 55.21125473)'::geography);\n```\n\n## Импорт из CSV\n\nДля импорта можно использовать команду `COPY` :\n\n``` sql\nCREATE TABLE IF NOT EXISTS postgis.geo_points (\n\tfid serial primary key,\n\tname text,\n\tcomment text,\n\theight_abs real,\n\theight_add real,\n\ttype text,\n\tx real, \n\ty real\n);\n\nDELETE FROM postgis.geo_points; -- опционально, если хотите очистить\n\nCOPY postgis.geo_points \n\tFROM '/Volumes/Data/Spatial/Satino/geo_points.csv' \n\tDELIMITER as ',' \n\tCSV HEADER;\n```\n\n## Непространственная таблица\n\nПолученная таблица не является пространственной:\n\n![](images/copy_csv.png)\n\n## Активация пространственных точек\n\n::: columns\n::: {.column width=\"50%\"}\nЕсли данные точечные и содержат координаты в столбцах, то можно на их основе создать геометрию\n\n``` sql\nALTER TABLE postgis.geo_points \n  ADD geom geometry(point, 32637);\nUPDATE postgis.geo_points\n  SET geom = ST_Point(x, y)\n```\n\n![](images/geom_fromxy.png)\n:::\n\n::: {.column width=\"50%\"}\nДля преобразования используем одну из функций PostGIS (без или с указанием *SRID*).\n\n![](images/st_point.png)\n:::\n:::\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}