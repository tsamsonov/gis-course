{
  "hash": "08eca2a68e9603f55dc704c36131979f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Пространственная привязка и создание объектов\"\nsubtitle: \"Основы геоинформатики. Лекция 2\"\ndate: 02/16/2024\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    slide-number: true\n    footer: \"Самсонов Т. Е. Основы геоинформатики: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Пространственная привязка\n\n**Пространственная привязка [@gost:70316-2022]**\n\n:   Описание позиции в реальном мире.\n\nПространственная привязка может быть осуществлена двумя основными способами:\n\n-   с использованием координат;\n-   посредством географических идентификаторов.\n\n::: callout-important\n## Координатная система отсчета\n\nПри использовании привязки по координатам необходимо описание координатно системы отсчета.\n:::\n\n## Координатная система отсчета (КСО)\n\nПри описании координатной системы отсчета последовательно указываются:\n\n1.  **Эллипсоид вращения** --- тело, по отношению к которому вычисляются геодезические координаты точек (широта, долгота)\n2.  **Исходные геодезические даты (датум)** --- параметры положения эллипсоида в теле Земли\n3.  **Географическая система координат** --- включает датум, положение начального меридиана и единицы измерения широт и долгот\n4.  **Проекция** --- математический способ перехода от геодезических (географических) координат к плоским прямоугольным.\n5.  **Плоская прямоугольная система координат** --- включает проекцию, ее параметры и единицы измерения координат.\n\n## Операции с КСО\n\nПри работа с пространственными данными используется 4 основных операции на КСО:\n\n1.  **Создание** --- позволяет сопроводить данные информацией о том, в какой системе хранятся координаты объектов.\n\n2.  **Переопределение** --- используется в случае, если КСО указана неправильно. Например, данные хранятся в градусах, а в параметрах указано, что это проекция Меркатора.\n\n3.  **Чтение** --- используется программным обеспечением для того чтобы правильно позиционировать объекты относительно референцного тела (Земли).\n\n4.  **Преобразование** --- используется для получения нового набора данных в другой системе координат.\n\n## Преобразование координат\n\n::: columns\n::: {.column width=\"55%\"}\nПреобразование координат включает три различных операции:\n\n1.  **Трансформирование** --- пересчет географических координат с одного датума на другой.\n\n2.  **Проецирование** --- от географических координат к плоским прямоугольным.\n\n3.  **Обратное проецирование** --- от плоских прямоугольных координат к географическим.\n:::\n\n::: {.column width=\"45%\"}\n![](images/coord_transform.png){width=\"60%\"}\n:::\n:::\n\n## Форматы описания\n\nРаспространены 3 формата описания координатных систем отсчета:\n\n-   **PROJ.4 String** --- представление в виде строки параметров.\n\n-   **WKT (Well-Known Text)** --- представление в виде иерархического списка. Это *наиболее полный* формат описания системы координат, который рекомендуется к использованию для избежания неоднозначностей.\n\n-   **EPSG (European Petroleum Survey Group)** --- представление в виде числового кода.\n\n::: callout-tip\n## Где найти описания?\n\nДля поиска КСО в перечисленных форматах представления удобно воспользоваться порталом **spatialreference.org**.\n:::\n\n## PROJ.4 String\n\n\n::: {.cell}\n<style type=\"text/css\">\n.code-block {\n max-height: 600px;\n scrollable: false\n}\n</style>\n:::\n\n\n**PROJ.4 String** --- строковый формат представления информации о КСО, введенный в библиотеке [**PROJ**](http://proj.org), начиная с версии 4. Основные параметры:\n\n``` code-block\n+datum     Датум\n+ellps     Эллипсоид\n+lat_0     Широта стандартной параллели\n+lat_1     Широта первой стандартной параллели\n+lat_2     Широта второй стандартной параллели\n+lat_ts    Широта нулевых искажений\n+lon_0     Центральный меридиан\n+proj      Проекция\n+units     Единицы измерения координат\n+vunits    Единицы измерения высот\n+x_0       Восточное указание\n+y_0       Северное указание\n+zone      Номер зоны\n```\n\n## PROJ.4 String --- примеры\n\n-   Географические координаты в СК **WGS84** (без проекции):\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n+proj=longlat +datum=WGS84 +no_defs\n```\n\n\n:::\n:::\n\n\n-   Проекция **Web Mercator** (Google Maps, Яндекс.Карты и т.д.):\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n+proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs\n```\n\n\n:::\n:::\n\n\n-   **Коническая равнопромежуточная** проекция:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n+proj=eqdc +lat_0=0 +lon_0=0 +lat_1=60 +lat_2=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\n```\n\n\n:::\n:::\n\n\n-   Проекция **UTM, зона 37**:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n+proj=utm +zone=37 +datum=WGS84 +units=m +no_defs\n```\n\n\n:::\n:::\n\n\n## WKT (Well-Known Text)\n\n**WKT** основан на следующих принципах.\n\n-   Каждый объект представляется в виде токена, состоящего из ключевого слова, за которым следует множество атрибутов объекта.\n\n-   Некоторые объекты состоят из других объектов, поэтому результат может состоять из нескольких уровней вложенности.\n\n``` code\nKEYWORD1[\n  attribute1, \n  KEYWORD2[\n    attribute2, \n    attribute3,\n    KEYWORD3[\n      attribute4\n    ]\n  ]\n]\n```\n\n## WKT (Well-Known Text)\n\nНаиболее часто встречающиеся токены\n\n| Токен         | Назначение                                                         |\n|----------------|--------------------------------------------------------|\n| `GEOGCRS`     | Географическая координатная система отсчета                        |\n| `PROJCRS`     | Проецированная координатная система отсчета                        |\n| `BASEGEOGCRS` | Географическая КСО, на которой основана проецированная             |\n| `DATUM`       | Датум                                                              |\n| `ELLIPSOID`   | Эллипсоид                                                          |\n| `PRIMEM`      | Начальный меридиан                                                 |\n| `CS`          | Система координат (декартова, сферическая, эллипсоидальная и т.д.) |\n\n## WKT (Well-Known Text)\n\n| Токен        | Назначение                                |\n|--------------|-------------------------------------------|\n| `ANGLEUNIT`  | Единица измерения углов                   |\n| `LENGTHUNIT` | Единица измерения длин                    |\n| `CONVERSION` | Преобразование (проекция + параметры)     |\n| `METHOD`     | Проекция                                  |\n| `PARAMETER`  | Параметр                                  |\n| `USAGE`      | Область применения                        |\n| `REMARK`     | Ремарка (здесь могут быть любые символы!) |\n| `ID`         | Идентификатор                             |\n| `AXIS`       | Ось                                       |\n| `ORDER`      | Порядок оси                               |\n\n## WKT (Well-Known Text)\n\n**Пример: географическая КСО**\n\n``` code\nGEOGCRS[\"NTF (Paris)\",\n  DATUM[\"Nouvelle Triangulation Francaise\", \n    ELLIPSOID[\"Clarke 1880 (IGN)\",6378249.2,293.4660213]\n  ], \n  PRIMEM[\"Paris\",2.5969213],\n  CS[ellipsoidal,2],\n    AXIS[\"latitude\",north,ORDER[1]],\n    AXIS[\"longitude\",east,ORDER[2]],\n    ANGLEUNIT[\"grad\",0.015707963267949],\n  REMARK[\"Nouvelle Triangulation Française\"]\n]\n```\n\n::: callout-important\n## Обратите внимание\n\nДанная система отсчета использует нестандартный меридиан (*Парижский*) и угловые единицы (*грады*).\n:::\n\n## WKT (Well-Known Text)\n\n**Пример: проецированная КСО (проекция Мольвейде)**\n\n``` {.code-block style=\"font-size: 0.75em;\"}\nPROJCRS[\"World_Mollweide\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"World_Mollweide\",\n        METHOD[\"Mollweide\"],\n        PARAMETER[\"Longitude of natural origin\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0, LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0, LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,  ORDER[1], LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north, ORDER[2], LENGTHUNIT[\"metre\",1]],\n    USAGE[SCOPE[\"Not known.\"],AREA[\"World.\"], BBOX[-90,-180,90,180]],\n    ID[\"ESRI\",54009]]\n```\n\n## EPSG\n\n**EPSG (European Petroleum Survey Group)** --- европейская рабочая группа нефтегазовой области, которая ведет реестр КСО с уникальными цифровыми кодами вида `EPSG:xxxxxx`.\n\nКоды EPSG оказались удобны, поэтому используются повсеместно для быстрой инициализации проекций со стандартными параметрами.\n\nНапример, ранее рассмотренные проекции имеют коды:\n\n-   *WGS84*: `EPSG:4326`\n-   *Web Mercator*: `EPSG:3857`\n-   *UTM*: `EPSG:326..` , например для UTM 37N: `EPSG:32637`\n\n## Описание КСО в QGIS\n\n![](images/mollweide_1.png){width=\"100%\"}\n\n## Описание КСО в QGIS\n\n![](images/mollweide_2.png){width=\"100%\"}\n\n## spatialreference.org\n\nУдобный ресурс для поиска описаний координатных систем отсчета\n\n![](images/image-1882413297.png)\n\n## proj.org\n\nСайт библиотеки PROJ имеет описания проекций\n\n![](images/image-69855955.png)\n\n`Coordinate operations —> Projections`\n\n## projectionwizard.org\n\nВеб-приложение для выбора оптимальной проекции\n\n![](images/image-634598051.png)\n\n## Координатная привязка\n\nКоординатная привязка\n\n:   Преобразование координат, которое привязывает пространст-венные объекты к их местоположению в реальном мире.\n\n::: callout-tip\n## Когда нужна координатная привязка?\n\n1.  Информация о СК отсутствует или ошибочна *(например --- сканированная карта)*.\n2.  Информация о СК имеется, но координаты объектов искажены и требуют корректировки *(например, есть систематическая ошибка в измерениях)*.\n:::\n\n::: callout-note\n## Регистрация\n\nПроцесс координатной привязки также называют **регистрацией**.\n:::\n\n## Опорные точки\n\nКоординатная привязка выполняется по **опорным точкам**.\n\n::: columns\n::: {.column width=\"60%\"}\n![](images/control_pts.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"40%\"}\nНеобходимо указать несколько пар точек.\n\nКаждая пара создается в следующем порядке:\n\n-   сначала в текущем положении (**p**)\n\n-   затем в истинном положении (**q**).\n:::\n:::\n\nПолученные вектора используются для трансформации координат.\n\n## Аффинное преобразование\n\nАффинное преобразование\n\n:   Отображение плоскости или пространства в себя, при котором параллельные прямые переходят в параллельные прямые, пересекающиеся --- в пересекающиеся, скрещивающиеся --- в скрещивающиеся\n\nПозволяет решать простые случаи привязки:\n\n![](images/affine.svg){width=\"100%\"}\n\n## Неаффинные преобразования\n\nВ тех случаях, когда аффинных преобразований недостаточно, могут быть использованы более сложные:\n\n![](images/nonaffine.svg){width=\"100%\"}\n\nМетод резинового листа является наиболее гибким и позволяет делать локализованные трансформации объектов (изображений).\n\n## Опорные точки\n\nПринципы выбора опорных точек:\n\n1.  **Количество точек должно быть *больше* минимально необходимого**. Это позволит оценить погрешность трансформации. Например для аффинного преобразования вместо 3 желательно набрать как минимум 4 точки.\n2.  **Точки должны располагаться относительно равномерно** по полю привязываемого объекта. Необходимы точки как по краям, так и в центре.\n3.  **Точки не должны *все* располагаться на одной прямой**. Чем сильнее точки тяготеют к такой конфигурации, тем хуже будет качество привязки.\n\n## Создание объектов\n\nСоздание векторных пространственных объектов осуществляется разными способами. Наиболее распространены:\n\n1.  **Автоматическое конструирование** на основе координат.\n\n2.  **Геокодирование** --- преобразование географических идентификаторов в координаты.\n\n3.  **Векторизация** --- создание объектов в ручном режиме, либо путем преобразования из других моделей данных.\n\n    ::: callout-tip\n    ## Уточнение\n\n    Векторизации-преобразованию обычно подвергаются растровые данные.\n    :::\n\n4.  **Геометрические операции** --- получение новых векторных объектов в результате операций над существующими объектами.\n\n## Автоматическое конструирование\n\n#### Геодезические пункты --- точечные объекты\n\n::: columns\n::: {.column width=\"50%\"}\n**Исходные данные**\n\n![](images/image-1928425450.png)\n:::\n\n::: {.column width=\"50%\"}\n**Simple Feature**\n\n``` {style=\"font-size: 8\"}\nSimple feature collection with 2 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 36.34953 ymin: 55.19612 xmax: 36.37369 ymax: 55.2188\nGeodetic CRS:  WGS 84\nN Name    geometry\n  <chr>   <POINT [°]>\n1 Африка  (36.34953 55.19612)\n2 Сенокос (36.37369 55.2188)\n```\n:::\n:::\n\n## Автоматическое конструирование\n\n#### Маршрут --- линейный объект\n\n::: columns\n::: {.column width=\"50%\"}\n**Исходные данные**\n\n![](images/image-11396456.png)\n\n![](images/image-1313555464.png)\n:::\n\n::: {.column width=\"50%\"}\n**Simple Feature**\n\n```         \nGeometry set for 1 feature \nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 36.34891 ymin: 55.19607 xmax: 36.38429 ymax: 55.21918\nGeodetic CRS:  WGS 84\nLINESTRING (36.38314 55.20975, 36.38314 55.20976, 36.3832 55.20997, 36.38321 55.21001, 36.38321 55.21002, 36.38325 55.21007...\n```\n:::\n:::\n\n## Автоматическое конструирование\n\n#### Поле --- площадной объект\n\n::: columns\n::: {.column width=\"50%\"}\n**Исходные данные**\n\n![](images/image-587177276.png)\n\n![](images/image-635340267.png)\n:::\n\n::: {.column width=\"50%\"}\n**Simple Feature**\n\n```         \nGeometry set for 1 feature \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 36.37781 ymin: 55.18984 xmax: 36.38543 ymax: 55.19887\nGeodetic CRS:  WGS 84\nPOLYGON ((36.38543 55.19842, 36.38538 55.19825, 36.38533 55.19806, 36.38528 55.19785, 36.38525 55.19763, 36.38513 55.19745,...\n```\n:::\n:::\n\n## Автоматическое конструирование\n\n::: columns\n::: {.column width=\"60%\"}\n![](images/field_map.png)\n:::\n\n::: {.column width=\"40%\"}\nПример использования --- построение карт по результатам полевых работ.\n\n::: callout-caution\n## Ограничения\n\nСырые данные ГНСС-измерений содержат погрешности. Поэтому векторные объекты, созданные на их основе, часто нуждаются в редактировании, в том числе с использованием геометрических операций.\n:::\n:::\n:::\n\n## Географические идентификаторы\n\nУвязаны с местоположением, идентифицируемым географическими объектами. Взаимосвязь с объектом может быть установлена следующими основными способами:\n\n-   **локализацией**, когда конкретная позиция находится внутри географического объекта, например в стране;\n\n-   **локальными измерениями**, когда позиция определена относительно фиксированных точек географических объектов, например вдоль улицы на заданном расстоянии от пересечения с другой улицей. Этот аспект известен как *линейная привязка*;\n\n-   **слабо связанным способом**, когда позиция имеет нечеткую взаимосвязь с географическими объектами, например рядом со зданием или между двумя зданиями.\n\n## Геокодирование\n\nГеографический идентификатор [@gost:70316-2022]\n\n:   Пространственная привязка в виде текстового обозначения или кода, определяющего местоположение\n\nГеографический справочник (газеттир)\n\n:   Реестр экземпляров местоположений одного или более подтипов местоположений, содержащих некоторую информацию о позиции.\n\n::: callout-note\n## Адресный локатор\n\nГеографический справочник почтовых адресов и их местоположения обычно называют *адресным локатором*.\n:::\n\n## Адресное геокодирование\n\n![](images/geocoding.png){width=\"100%\"}\n\n**Адресный локатор** хранит набор набор векторных объектов, для каждого из которых задано структурированное описание адреса, разбитое на компоненты: индекс, регион, нас. пункт, улица и т.д.\n\n**Геокодер** находит в локаторе наиболее вероятное местоположение, соответствующее переданному адресу.\n\n## Адресное геокодирование\n\nАдресное геокодирование позволяет автоматизировать преобразование текстовых данных в пространственные.\n\n::: columns\n::: {.column width=\"45%\"}\n**Исходные данные**\n\n![](images/addr_source.png){width=\"90%\"}\n:::\n\n::: {.column width=\"55%\"}\n**Результаты геокодирования**\n\n![](images/addr_res.png){width=\"90%\"}\n:::\n:::\n\n## Векторизация\n\n**Векторизация** может осуществляться в автоматическом, автоматизированном и ручном режиме.\n\n-   *Автоматическая векторизация* используется, например, при конвертации покрытий, хранящих категориальные данные, в набор векторных объектов.\n\n    ![](images/vectorize.svg){width=\"65%\"}\n\n## Векторизация\n\n**Векторизация** может осуществляться в автоматическом, автоматизированном и ручном режиме.\n\n-   *Автоматизированная векторизация* используется, например, при выделении объектов на космических снимках и сканированных картах. Результирующие объекты требуют редактирования.\n\n    ![](images/image-91314596.png)\n\n    @yurtseven2019\n\n## Векторизация\n\n**Векторизация** может осуществляться в автоматическом, автоматизированном и ручном режиме.\n\n::: columns\n::: {.column width=\"30%\"}\n![](images/vec_manual_crop.gif)\n:::\n\n::: {.column width=\"70%\"}\n-   *Ручная векторизация* используется, когда автоматизированные методы не дают удовлетворительного результата, или когда надо создать новый векторный объект, для которого нет образца.\n\n::: callout-tip\n## Операции редактирования\n\nРучная векторизация похожа на работу в векторных графических редакторах. Объекты можно не только создавать, но также разрезать, присоединять, вырезать в них дырки и т.д.\n:::\n:::\n:::\n\n## Цифрование\n\nЦифрование\n\n:   Получение цифрового представления объектов.\n\n::: callout-tip\n## Пример\n\nКлассические пример цифрования --- получение растра топографической карты по результатам сканирования.\n:::\n\n::: callout-warning\n## Соотношение с векторизацией\n\n**Цифрование** --- более общий термин, чем *векторизация*. Для обозначения процесса создания векторных объектов необходимо употреблять термин *векторизация*.\n:::\n\n## Словарик\n\n::: columns\n::: {.column width=\"50%\" style=\"color: blue; text-align: end;\"}\nКоординатная система отсчета\n\nПроекция\n\nКоординатная привязка\n\nАффинное преобразование\n\nПроективное преобразование\n\nПолином. преобразование\n\nГеографический справочник\n\nАдресный локатор\n\nГеокодирование\n\nВекторизация\n\nЦифрование\n:::\n\n::: {.column width=\"50%\" style=\"color: red\"}\nCoordinate reference system\n\nProjection\n\nGeoreferencing\n\nAffine transformation\n\nProjective transformation\n\nPolynomial transformation\n\nGazetteer\n\nAddress locator\n\nGeocoding\n\nVectorization\n\nDigitizing\n:::\n:::\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}