{
  "hash": "e4deaf0186ff4441ef1772af9d17aeaf",
  "result": {
    "markdown": "---\ntitle: \"Геометрические операции — II\"\nsubtitle: \"Геоинформатика I. Базы пространственных данных\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Основные операции\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Расстояния между объектами\n2.  Периметр линии\n3.  Площадь полигона\n4.  Точка относительно прямой\n5.  Точка относительно отрезка\n6.  Пересечение отрезков\n7.  Точка в полигоне\n8.  Ограничивающий прямоугольник\n9.  Выпуклая оболочка\n10. Минимальный прямоугольник\n:::\n\n::: {.column width=\"50%\"}\n1.  **Оверлей полигонов**\n2.  **Слияние линий и полигонов**\n3.  **Полигонизация линий**\n4.  **Буферная зона**\n5.  **Триангуляция Делоне**\n6.  **Диаграмма Вороного**\n7.  **Скелет и срединная ось полигона**\n8.  **Центроид полигона**\n9.  **Точка на поверхности**\n10. **Вогнутая оболочка**\n:::\n:::\n\n## Оверлей\n\n**Оверлей** --- пространственное наложение двух или более пространственных объектов, при котором образуется их геометрическая и атрибутивная композиция.\n\n![](images/overlay.svg){width=\"100%\"}\n\n::: callout-warning\n## Проблема\n\nДля выполнения оверлея необходимо уметь эффективно находить пересечения между отрезками, из которых состоят границы полигонов. В общем случае это $O(n^2)$ потенциальных пересечений, где $n$ --- число отрезков\n:::\n\n## Особенности пересечения отрезков\n\n::: columns\n::: {.column width=\"50%\"}\nЕсли проекции отрезков на любую ось не пересекаются, то и сами отрезки также не пересекаются\n\n![](images/segment_projections.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"50%\"}\nПересечению отрезков всегда предшествует их последовательное расположение относительно прямой\n\n![](images/segment_sequence.svg){width=\"100%\"}\n:::\n:::\n\n## Сканирующая линия (sweeping line)\n\n**Общий принцип:** прямая линия (вертикальная или горизонтальная) сканирует сцену в перпендикулярном направлении и отслеживает события, связанные с пересечениями объектов. Пройденные события остаются позади.\n\n**Основные компоненты:**\n\n1.  *Сканирующая линия.* Структура данных, которая в каждый момент времени содержит информацию о пересекаемых объектах. Обновляется при перемещении линии.\n2.  *Очередь событий.* Структура данных, которая содержит перечень событий --- координат, в которых меняется состав или порядок пересекаемых объектов. Пройденные события удаляются, но при этом могут возникать новые.\n3.  *Выходная структура данных*.\n\n## Алгоритм Бентли-Оттмана\n\nОпределяет пересечения для множества отрезков методом сканирующей линии [@bentley1979].\n\n**Изначальные допущения:**\n\n1.  Вертикальная линия перемещается в направлении оси $X$.\n2.  Нет вертикальных отрезков и касаний в точках\n3.  В каждой точке пересекается не более двух отрезков\n\n**Сканирующая линия** $L$ содержит идентификаторы отрезков, упорядоченных в направлении оси $Y$.\n\n**Очередь** $E$ содержит события двух типов:\n\n-   Все конечные точки отрезков (известны заранее)\n\n-   Точки пересечения отрезков (вычисляются налету)\n\n## Алгоритм Бентли-Оттмана\n\n**Входные данные**\n\n$n$ отрезков $s_i = \\overline{q_i r_i},~i = 0...n-1$\n\n**Выходные данные**\n\n$k = O(n^2)$ пересечений между парами отрезков в виде кортежей $(x, y, i, j)$, где $x,y$ --- координаты точки пересечения, $i, j$ --- номера (идентификаторы) отрезков\n\n**Начальная инициализация**\n\n-   отсортировать $2n$ конечных точек по возрастанию координаты $X$ и наполнить ими $E$;\n\n-   \\$L = \\varnothing\\$\n\n## Алгоритм Бентли-Оттмана\n\nПока $E \\neq \\varnothing$, выполнять в цикле:\n\n1.  $p = \\min E$\n2.  Если $p = \\textrm{start}(s)$:\n    -   Если $t = s^- \\cap s \\neq \\varnothing$ то $E = E \\cup t$. Аналогично для $s^+$.\n    -   $L = L \\cup s$\n3.  Если $p = \\textrm{end}(s)$:\n    -   Если $t = s^- \\cap s^+ \\neq \\varnothing$ то $E = E \\cup t$.\n    -   $L = L~\\backslash~s$\n4.  Если $p = s_1 \\cap s_2$ при $s_1 <_L s_2$:\n    -   Если $t = s_1^- \\cap s_2 \\neq \\varnothing$ то $E = E \\cup t$. Аналогично для $s_2^+$ и $s_1$.\n    -   Поменять местами $s_1$ и $s_2$ в $L$\n5.  $E = E~\\backslash~p$.\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}