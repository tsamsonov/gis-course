{
  "hash": "eb65f37d5e6613637dd087f51ebe0c00",
  "result": {
    "markdown": "---\ntitle: \"Векторный анализ\"\nsubtitle: \"Основы геоинформатики. Лекция 4\"\ndate: 03/10/2023\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    slide-number: true\n    footer: \"Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Длина / периметр\n\n::: columns\n::: {.column width=\"50%\"}\nРассчитываются как сумма длин отрезков, составляющих контур объекта:\n\n$$\nL =\\\\ \\sum_{i=0}^{n-2}\\sqrt{(x_{i+1}-x_i)^2 + (y_{i+1}-y_i)^2}\n$$\n\n::: callout-note\n## Полигон\n\nУ полигона последняя точка должна иметь такие же координаты, как и первая.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/perimeter.svg){width=\"100%\"}\n:::\n:::\n\n## Площадь\n\n::: columns\n::: {.column width=\"50%\"}\nРассчитывается как сумма площадей трапеций, ограниченных сверху отрезками, составляющими контур объекта:\n\n$$\nA = \\frac{1}{2}\\sum_{i=0}^{n-2} \\underbrace{(y_{i+1}+y_{i})}_{\\texttt{основания}}\\underbrace{(x_{i+1}-x_{i})}_{\\texttt{высота}}\n$$\n\n::: callout-note\n## Отрицательная площадь\n\nТрапеции, у которых $i+1$-я точка имеет меньший X, чем $i$-я, имеют отрицательную площадь.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/area.svg){width=\"100%\"}\n:::\n:::\n\n## Принадлежность точки полигону\n\nЛуч, выпущенный из точки в направлении оси $X$, пересекает границу полигона **нечетное** количество раз.\n\n::: columns\n::: {.column width=\"60%\"}\n![](images/point_polygon.svg){width=\"90%\"}\n:::\n\n::: {.column width=\"40%\"}\n::: callout-note\n## Обратите внимание\n\nЕсли луч пересекает одну из *вершин* полигона, и оба примыкающих к ней отрезка находятся по одну сторону от луча, это засчитывается как два пересечения.\n:::\n:::\n:::\n\n::: callout-tip\n## Применение\n\nДанная операция активно используется при оценке топологических отношений --- например, для выполнения пространственных запросов.\n:::\n\n## Ограничивающий прямоугольник\n\n::: columns\n::: {.column width=\"50%\"}\n**Ограничивающий прямоугольник** определяет охват данных по осям координат.\n\nЗадаётся координатами углов:\n\n-   левого нижнего $(x_{min}, y_{min})$\n\n-   правого верхнего $(x_{max}, y_{max})$\n:::\n\n::: {.column width=\"50%\"}\n![](images/bbox.svg){width=\"100%\"}\n:::\n:::\n\n::: callout-tip\n## Применение\n\nОграничивающий прямоугольник является важным элементом *метаданных* --- описания пространственных данных, но также используется и в аналитических задачах.\n:::\n\n## Выпуклая оболочка\n\n::: columns\n::: {.column width=\"50%\"}\n**Выпуклая оболочка** --- наименьший по площади выпуклый многоугольник, *покрывающий* заданное множество точек.\n\n::: callout-note\n## Выпуклое множество\n\nМножество, в котором отрезок, соединяющий любые две точки также находится внутри этого множества.\n\n![](images/non_convex.svg){width=\"65%\"}\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/convex_hull.svg){width=\"75%\"}\n\n::: callout-tip\n## Применение\n\nВыпуклые оболочки используются для восстановления ареалов по точечным измерениям. Также выпуклая оболочка является границей *триангуляционного покрытия*.\n:::\n:::\n:::\n\n## Выпуклая оболочка\n\nИзвестный метод построения --- **алгоритм Джарвиса** [@jarvis1973]:\n\n::: columns\n::: {.column width=\"50%\"}\n-   находим *нулевую* точку с минимальной координатой $X$;\n\n-   ищем *первую* точку с минимальным дирекционным углом;\n\n-   получаем отрезок $p_0 p_1$;\n\n-   продолжаем поиск, находя следующий отрезок, образующий минимальный угол поворота относительно предыдущего.\n:::\n\n::: {.column width=\"50%\"}\n![](images/jarvis.gif)\n:::\n:::\n\n## Диаграмма Вороного\n\n::: columns\n::: {.column width=\"40%\"}\n![](images/voronoy_outline.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"60%\"}\n\nДиаграмма Вороного\n\n:   Диаграмма Вороного конечного множества точек $S$ на плоскости представляет такое разбиение плоскости, при котором каждая область этого разбиения образует множество точек, более близких к одному из элементов множества $S$, чем к любому другому элементу множества.\n:::\n:::\n\n::: callout-tip\n## Применение\n\nДиаграмма Вороного используется при моделировании зон влияния объектов.\n:::\n\n## Триангуляционное покрытие\n\nЭлементы триангуляционной модели имеют свои названия.\n\n![](images/tin_details_7.svg){width=\"100%\"}\n\n## Центроид и срединная ось\n\n::: columns\n::: {.column width=\"50%\"}\n**Центроид** --- точка, представляющая среднее значение координат полигона без учета последней точки (которая совпадает с первой):\n\n$$\nC = \\Bigg(\\frac{1}{n-1}\\sum_{i=0}^{n-2} x_i, \\frac{1}{n-1}\\sum_{i=0}^{n-2} y_i \\Bigg)\n$$\n\n**Срединная ось** --- линия равноудаленная от границ полигона.\n:::\n\n::: {.column width=\"50%\"}\n![](images/centroid_axis.svg){width=\"100%\"}\n\n::: callout-tip\n## Применение\n\nИспользуются для картографической генерализации.\n:::\n\n:::\n:::\n\n## Буферные зоны\n\n**Буферная зона** --- это множество точек, располагающихся в пределах заданного расстояния относительно объекта.\n\n::: columns\n::: {.column width=\"40%\"}\n-   буфер точки представляет собой круг;\n\n-   буфер полигона может быть положительным и отрицательным;\n\n-   буфер точки или линии всегда положительный.\n:::\n\n::: {.column width=\"60%\"}\n![](images/buffering.svg){width=\"65%\"}\n:::\n:::\n\n::: callout-tip\n## Применение\n\nИспользуются при анализе влияния. Например, определения водоохранных зон.\n:::\n\n## Преобразование моделей объектов\n\nМежду любыми моделями пространственных объектов возможны взаимные преобразования.\n\n::: columns\n::: {.column width=\"60%\"}\n![](images/conversions.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"40%\"}\n::: callout-tip\n## Применение\n\nНапример, можно получить из полигона заповедника поворотные точки его границы. Или восстановить линию почвенного профиля по точкам разрезов.\n:::\n\n::: callout-important\n## Мультигеометрия\n\nПри конвертации полигона или линии в точки обычно получается мультиточечный объект.\n:::\n:::\n:::\n\n## Преобразования мультиобъектов\n\nВ некоторых случаях требуется преобразовать мультиобъект в множество отдельных объектов и наоборот.\n\n![](images/multi_conv.svg){width=\"100%\"}\n\n::: callout-tip\n## Применение\n\nНапример, требуется провести анализ в пределах отдельных островов архипелага.\n:::\n\n## Слияние (объединение по признаку)\n\n**Слияние** (объединение по признаку) --- это объединение геометрий пересекающихся объектов с одинаковым значением атрибута.\n\n![](images/dissolve.svg){width=\"85%\"}\n\n::: callout-tip\n## Применение\n\nСлияние всегда сопровождает агрегирование атрибутов и используется при укрупнении единиц картографирования. Также может применяться при векторизации, когда объект создается по фрагментам, которые далее необходимо объединить.\n:::\n\n## Оверлей\n\n**Оверлей** --- пространственное наложение двух или более пространственных объектов, при котором образуется их геометрическая и атрибутивная композиция.\n\n![](images/overlay.svg){width=\"100%\"}\n\n**Оверлей** --- одна из самых полезных геометрических операций.\n\n## Оверлей\n\n::: columns\n::: {.column width=\"50%\"}\n*Пересечение* используется для **обрезки данных** по указанной области.\n\nОбласть обрезки может быть произвольной, но чаще всего используется ограничивающий прямоугольник\n\n::: callout-note\n## Clip\n\nОбрезка данных *(clip)* является частным случаем пересечения с полигональным объектом, при котором наследуются только атрибуты обрезаемых объектов.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](images/clip.svg){width=\"100%\"}\n:::\n:::\n\n## Оверлей\n\n::: columns\n::: {.column width=\"50%\"}\n**Пространственная ассоциация** --- взаимосвязь местоположения объектов --- также может быть исследована путем оверлея.\n\nДля двух классов $A$ и $B$:\n\n-   односторонняя ассоциация:\\\n    $|A \\cap B|/ |A|$\n\n-   двусторонняя ассоциация:\\\n    $|A \\cap B| / |A \\cup B|$\n:::\n\n::: {.column width=\"50%\"}\n![](images/assoc.svg){width=\"80%\"}\n:::\n:::\n\nДля анализа ассоциации двух явлений --- например *типов почв и рельефа* --- состоящих из множества классов, используются специальные индексы. Например, индекс [**Крамера V**](https://en.wikipedia.org/wiki/Cramér%27s_V).\n\n## Оверлей\n\n::: columns\n::: {.column width=\"50%\"}\n**Пространственные соотношения** различных типов объектов в пределах заданных участков также определяются методом оверлея.\n\nДоля класса $A$ в пределах участка $C$:\n\n$$\n|A \\cap C|/ |C|\n$$\n:::\n\n::: {.column width=\"50%\"}\n![](images/ratio.svg){width=\"100%\"}\n:::\n:::\n\n::: callout-tip\n## Пример\n\nМодели формирования речного стока работают на растровой сетке и требуют задания соотношения типов подстилающей поверхности для каждой ячейки.\n:::\n\n## Отношение геометрии и атрибутов\n\nВ геореляционных базах данных допустимое множество операций над атрибутом также зависит от того как он получен относительно пространства.\n\n**Опора измерений** --- физический объем, подвергнутый измерению.\n\n::: columns\n::: {.column width=\"50%\"}\n::: callout-note\n## Экстенсивные атрибуты\n\nПропорциональны опоре измерений. Суммируются при объединении территорий и делятся при разделении.\n\n![Численность населения](images/extensive.svg){width=\"100%\"}\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: callout-note\n## Интенсивные атрибуты\n\nНе пропорциональны опоре измерений. Осредняются при объединении территорий и остаются прежними при разделении.\n\n![Плотность населения](images/intensive.svg){width=\"100%\"}\n:::\n:::\n:::\n\n## Оверлей\n\n**Интерполяция, взвешенная на площадь** --- способ пересчета количественного показателя между сетками учетных единиц.\n\n::: columns\n::: {.column width=\"50%\"}\nДля каждой из $q$ выходных единиц $T_j$, средневзвешенное значение $Y_i$ извлеченное из $p$ исходных единиц $S_i$, равно:\n\n$$\n\\hat{Y_j}(T_j) = \\sum_{i=1}^p w_{ij} Y_i(S_i)\n$$\n\n-   экстенсивная: $w_{ij} = \\frac{|T_j \\cap S_i|}{|S_i|}$\n\n-   интенсивная: $w_{ij} = \\frac{|T_j \\cap S_i|}{|T_j|}$\n:::\n\n::: {.column width=\"50%\"}\n![](images/areaweighted.svg){width=\"100%\"}\n:::\n:::\n\n## Словарик\n\n::: columns\n::: {.column width=\"50%\" style=\"color: blue; text-align: end;\"}\nОгранич. прямоугольник\n\nВыпуклая оболочка\n\nДиаграмма Вороного\n\nЦентроид\n\nСрединная ось\n\nБуферная зона\n\nСлияние\n\nОверлей\n\nОбрезка\n\nИнтерполяция, взвешенная на площадь\n:::\n\n::: {.column width=\"50%\" style=\"color: red\"}\nBounding box\n\nConvex hull\n\nVoronoy diagram\n\nCentroid\n\nMedial axis\n\nBuffer\n\nDissolve\n\nOverlay\n\nClip\n\nArea-weighted interpolation\n:::\n:::\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}