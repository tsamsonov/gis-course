{
  "hash": "82ff7dc9dbdf5864b0daf2f49e3c33f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Упорядочение и индексация пространственных данных\"\nsubtitle: \"Геоинформатика I\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Генерация Z-кривой и кривой Гильберта\n\n**Задача**: разбить территорию на $N \\times N$ ячеек, упорядочив их по близости.\n\n::: columns\n::: {.column width=\"60%\"}\n**Общий алгоритм**:\n\n1.  Начать с представления области в виде одной ячейки ($k = 0$).\n\n2.  Итерировать по $k = 1, ..., n-1$, где $n = \\log_2N$\n\n    -   разбить территорию на $2^k \\times 2^k$ блоков;\n\n    -   вычислить номера ячеек.\n\n::: callout-tip\n## Размер блока на каждой итерации\n\nНа каждой итерации каждая ячейка заменяется на 4 блока размером $2^{n-k} \\times 2^{n-k}$.\n:::\n:::\n\n::: {.column width=\"40%\"}\n![](images/curve_subdivision.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация Z-кривой\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Конвертировать в бинарное представление индексы ячеек $u$ (по $X$) и $v$ (по $Y$).\n\n    $$\n    \\color{blue}{u = 10}, \\color{red}{v = 10}\n    $$\n\n2.  Расположить биты полученных значен ий вперемежку (через один):\n\n    $$\n    \\color{violet}{w =} \\color{blue}{1}\\color{red}{1}\\color{blue}{0}\\color{red}{0}\n    $$\n\n3.  Вычислить десятичный номер полученного значения\n\n    $$\n    \\color{violet}{1100_2} \\rightarrow \\color{green}{12_{10}}\n    $$\n:::\n\n::: {.column width=\"50%\"}\n![](images/zcurve.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert1.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.\n\n2.  Расположить биты полученных значений вперемежку (через один).\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert2.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.\n\n2.  Расположить биты полученных значений вперемежку (через один).\n\n3.  Разделить полученное число *слева направо* на двухбитные строки.\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert3.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Конвертировать в бинарное представление индексы ячеек $u$ и $v$.\n\n2.  Расположить биты полученных значений вперемежку (через один).\n\n3.  Разделить полученное число *слева направо* на двухбитные строки.\n\n4.  Сопоставить каждой двухбитной строке десятичную цифру $d$ по правилам:\n\n    $$\n    \\texttt{00} \\rightarrow 0,~\\texttt{01} \\rightarrow 1\\\\\\texttt{10} \\rightarrow 3,~\\texttt{11} \\rightarrow 2\n    $$\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert4.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert5.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.\n\n2.  В цикле по $k \\leftarrow 0…n-1$, где $n = |D|$:\n\n    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.\n\n    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert6.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.\n\n2.  В цикле по $k \\leftarrow 0…n-1$, где $n = |D|$:\n\n    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.\n\n    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.\n\n3.  Преобразовать каждую цифру в истинное 2-битовое представление\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert7.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.\n\n2.  В цикле по $k \\leftarrow 0…n-1$, где $n = |D|$:\n\n    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.\n\n    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.\n\n3.  Преобразовать каждую цифру в истинное 2-битовое представление.\n\n4.  Вычислить искомый номер.\n:::\n\n::: {.column width=\"50%\"}\n![](images/guilbert8.svg){width=\"100%\"}\n:::\n:::\n\n## Генерация кривой Гильберта\n\n1.  Конвертировать в бинарное представление индексы ячеек $i$ и $j$.\n\n2.  Расположить биты полученных значений вперемежку (через один).\n\n3.  Разделить полученное число *слева направо* на двухбитные строки.\n\n4.  Сопоставить каждой двухбитной строке десятичную цифру $d$ по правилам:\n\n    $$\n    \\texttt{00} \\rightarrow 0,~\\texttt{01} \\rightarrow 1,~\\texttt{10} \\rightarrow 3,~\\texttt{11} \\rightarrow 2\n    $$\n\n5.  Представить полученные значения $d$ в виде списка (одномерного массива) $D$.\n\n6.  В цикле по $k \\leftarrow 0…n-1$, где $n = |D|$:\n\n    -   если $d_k = 0$, то для всех $m > k$ заменить $d_m = 1$ на $3$, а $d_m = 3$ на $1$.\n\n    -   если $d_k = 3$, то для всех $m > k$ заменить $d_m = 0$ на $2$, а $d_m = 2$ на $0$.\n\n7.  Преобразовать каждую цифру в истинное 2-битовое представление\n\n8.  Вычислить искомый номер.\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}