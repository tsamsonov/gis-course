{
  "hash": "81d10ce17ed793d9fd041e1d76470762",
  "result": {
    "markdown": "---\ntitle: \"PostGIS. Создание и импорт векторных данных\"\nsubtitle: \"Геоинформатика I. Базы пространственных данных\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Базовые библиотеки\n\nФункциональность **PostGIS** опирается на 4 библиотеки:\n\n::: columns\n::: {.column width=\"50%\"}\n::: columns\n::: {.column width=\"30%\"}\n![](images/gdalicon.png){width=\"100%\"}\n:::\n\n::: {.column width=\"70%\"}\n**GDAL** выполняет конвертацию между форматами данных и растровые операции\n:::\n:::\n\n**PROJ** выполняет преобразования систем координат\n\n![](images/projicon.png){width=\"70%\"}\n:::\n\n::: {.column width=\"50%\"}\n**GEOS** выполняет геометрические операции в *2D*\n\n![](images/geosicon.png)\n\n**\\[SF\\]CGAL** выполняет геометрические операции в *3D*\n\n![](images/CGAL.png){width=\"70%\"}\n:::\n:::\n\n## Структура базы данных\n\n![](images/pg_database.svg){width=\"100%\"}\n\n## Структура схемы\n\n![](images/pg_schema1.svg){width=\"100%\"}\n\n## Структура схемы (продолжение)\n\n![](images/pg_schema2.svg){width=\"100%\"}\n\n## Создание пустой БД\n\n**Создание БД** (запрос к любой существующей БД)\n\n``` sql\nCREATE DATABASE satino;\n```\n\n**Создание схемы и активация расширения**\n\n``` sql\nCREATE SCHEMA postgis;\nGRANT USAGE ON schema postgis to public; -- доступ для всех\nCREATE EXTENSION postgis SCHEMA postgis; -- включить postgis для схемы\nCREATE EXTENSION postgis_raster SCHEMA postgis; -- включить растры для схемы\nALTER DATABASE satino SET search_path=public,postgis; -- добавить в путь поиска\n```\n\n**Проверка установки**\n\n``` sql\nSELECT postgis_full_version();\n```\n\n::: callout-important\n## Внимание\n\nУстановка расширения `postgis` через графический интерфейс не позволяет выбрать схему и выполняется в схеме `public`.\n:::\n\n## Типы пространственных данных\n\nВ PostGIS существует 4 типа пространственных данных\n\n|     | Тип         | Особенности                                     |\n|-----|-------------|-------------------------------------------------|\n| 1   | `geometry`  | Векторные данные в декартовой системе координат |\n| 2   | `geography` | Векторные данные в угловой системе координат    |\n| 3   | `raster`    | Растровые данные (многомерные)                  |\n| 4   | `topology`  | Топологические данные (вершины и грани).        |\n\n::: callout-note\n## Топологические данные\n\nТип данных `topology` используется для хранения топологических покрытий и сетевых данных. Для анализа последних применяется отдельное расширение **pgRouting**.\n:::\n\n::: callout-tip\n## Интересный факт\n\nPostGIS позволяет хранить несколько пространственных столбцов в одной таблице\n:::\n\n## Каталог систем координат\n\n::: columns\n::: {.column width=\"30%\"}\nСистемы координат хранятся в таблице `spatial_ref_sys`\n\n::: callout-note\n#### SRS vs CRS\n\nНесмотря на то, что каталог имеет называется *SRS (Spatial Reference Systems)*, по факту он хранит описание *CRS (Coordinate Reference Systems)*.\n:::\n\n::: callout-important\n#### Терминология WKT\n\nТерминология WKT при описании CRS может не полностью соответствовать стандартами ISO / OGC\n:::\n:::\n\n::: {.column width=\"70%\"}\n![](images/srs_postgis.png)\n:::\n:::\n\n## Создание пространственных таблиц\n\nПри создании пространственных таблиц необходимо указать\n\n-   уникальный идентификатор\n\n-   геометрический столбец заданного типа и КСО\n\nНапример, таблица точек гидрологических промеров может иметь следующий состав:\n\n``` sql\nCREATE TABLE postgis.hydro_measures (\n    fid serial primary key,\n    depth real,\n    geom geography(point, 4326)\n)\n```\n\n## Ручное создание данных\n\nВставка новых строк выполняется посредством стандартной команды INSERT:\n\n``` sql\nINSERT INTO postgis.hydro_measures(fid, depth, geom)\nVALUES\n    (1, 1.23, ST_GeomFromText('POINT (36.37802128 55.21121827)')),\n    (2, 1.57, ST_GeomFromText('POINT (36.37834198 55.21127511)')),\n    (3, 0.78, ST_GeomFromText('POINT (36.37861509 55.21139158)')),\n    (4, 0.95, ST_GeomFromText('POINT (36.37905934 55.21137259)')),\n    (5, 1.11, ST_GeomFromText('POINT (36.37938529 55.21125473)'));\n```\n\nАльтернативный синтаксис через преобразование строки к типу данных:\n\n``` sql\nINSERT INTO postgis.hydro_measures(fid, depth, geom)\nVALUES\n    (1, 1.23, 'POINT (36.37802128 55.21121827)'::geography),\n    (2, 1.57, 'POINT (36.37834198 55.21127511)'::geography),\n    (3, 0.78, 'POINT (36.37861509 55.21139158)'::geography),\n    (4, 0.95, 'POINT (36.37905934 55.21137259)'::geography),\n    (5, 1.11, 'POINT (36.37938529 55.21125473)'::geography);\n```\n\n## Импорт из CSV\n\nДля импорта можно использовать команду `COPY` :\n\n``` sql\nCREATE TABLE IF NOT EXISTS postgis.geo_points (\n    fid serial primary key,\n    name text,\n    comment text,\n    height_abs real,\n    height_add real,\n    type text,\n    x real, \n    y real\n);\n\nDELETE FROM postgis.geo_points; -- опционально, если хотите очистить\n\nCOPY postgis.geo_points \n    FROM '/Volumes/Data/Spatial/Satino/geo_points.csv' \n    DELIMITER as ',' \n    CSV HEADER;\n```\n\n## Непространственная таблица\n\nПолученная таблица не является пространственной:\n\n![](images/copy_csv.png)\n\n## Активация пространственных точек\n\n::: columns\n::: {.column width=\"50%\"}\nЕсли данные точечные и содержат координаты в столбцах, то можно на их основе создать геометрию\n\n``` sql\nALTER TABLE postgis.geo_points \n  ADD geom geometry(point, 32637);\nUPDATE postgis.geo_points\n  SET geom = ST_Point(x, y)\n```\n\n![](images/geom_fromxy.png)\n:::\n\n::: {.column width=\"50%\"}\nДля преобразования используем одну из функций PostGIS (без или с указанием *SRID*).\n\n![](images/st_point.png)\n:::\n:::\n\n## Импорт из шейп-файла\n\nВместе с **PostGIS** устанавливаются утилиты [**`shp2pgsql`**](https://postgis.net/docs/using_postgis_dbmanagement.html#shp2pgsql_usage) и [**`pgsql2shp`**](https://postgis.net/docs/using_postgis_dbmanagement.html#pgsql2shp-usage) , позволяющие импортировать из и экспортировать данные в формат [Shapefile](https://www.esri.com/content/dam/esrisites/sitecore-archive/Files/Pdfs/library/whitepapers/pdfs/shapefile.pdf).\n\n``` bash\nLast login: Fri Sep 22 14:36:05 on console\n(base) tsamsonov@Butterfly ~ % shp2pgsql\nRELEASE: 3.3.4 (3.3.4)\nUSAGE: shp2pgsql [<options>] <shapefile> [[<schema>.]<table>]\nOPTIONS:\n  -s [<from>:]<srid> Set the SRID field. Defaults to 0.\n      Optionally reprojects from given SRID.\n (-d|a|c|p) These are mutually exclusive options:\n     -d  Drops the table, then recreates it and populates\n         it with current shape file data.\n     -a  Appends shape file into current table, must be\n         exactly the same table schema.\n     -c  Creates a new table and populates it, this is the\n         default if you do not specify any options.\n     -p  Prepare mode, only creates the table.\n```\n\n## shp2pgsql на Windows\n\nПри установке путь к утилите не прописывается в переменные среды:\n\n![](images/shp2pgsql_win.png)\n\n## shp2pgsql на Windows\n\nНа *Windows* утилита по умолчанию находится в папке `C:\\Program Files\\PostgreSQL\\<version>\\bin`\n\n![](images/shp2pgsql.png)\n\n## shp2pgsql на Windows\n\nЧтобы не вводить каждый раз полный путь к программе, необходимо прописать его в переменные окружения:\n\n``` bash\nsetx path \"%PATH%;C:\\Program Files\\PostgreSQL\\15\\bin\"\n```\n\nПосле этого перезапустите командную строку, и утилита будет запускаться:\n\n![](images/shp2pgsql2.png)\n\n## Импорт из шейп-файла\n\nЕсли запустить без параметров, то будет только диагностика без импорта:\n\n``` bash\ntsamsonov@Butterfly satino_base % shp2pgsql border.shp postgis.border\nField fid is an FTDouble with width 20 and precision 0\nShapefile type: Polygon\nPostgis type: MULTIPOLYGON[2]\nSET CLIENT_ENCODING TO UTF8;\nSET STANDARD_CONFORMING_STRINGS TO ON;\nBEGIN;\nCREATE TABLE \"postgis\".\"border\" (gid serial,\n\"fid\" numeric,\n\"name\" varchar(60));\nALTER TABLE \"postgis\".\"border\" ADD PRIMARY KEY (gid);\nSELECT AddGeometryColumn('postgis','border','geom','0','MULTIPOLYGON',2);\nINSERT INTO \"postgis\".\"border\" (\"fid\",\"name\",geom) VALUES ('1',NULL,'0106000000010000000103000000010000000500000030FF21BDE4231441BAFC8774DB575741503789C1D8231441C05B2081C35B5741F04A59C6FA711441C442AD71C45B5741F0DBD7C106721441BCE31465DC57574130FF21BDE4231441BAFC8774DB575741');\nCOMMIT;\nANALYZE \"postgis\".\"border\";\ntsamsonov@Butterfly satino_base % \n```\n\n## Импорт из шейп-файла\n\nПо факту утилита создает SQL-запрос, который можно направить в файл через `>`:\n\n``` bash\nshp2pgsql -g geom border.shp postgis.border > border.sql\n```\n\n::: columns\n::: {.column width=\"30%\"}\nПолученный файл можно открыть средствами СУБД и запустить.\n\n::: callout-tip\n## Большие файлы\n\nПри импорте больших файлов рекомендуется использовать параметр `-D`, при котором будет создаваться не SQL-запрос, а бинарный файл *дампа* базы данных.\n:::\n:::\n\n::: {.column width=\"70%\"}\n![](images/importsql.png)\n:::\n:::\n\n## Импорт через `psql`\n\nВ большинстве случаев однако запрос не пишут в файл, а направляют через пайп (`|`) в [**psql**](https://www.postgresql.org/docs/current/app-psql.html) --- командный интерфейс **PostgreSQL**. Необходимо указать как минимум базу данных (`-d`) и имя пользователя (`-U)`:\n\n``` bash\nshp2pgsql -g geom border.shp postgis.border | psql -d satino -U postgres\n```\n\nПосле ввода пароля данные будут записаны в указанную таблицу:\n\n![](images/psql_pipe.png)\n\n## Универсальный импорт через ogr2ogr\n\n[**ogr2ogr**](https://gdal.org/programs/ogr2ogr.html) --- утилита GDAL, универсальный конвертер форматов данных.\n\nВместе с ней идет утилита **ogrinfo**, для анализа входных данных:\n\n![](images/ogrinfo.png)\n\n## ogrinfo\n\nПоддерживаемые форматы можно выяснить через `ogr2ogr --formats` :\n\n``` bash\n(base) tsamsonov@Butterfly Satino % ogr2ogr --formats\nSupported Formats:\n  FITS -raster,vector- (rw+): Flexible Image Transport System\n  PCIDSK -raster,vector- (rw+v): PCIDSK Database File\n  netCDF -raster,multidimensional raster,vector- (rw+s): Network Common Data Format\n  PDS4 -raster,vector- (rw+vs): NASA Planetary Data System 4\n  VICAR -raster,vector- (rw+v): MIPL VICAR file\n  JP2OpenJPEG -raster,vector- (rwv): JPEG-2000 driver based on OpenJPEG library\n  PDF -raster,vector- (rw+vs): Geospatial PDF\n  MBTiles -raster,vector- (rw+v): MBTiles\n  BAG -raster,multidimensional raster,vector- (rw+v): Bathymetry Attributed Grid\n  EEDA -vector- (ro): Earth Engine Data API\n  OGCAPI -raster,vector- (rov): OGCAPI\n  ESRI Shapefile -vector- (rw+v): ESRI Shapefile\n  MapInfo File -vector- (rw+v): MapInfo File\n  ...\n```\n\n## Параметры ogr2ogr\n\nДанная программа содержит множество параметров (см. [документацию](https://gdal.org/programs/ogr2ogr.html)):\n\n``` bash\n(base) tsamsonov@Butterfly Satino % ogr2ogr\nUsage: ogr2ogr [--help-general] [-skipfailures] [-append | -upsert] [-update]\n               [-select field_list] [-where restricted_where|@filename]\n               [-progress] [-sql <sql statement>|@filename] [-dialect dialect]\n               [-preserve_fid] [-fid FID] [-limit nb_features]\n               [-spat xmin ymin xmax ymax] [-spat_srs srs_def] [-geomfield field]\n               [-a_srs srs_def] [-t_srs srs_def] [-s_srs srs_def] [-ct string]\n               [-f format_name] [-overwrite] [[-dsco NAME=VALUE] ...]\n               dst_datasource_name src_datasource_name\n               [-lco NAME=VALUE] [-nln name] \n               [-nlt type|PROMOTE_TO_MULTI|CONVERT_TO_LINEAR|CONVERT_TO_CURVE]\n               [-dim XY|XYZ|XYM|XYZM|layer_dim] [layer [layer ...]]\n       Advanced options :\n               [-gt n] [-ds_transaction]\n               [[-oo NAME=VALUE] ...] [[-doo NAME=VALUE] ...]\n               [-clipsrc [xmin ymin xmax ymax]|WKT|datasource|spat_extent]\n               ...\n```\n\n## Импорт GeoPackage через ogr2ogr\n\nДля импорта необходимо указать формат входного файла (`f`), параметры подключения, а также параметры, специфичные для выходного формата (`-lco`).\n\n**Импорт одного слоя (`landscapes`)**\n\n``` bash\nogr2ogr \n  -f PostgreSQL PG:\"dbname=satino user=postgres password=.....\" \n  satino_thematic.gpkg landscapes \n  -lco GEOMETRY_NAME=geom -lco SCHEMA=postgis\n```\n\n**Импорт всех слоев**\n\n``` bash\nogr2ogr \n  -f PostgreSQL PG:\"dbname=satino user=postgres password=.....\" \n  satino_thematic.gpkg \n  -lco GEOMETRY_NAME=geom -lco SCHEMA=postgis\n```\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}