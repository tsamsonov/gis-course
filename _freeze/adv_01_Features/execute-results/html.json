{
  "hash": "e1ee1f3b67169ca99d8560d25c1eac81",
  "result": {
    "markdown": "---\ntitle: \"Введение\"\nsubtitle: \"Геоинформатика I. Базы пространственных данных\"\ndate: 02/10/2023\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций для студентов кафедры картографии и геоинформатики МГУ\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Геоинформатика\n\n![](images/semesters.png)\n\n## База пространственных данных\n\nБаза пространственных данных [@gost:52438-2005]\n\n:   Совокупность пространственных данных, организованных по определенным правилам, устанавливающим общие принципы описания, хранения и манипулирования данными, предназначенная для удовлетворения информационных потребностей пользователя.\n\n::: callout-warning\n## Жаргон\n\nНе рекомендуются к использованию словосочетания: база геоданных, пространственная база данных, база данных ГИС\n:::\n\n## Пространственный объект\n\nПространственный объект [@gost:52438-2005]\n\n:   Цифровая модель материального или абстрактного объекта реального или виртуального мира с указанием его идентификатора, координатных и атрибутивных данных.\n\n![](images/feature.svg){fig-align=\"center\" width=\"100%\"}\n\n## Эволюция моделей СУБД\n\n\n```{mermaid}\n%%| fig-width: 11\nflowchart TB\n  A(Файловые) --> B(Сетевые)\n  A --> C(Иерархические)\n  C --> D(Реляционные / РСУБД)\n  B --> D\n  E(Объектно-ориентированные / ООСУБД) --> F(Объектно-Реляционные / ОРСУБД)\n  D --> F\n```\n\n\n## Пространственные данные в РСУБД\n\n\n::: {.cell}\n\n:::\n\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\nПредставление в обычной РСУБД достаточно громоздко\n:::\n\n::: {.column width=\"60%\"}\n| Name  | Area | Price  | BoundaryID |\n|-------|------|--------|------------|\n| Уч. 2 | 37.0 | 560000 | 1055       |\n\n: Parcels\n\n| BoundaryID | Edge |\n|------------|------|\n| 1055       | A    |\n| 1055       | B    |\n| 1055       | C    |\n| 1055       | D    |\n| 1055       | E    |\n\n: Polygons\n:::\n:::\n\n## Пространственные данные в РСУБД\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-4-3.png){width=960}\n:::\n:::\n\n\nПредставление в обычной РСУБД достаточно громоздко\n:::\n\n::: {.column width=\"25%\"}\n| Edge | Point |\n|------|-------|\n| A    | 1     |\n| A    | 2     |\n| B    | 2     |\n| B    | 3     |\n| C    | 3     |\n| C    | 4     |\n| D    | 4     |\n| D    | 5     |\n| E    | 5     |\n| E    | 1     |\n\n: Edges\n:::\n\n::: {.column width=\"25%\"}\n| Point | X   | Y   |\n|-------|-----|-----|\n| 1     | 5   | 0   |\n| 2     | 0   | 5   |\n| 3     | 3   | 9   |\n| 4     | 8   | 8   |\n| 5     | 6   | 4   |\n\n: Points\n:::\n:::\n\n## Пространственные данные в РСУБД\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-5-5.png){width=960}\n:::\n:::\n\n\nПредставление в обычной РСУБД достаточно громоздко\n:::\n\n::: {.column width=\"50%\"}\n\n```{mermaid}\n%%| fig-width: 2\nflowchart TB\n  A(Parcels) --> B(Polygons)\n  B --> C(Edges)\n  C --> D(Points)\n```\n\n:::\n:::\n\n## Абстрактные типы данных\n\nВажное наследие объектно-ориентированных систем --- поддержка абстрактных типов данных.\n\n::: columns\n::: {.column width=\"45%\"}\n*Примитивные типы данных* составляют основу реляционных БД. ![](images/elementary_types.svg){width=\"90%\"}\n:::\n\n::: {.column width=\"55%\"}\n*Абстрактные типы данных (АТД)* обеспечивают хранение коллекций и объектов со свойствами. ![](images/abstract_types.svg){width=\"100%\"}\n:::\n:::\n\nБольшинство ОРСУБД предлагают модульный подход к АТД, позволяя добавлять и удалять их.\n\n## Пространственная СУБД\n\nАбстрактные типы данных --- основа реализации пространственных СУБД.\n\nПСУБД должна отвечать следующим требованиям:\n\n1.  Представляет собой программный модуль, взаимодействующий с нижестоящей СУБД или являющийся ее компонентой\n2.  Поддерживает множественные модели пространственных данных, соответствующие им абстрактные типы данных, а также язык запросов, из которого эти типы могут быть вызваны.\n3.  Реализует пространственное индексирование, эффективные алгоритмы пространственных операций и специальные правила оптимизации запросов.\n\n## Пространственная СУБД\n\nОсновные аспекты функционирования ПСУБД:\n\n1.  Модели пространственных данных и пространственных отношений.\n2.  Язык запросов\n3.  Обработка и оптимизация запросов\n4.  Организация файлового хранилища\n5.  Выполнение аналитических операций (добыча данных).\n\n## Модели пространственных данных\n\n![](images/basic_primitives.svg){width=\"100%\"}\n\nАбстрактные типы данных в ПСУБД реализуют различные модели пространственных данных\n\n## Пространственные отношения\n\n![](images/sp_relations.svg){width=\"100%\"}\n\nПространственные запросы в ПСУБД опираются на модели пространственных отношений\n\n## Язык запросов\n\n**Structured Query Language (SQL)** --- язык структурированных запросов. Применяется для создания, модификации и управления данными в реляционной базе данных.\n\nПространственная СУБД поддерживает создание и манипулирование пространственными типами данных:\n\n``` small\nSELECT 'SRID=4326;POINT(-123 34)'::geography\n\"0101000020E61000000000000000C05EC00000000000004140\"\n\nCREATE TABLE geotable(gid serial PRIMARY KEY, name TEXT, geom geography(POINT) );\n\nINSERT INTO geotable ( name, geom )\n  VALUES ( ST_GeomFromEWKT('SRID=312;POINTM(-126.4 45.32 15)'), 'A Place' )\n```\n\n## Пространственные расширения SQL\n\n``` small\nSELECT\n  m.name,\n  SUM(ST_Length(r.geom))/1000 as roads_km\nFROM bc_roads AS r\nJOIN bc_municipality AS m\n  ON ST_Contains(m.geom, r.geom)\nGROUP BY m.name\nORDER BY roads_km;\n\nname                        | roads_km\n----------------------------+------------------\nSURREY                      | 1539.47553551242\nVANCOUVER                   | 1450.33093486576\nLANGLEY DISTRICT            | 833.793392535662\nBURNABY                     | 773.769091404338\nPRINCE GEORGE               | 694.37554369147\n...\n```\n\n## Обработка запросов\n\n![](images/query_plan.svg){width=\"100%\"}\n\n-   SQL --- декларативный язык. Он описывает *что* необходимо получить, но не *как*, т.е. не сам алгоритм выполнения процедуры.\n\n-   СУБД должна самостоятельно определить план эффективного выполнения запроса.\n\n-   Обработка запроса представляет собой последовательность шагов, которую инициирует СУБД для выполнения запроса.\n\n-   Оптимизация пространственных запросов обладает своей спецификой\n\n## Обработка запросов\n\n``` small\nSELECT\nFROM reltypes R, soiltypes S\nWHERE st_area(S.geom) < 10000 AND st_area(R.geom) < 10000\nAND st_intersects(R.geom, s.geom)\n```\n\n![](images/filter_refine.svg){width=\"100%\"}\n\nПространственный запрос состоит из фильтрации (`FILTER`) на основе MBR и уточнения (`REFINE`) по реальной геометрии.\n\n## Хранение данных\n\nДанные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу\n\n![](images/ordering_comp1.svg){width=\"100%\"}\n\n## Хранение данных\n\nДанные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу\n\n![](images/ordering_comp2.svg){width=\"100%\"}\n\n## Оптимизация запросов\n\n**Непространственный запрос** *`Выбери всех абитуриентов женского пола, которые являются призерами всероссийской олимпиады по географии`* раскладывается на 2 подзапроса:\n\n-   **ПРОЕКЦИЯ** (single-scan): выбрать всех абитуриентов женского пола\n\n-   **СОЕДИНЕНИЕ** (multi-scan): сопоставить таблицу призеров и таблицу абитуриентов\n\n::: callout-note\n## Последовательность\n\nСначала должен быть выполнен запрос проекции, т.к. соединение является более ресурсоемкой многопроходной (*multiscan*) операцией\n:::\n\n## Оптимизация запросов\n\n**Пространственный запрос** *`Выбери все регионы с площадью более 100 тыс. кв. км, в которых проходил заключительный этап всероссийской олимпиады школьников по географии`* раскладывается на 2 подзапроса:\n\n-   **ДИАПАЗОН** (single-scan): выбрать регионы с площадью более $100$ тыс. кв. км\n\n-   **ПРОСТРАНСТВЕННОЕ СОЕДИНЕНИЕ** (multi-scan): выбрать регионы, в которых находятся города проведения заключительного этапа\n\n::: callout-note\n## Последовательность\n\nПоследовательность не очевидна, т.к. вычисление площади --- ресурсоемкая операция. Порядок выполнения пространственных запросов требует тщательного анализа.\n:::\n\n## Добыча данных\n\n**Базы *\\[пространственных\\]* данных** --- источник информации, который требует особого подхода в силу потенциального объема информации и способов взаимодействия с нею.\n\n1.  Алгоритмы для больших данных, или решения, позволяющие совмещать аналитику данных и технологии обработки больших массивов информации.\n2.  Расширение функциональности языка запросов --- возможность выполнять пространственную аналитику данных \"на лету\".\n\n::: callout-note\n## Пример\n\nПространственно-временные базы данных абонентов сотовой сети могут содержать терабайты информации. Как сделать равномерную случайную выборку?\n:::\n\n## Граница и замыкание\n\nГраничная точка\n\n:   Точка, в любой окрестности которой находятся как принадлежащие, так и не принадлежащие множеству точки\n\nГраница множества $\\partial A$\n\n:   Совокупность граничных точек множества\n\nЗамыкание множества $\\overline A$\n\n:   Объединение множества и его границы: $\\overline A = A \\cup \\partial A$\n\nДополнение множества $A^-$, вложенного в $\\mathbb R^n$ ($A \\subset \\mathbb R^n$)\n\n:   Множество всех точек $\\mathbb R^n$, не являющихся элементами множества: $A^- = \\mathbb R^n \\backslash A$\n\nВнутренность множества ($A^{\\circ}$)\n\n:   Объединение всех открытых подмножеств множества: $A^\\circ = \\mathbb R^n \\backslash \\overline{A^-}$\n\n## Топологическая граница\n\n![](images/topological_boundary.svg){width=\"100%\"}\n\n## Симплекс\n\nСимплекс $\\Delta^n$\n\n:   Геометрическая фигура, являющаяся $n$-мерным обобщением треугольника\n\nОстов симплекса\n\n:   Множество его вершин\n\nГрань симплекса размерности $s$\n\n:   $s$-мерный симплекс, остов которого является подмножеством остова $\\Delta^n$.\\\n    *Ребро* --- это грань размерности $1$.\n\n![](images/simplices.svg){width=\"100%\"}\n\n## Комплекс\n\n::: columns\n::: {.column width=\"30%\"}\n![](images/complex.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"70%\"}\n\nСимплициальный комплекс $\\mathcal K$\n\n:   Множество симплексов, удовлетворяющее условиям:\n\n    1.  Все грани каждого симплекса из $\\mathcal K$ также принадлежат $\\mathcal K$\n    2.  Непустое пересечение двух симплексов $\\sigma_1, \\sigma_2 \\in \\mathcal K$ является гранью как $\\sigma_1$, так и $\\sigma_2$.\n\nСимплициальный $n$-комплекс $\\mathcal K$\n\n:   $\\mathcal K$, в котором наибольшее измерение какого-либо симлекса равно $n$\n\nТриангуляция\n\n:   Разбиение геометрического объекта на симплексы\n:::\n:::\n\n## Комбинаторная граница\n\nКомбинаторная граница $\\partial \\mathcal K$ $n$-комплекса $\\mathcal K$\n\n:   Множество $(n-1)$-симплексов $\\mathcal K$, каждый из которых входит в состав только одного $n$-симплекса $\\mathcal K$ вместе со своими гранями.\n\n![](images/combinatorial_solo.svg){width=\"60%\"}\n\n## Граница Simple Features\n\nЗамыкание комбинаторной границы *данного* объекта\n\n![](images/combinatorial_boundary.svg){width=\"100%\"}\n\n## Векторная модель\n\n**Simple Features** --- стандарт @OGC2010, который определяет общую модель хранения и доступа к простым (векторным) объектам.\n\n-   все геометрии состоят из точек;\n-   все точки в геометрии имеют одинаковую размерность;\n-   размерность точек может быть 2, 3 или 4.\n\nВ дополнение к обязательным измерениям $X$ и $Y$ *возможны*:\n\n-   $Z$, обозначающее высоту\n-   $M$, обозначающее некоторую меру --- например, время\n\nСуществует 4 варианта координат: $XY$, $XYZ$, $XYM$ и $XYZM$.\n\nВ географических координатах $X$ --- долгота, $Y$ --- широта.\n\n## Векторная модель\n\n![](images/sf_hierarchy.svg){width=\"100%\"}\n\nМодель *Simple Features* представляет собой иерархию классов, между которыми существуют отношения **наследования** (**△**) и **коллекции** (**♢**).\n\n## Geometry\n\nВсе объекты типа *Simple Features* наследуют свойства от базового класса **`GEOMETRY`**. Механизм этого наследования основан на следующих принципах:\n\n1.  **`GEOMETRY`** представляет собой *абстрактный* класс, т.е. вы не можете создать экземпляр этого класса.\n\n2.  Все подклассы геометрий являются замыканиями, т.е. включают границу в множество точек.\n\n3.  На уровне класса **`GEOMETRY`** определен интерфейс --- набор методов, которые позволяют получить информацию об объекте.\n\n4.  Реализация интерфейса зависит от конкретного класса.\n\n5.  С каждым классом геометрии ассоциированы системы отсчета, которые определяют пространственные ($XYZ$) и дополнительные ($M$) измерения.\n\n## Интерфейс класса `GEOMETRY`\n\n| Метод            | Описание                                                                                                                                                                             |\n|--------------------|----------------------------------------------------|\n| `Dimension()`    | Пространственная размерность *данного* геометрического объекта. Меньше или равна размерности координат. Для гетерогенных коллекций --- максимальная размерность содержимых объектов. |\n| `GeometryType()` | Имя подтипа класса `GEOMETRY`, экземпляром которого является *данный* объект.                                                                                                        |\n| `SRID()`         | Идентификатор пространственной системы отсчета (SRS) данного объекта. Как правило, является внешним ключом к таблице систем отсчета.                                                 |\n\n## Интерфейс класса `GEOMETRY`\n\n| Метод        | Описание                                                                                                                                                                                                                                                                                                      |\n|-------------------|-----------------------------------------------------|\n| `Envelope()` | Минимальный ограничивающий прямоугольник данного объекта, параллельный осям координат. Полигон, определяемый углами $(X_{min}, Y_{min})$, $(X_{min}, Y_{max})$, $(X_{max}, Y_{max})$, $(X_{max}, Y_{min})$, $(X_{min}, Y_{min})$. При этом в фактических реализациях достаточно указать минимумы и максимумы. |\n| `AsText()`   | Экспортирует данный геометрический объект в конкретное представление вида *Well-Known Text (WKB)*                                                                                                                                                                                                             |\n| `AsBinary()` | Экспортирует данный геометрический объект в конкретное представление вида *Well-Known Binary (WKB)*                                                                                                                                                                                                           |\n\n## Интерфейс класса `GEOMETRY`\n\n| Метод        | Описание                                                                                                                                                                                          |\n|-------------------|-----------------------------------------------------|\n| `IsEmpty()`  | Возвращает `TRUE` ($1$), если *данный* геометрический объект пуст, т.е. представляет пустое множество точек $\\emptyset$ в координатном пространстве; возвращает `FALSE` ($0$) в противном случае. |\n| `IsSimple()` | Возвращает `TRUE` ($1$), если *данный* геометрический объект не содержит аномальных точек, таких как самопересечения и самокасания; возвращает `FALSE` ($0$) в противном случае.                  |\n\n## Интерфейс класса `GEOMETRY`\n\n| Метод          | Описание                                                            |\n|--------------------|----------------------------------------------------|\n| `Is3D()`       | Возвращает `TRUE` ($1$), если *данный* объект имеет координаты $Z$. |\n| `IsMeasured()` | Возвращает `TRUE` ($1$), если *данный* объект имеет координаты $M$. |\n| `Boundary()`   | Возвращает *замыкание* комбинаторной границы *данного* объекта      |\n\n::: callout-important\n## Важно\n\nНазвания методов в программных реализациях Simple Features могут отличаться от предлагаемых в стандарте. Однако наличие соответствующих методов является условием реализации стандарта.\n:::\n\n## Дополнительные измерения\n\n1.  Стандартные геометрические операции и топологические предикаты *игнорируют* дополнительные измерения $ZM$.\n\n2.  Не существует ограничений на координату $M$ --- она, в частности, не обязана непрерывно возрастать вдоль объекта `LINESTRING`.\n\n3.  Интерфейс объектов с $M$-геометрией содержит дополнительные методы `LocateAlong()` и `LocateBetween()`.\n\n| Метод                   | Назначение                                                                                |\n|----------------------|--------------------------------------------------|\n| `LocateAlong(m)`        | Возвращает производную геометрическую коллекцию, которая соответствует `m`                |\n| `LocateBetween(m1, m2)` | Возвращает производную геометрическую коллекцию, которая соответствует отрезку `[m1, m2]` |\n\n## Дополнительные измерения\n\nЗапрос измерения мультиточечного объекта:\n\n**`p:`** `MULTIPOINT M(0 0 4, 2 1 1, 3 1 2, 4 2 4, 5 3 5, 7 2 7)`\n\n**`p.LocateAlong(4):`** `MULTIPOINT M(0 0 4, 3 1 4)`\n\n**`p.LocateBetween(2,4):`** `MULTIPOINT M(0 0 4, 2 1 2, 3 1 4)`\n\n**`p.LocateAlong(3):`** `POINT M()` --- *пустой* объект\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-7-7.png){width=960}\n:::\n:::\n\n\n## Дополнительные измерения\n\nЗапрос измерения линейного объекта :\n\n**`l:`** `MULTILINESTRING M((0 0 4, 2 1 1, 3 1 2), (4 2 4, 5 3 6))`\n\n**`l.LocateAlong(3):`** `MULTIPOINT M(1.3 0.7 3)`\n\n**`l.LocateBetween(2,5):`** `GEOMETRYCOLLECTION M(LINESTRING M(0 0 4,1.33 0.67 2),POINT M(3 1 2),LINESTRING M(4 2 4,4.5 2.5 5))`\n\n**`l.LocateAlong(0.5):`** `POINT M()` --- *пустой* объект\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-8-9.png){width=960}\n:::\n:::\n\n\n## Геометрическая коллекция\n\n`GEOMETRYCOLLECTION` --- коллекция геометрических элементов\n\n-   Единственное ограничение: все элементы коллекции должны иметь единую пространственную систему отсчета.\n\n-   Подклассы могут накладывать дополнительные ограничения.\n\n-   Порядок элементов коллекции не имеет значения.\n\n-   Интерфейс должен поддерживать методы `NumGeometries()` и `GeometryN()`\n\n| Метод             | Назначение                                                          |\n|----------------------|--------------------------------------------------|\n| `NumGeometries()` | Возвращает количество геометрий в *данной* геометрической коллекции |\n| `GeometryN(n)`    | Возвращает $n$-ную геометрию в данной геометрической коллекции      |\n\n## Точка (`POINT`)\n\n::: columns\n::: {.column width=\"50%\"}\n`POINT` --- $0$-мерный геометрический объект, единичное местоположение\n\nГраница `POINT` --- пустое множество: $\\partial A = \\varnothing$\n\nИнтерфейс точки должен поддерживать возвращение ее координат:\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-9-11.png){width=800px}\n:::\n:::\n\n:::\n:::\n\n| Метод | Назначение                                                           |\n|--------------|----------------------------------------------------------|\n| `X()` | Координата $x$ *данного* объекта `POINT`                             |\n| `Y()` | Координата $y$ *данного* объекта `POINT`                             |\n| `Z()` | Координата $z$ *данного* объекта `POINT`, или `NULL` если не задано. |\n| `M()` | Координата $m$ *данного* объекта `POINT`, или `NULL` если не задано. |\n\n## Мультиточка (`MULTIPOINT`)\n\n`MULTIPOINT` --- $0$-мерная геометрическая коллекция объектов класса `POINT`.\n\n::: columns\n::: {.column width=\"70%\"}\n-   Элементы коллекции не связаны и не имеют какого-либо смыслового упорядочения (наследуется свойство `GEOMETRYCOLLECTION` ).\n\n-   Граница `MULTIPOINT` --- пустое множество: $\\partial A = \\varnothing$.\n\n-   Объект `MULTIPOINT` является простым, если ни одна пара `POINT` в его коллекции не совпадает.\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_01_Features_files/figure-revealjs/unnamed-chunk-10-13.png){width=400px height=200px}\n:::\n:::\n\n:::\n:::\n\n\n```{mermaid}\n%%| fig-width: 9\nflowchart LR\n  A(MULTIPOINT) -->|\"GeometryN( 0 )\"| B(POINT)\n  B -->|\"X( )\"| C(X)\n  B -->|\"Y( )\"| D(Y)\n```\n\n\n## Кривая (`CURVE`)\n\n`CURVE` --- одномерный геометрический объект, хранимый в виде последовательности точек.\n\n::: columns\n::: {.column width=\"30%\"}\n![](images/curve.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"70%\"}\nКривая определяется как непрерывное отображение отрезка в пространство:\n\n$$f: [a, b] \\rightarrow R^n$$\n\n-   Это абстрактный класс, вы не можете создать объект `CURVE`.\n\n-   Интерполяция между точками определяется конкретным подклассом `CURVE`.\n\n-   Стандарт определяет только подкласс `LINESTRING`, в котором используется линейная интерполяция.\n:::\n:::\n\n## Кривая (`CURVE`)\n\n-   Кривая является *простой*, если она не проходит дважды через одну и ту же точку, за исключением начальной и конечной точки:\n\n$$\n\\texttt{f.IsSimple()} \\Leftrightarrow \\boxed{f(t_1)=f(t_2) \\land t_1 \\neq t_2 \\color{red}{\\Rightarrow} t_1 = a \\land t_2 = b}  \n$$\n\n-   Кривая является замкнутой, если ее начальная точка равна конечной точке:\n\n    $$\n    \\texttt{f.IsClosed()} \\Leftrightarrow \\boxed{f(a)=f(b)}  \n    $$\n\n-   Граница замкнутой кривой является пустым множеством:\n\n    $$\n    \\texttt{f.IsClosed()} \\Leftrightarrow \\boxed{\\partial f=\\varnothing}  \n    $$\n\n## Кривая (`CURVE`)\n\n-   Граница незамкнутой кривой содержит ее конечные точки:\n\n    $$\n    \\texttt{!f.IsClosed()} \\Leftrightarrow \\boxed{\\partial f=\\{f(a), f(b)\\}} \n    $$\n\n-   Простая и замкнутая кривая является *кольцом* (`RING`).\n\n-   Интерфейс объекта `CURVE` включает следующие методы:\n\n| Метод          | Назначение                                               |\n|----------------|-------------------------------------------------------|\n| `Length()`     | Длина данного объекта `CURVE` в ассоциированной СК       |\n| `StartPoint()` | Начальная точка данного объекта `CURVE`                  |\n| `EndPoint()`   | Конечная точка данного объекта `CURVE`                   |\n| `IsClosed()`   | `TRUE`, если `StartPoint() == EndPoint()`                |\n| `IsRing()`     | `TRUE`, если `IsSimple()` и `StartPoint() == EndPoint()` |\n\n## Библиография\n",
    "supporting": [
      "adv_01_Features_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}