{
  "hash": "d110166ac5d4fa4ae07986c759edb6c3",
  "result": {
    "markdown": "---\ntitle: Введение\nsubtitle: Геоинформатика I. Базы пространственных данных\ndate: 02/10/2023\ndate-format: long\nauthor: Самсонов Тимофей Евгеньевич\nexecute:\n  echo: false\n  freeze: true\nengine: jupyter\nformat:\n  revealjs:\n    theme:\n      - default\n      - custom.scss\n    margin: 0.2\n    slide-number: true\n    footer: 'Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ'\n    header-includes: '<link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>'\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n## Геоинформатика\n\n![](images/semesters.png)\n\n## База пространственных данных\n\nБаза пространственных данных [@gost:52438-2005]\n\n:   Совокупность пространственных данных, организованных по определенным правилам, устанавливающим общие принципы описания, хранения и манипулирования данными, предназначенная для удовлетворения информационных потребностей пользователя.\n\n::: callout-warning\n## Жаргон\n\nНе рекомендуются к использованию словосочетания: база геоданных, пространственная база данных, база данных ГИС\n:::\n\n## Пространственный объект\n\nПространственный объект [@gost:52438-2005]\n\n:   Цифровая модель материального или абстрактного объекта реального или виртуального мира с указанием его идентификатора, координатных и атрибутивных данных.\n\n![](images/feature.svg){fig-align=\"center\" width=\"100%\"}\n\n## Эволюция моделей СУБД\n\n\n```{mermaid}\n%%| fig-width: 11\nflowchart TB\n  A(Файловые) --> B(Сетевые)\n  A --> C(Иерархические)\n  C --> D(Реляционные / РСУБД)\n  B --> D\n  E(Объектно-ориентированные / ООСУБД) --> F(Объектно-Реляционные / ОРСУБД)\n  D --> F\n```\n\n\n## Пространственные данные в РСУБД\n\n\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {#35238c88 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](adv_01_Features_files/figure-revealjs/cell-3-output-1.png){width=366 height=411}\n:::\n:::\n\n\nПредставление в обычной РСУБД достаточно громоздко\n:::\n\n::: {.column width=\"60%\"}\n| Name  | Area | Price  | BoundaryID |\n|-------|------|--------|------------|\n| Уч. 2 | 37.0 | 560000 | 1055       |\n\n: Parcels\n\n| BoundaryID | Edge |\n|------------|------|\n| 1055       | A    |\n| 1055       | B    |\n| 1055       | C    |\n| 1055       | D    |\n| 1055       | E    |\n\n: Polygons\n:::\n:::\n\n## Пространственные данные в РСУБД\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#9b82662e .cell execution_count=3}\n\n::: {.cell-output .cell-output-display}\n![](adv_01_Features_files/figure-revealjs/cell-4-output-1.png){width=366 height=411}\n:::\n:::\n\n\nПредставление в обычной РСУБД достаточно громоздко\n:::\n\n::: {.column width=\"25%\"}\n| Edge | Point |\n|------|-------|\n| A    | 1     |\n| A    | 2     |\n| B    | 2     |\n| B    | 3     |\n| C    | 3     |\n| C    | 4     |\n| D    | 4     |\n| D    | 5     |\n| E    | 5     |\n| E    | 1     |\n\n: Edges\n:::\n\n::: {.column width=\"25%\"}\n| Point | X   | Y   |\n|-------|-----|-----|\n| 1     | 5   | 0   |\n| 2     | 0   | 5   |\n| 3     | 3   | 9   |\n| 4     | 8   | 8   |\n| 5     | 6   | 4   |\n\n: Points\n:::\n:::\n\n## Пространственные данные в РСУБД\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {#1eea6c0d .cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](adv_01_Features_files/figure-revealjs/cell-5-output-1.png){width=366 height=411}\n:::\n:::\n\n\nПредставление в обычной РСУБД достаточно громоздко\n:::\n\n::: {.column width=\"50%\"}\n\n```{mermaid}\n%%| fig-width: 2\nflowchart TB\n  A(Parcels) --> B(Polygons)\n  B --> C(Edges)\n  C --> D(Points)\n```\n\n:::\n:::\n\n## Абстрактные типы данных\n\nВажным наследием объектно-ориентированных систем является поддержка абстрактных типов данных.\n\n::: columns\n::: {.column width=\"45%\"}\n*Примитивные типы данных* составляют основу реляционных БД. ![](images/elementary_types.svg){width=\"90%\"}\n:::\n\n::: {.column width=\"55%\"}\n*Абстрактные типы данных (АТД)* обеспечивают хранение коллекций и объектов со свойствами. ![](images/abstract_types.svg){width=\"100%\"}\n:::\n:::\n\nБольшинство ОРСУБД предлагают модульный подход к АТД, позволяя добавлять и удалять их.\n\n## Пространственная СУБД\n\nАбстрактные типы данных открывают возможность для реализации возможностей пространственных СУБД. ПСУБД должна отвечать следующим требованиям:\n\n1.  Представляет собой программный модуль, взаимодействующий с нижестоящей СУБД или являющийся ее компонентой\n2.  Поддерживает множественные модели пространственных данных, соответствующие им абстрактные типы данных, а также язык запросов, из которого эти типы могут быть вызваны.\n3.  Реализует пространственное индексирование, эффективные алгоритмы пространственных операций и специальные правила оптимизации запросов.\n\n## Пространственная СУБД\n\nОснову функционирования ПСУБД составляют следующие аспекты:\n\n1.  Модели пространственных данных и пространственных отношений.\n2.  Язык запросов\n3.  Обработка и оптимизация запросов\n4.  Организация файлового хранилища\n5.  Выполнение аналитических операций (добыча данных).\n\n## Модели пространственных данных\n\n![](images/basic_primitives.svg){width=\"100%\"}\n\nАбстрактные типы данных в ПСУБД реализуют различные модели пространственных данных\n\n## Пространственные отношения\n\n![](images/sp_relations.svg){width=\"100%\"}\n\nПространственные запросы в ПСУБД опираются на модели пространственных отношений\n\n## Язык запросов\n\n**Structured Query Language (SQL)** --- язык структурированных запросов. Применяется для создания, модификации и управления данными в реляционной базе данных.\n\nПространственная СУБД поддерживает создание и манипулирование пространственными типами данных:\n\n``` small\nSELECT 'SRID=4326;POINT(-123 34)'::geography\n\"0101000020E61000000000000000C05EC00000000000004140\"\n\nCREATE TABLE geotable(gid serial PRIMARY KEY, name TEXT, geom geography(POINT) );\n\nINSERT INTO geotable ( name, geom )\n  VALUES ( ST_GeomFromEWKT('SRID=312;POINTM(-126.4 45.32 15)'), 'A Place' )\n```\n\n## Пространственные расширения SQL\n\n``` small\nSELECT\n  m.name,\n  SUM(ST_Length(r.geom))/1000 as roads_km\nFROM bc_roads AS r\nJOIN bc_municipality AS m\n  ON ST_Contains(m.geom, r.geom)\nGROUP BY m.name\nORDER BY roads_km;\n\nname                        | roads_km\n----------------------------+------------------\nSURREY                      | 1539.47553551242\nVANCOUVER                   | 1450.33093486576\nLANGLEY DISTRICT            | 833.793392535662\nBURNABY                     | 773.769091404338\nPRINCE GEORGE               | 694.37554369147\n...\n```\n\n## Обработка запросов\n\n![](images/query_plan.svg){width=\"100%\"}\n\n-   SQL --- декларативный язык. Он описывает *что* необходимо получить, но не *как*, т.е. не сам алгоритм выполнения процедуры.\n\n-   СУБД должна самостоятельно определить план эффективного выполнения запроса.\n\n-   Обработка запроса представляет собой последовательность шагов, которую инициирует СУБД для выполнения запроса.\n\n-   Оптимизация пространственных запросов обладает своей спецификой\n\n## Обработка запросов\n\n``` small\nSELECT\nFROM reltypes R, soiltypes S\nWHERE st_area(S.geom) < 10000 AND st_area(R.geom) < 10000\nAND st_intersects(R.geom, s.geom)\n```\n\n![](images/filter_refine.svg){width=\"100%\"}\n\nПространственный запрос состоит из фильтрации (`FILTER`) на основе MBR и уточнения (`REFINE`) по реальной геометрии.\n\n## Хранение данных\n\nДанные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу\n\n![](images/ordering_comp1.svg){width=\"100%\"}\n\n## Хранение данных\n\nДанные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу\n\n![](images/ordering_comp2.svg){width=\"100%\"}\n\n## Оптимизация запросов\n\n**Непространственный запрос** *`Выбери всех абитуриентов женского пола, которые являются призерами всероссийской олимпиады по географии`* раскладывается на 2 подзапроса:\n\n-   **ПРОЕКЦИЯ** (single-scan): выбрать всех абитуриентов женского пола\n\n-   **СОЕДИНЕНИЕ** (multi-scan): сопоставить таблицу призеров и таблицу абитуриентов\n\n::: callout-note\n## Последовательность\n\nСначала должен быть выполнен запрос проекции, т.к. соединение является более ресурсоемкой многопроходной (*multiscan*) операцией\n:::\n\n## Оптимизация запросов\n\n**Пространственный запрос** *`Выбери все регионы с площадью более 100 тыс. кв. км, в которых проходил заключительный этап всероссийской олимпиады школьников по географии`* раскладывается на 2 подзапроса:\n\n-   **ДИАПАЗОН** (single-scan): выбрать регионы с площадью более $100$ тыс. кв. км\n\n-   **ПРОСТРАНСТВЕННОЕ СОЕДИНЕНИЕ** (multi-scan): выбрать регионы, в которых находятся города проведения заключительного этапа\n\n::: callout-note\n## Последовательность\n\nПоследовательность не очевидна, т.к. вычисление площади --- ресурсоемкая операция. Порядок выполнения пространственных запросов требует тщательного анализа.\n:::\n\n## Добыча данных\n\n**Базы *\\[пространственных\\]* данных** --- источник информации, который требует особого подхода в силу потенциального объема информации и способов взаимодействия с нею.\n\n1.  Алгоритмы, которые способны работать с большими данными, или решения, позволяющие совмещать аналитику данных и технологии обработки больших массивов информации.\n2.  Расширение функциональности языка запросов таким образом чтобы появилась возможность выполнять пространственную аналитику данных \"на лету\".\n\n::: callout-note\n## Пример\n\nПространственно-временные базы данных абонентов сотовой сети могут содержать терабайты информации. Как сделать равномерную случайную выборку?\n:::\n\n## Векторная модель\n\n**Simple Features** --- стандарт @OGC2010, который определяет общую модель хранения и доступа к простым (векторным) объектам.\n\n-   все геометрии состоят из точек;\n-   все точки в геометрии имеют одинаковую размерность;\n-   размерность точек может быть 2, 3 или 4.\n\nВ дополнение к обязательным измерениям $X$ и $Y$ *возможны*:\n\n-   $Z$, обозначающее высоту\n-   $M$, обозначающее некоторую меру --- например, время\n\nСуществует 4 варианта координат: $XY$, $XYZ$, $XYM$ и $XYZM$.\n\nВ географических координатах $X$ --- долгота, $Y$ --- широта.\n\n## Векторная модель\n\n![](images/sf_hierarchy.svg){width=\"100%\"}\n\n## Векторная модель\n\nСтандарт включает в себя **17 моделей пространственных объектов**.\n\n::: columns\n::: {.column width=\"50%\"}\nОсновными являются 7 моделей:\n\n-   **Линейно связные**: `POINT`, `LINESTRING`, `POLYGON`\n-   **Линейно несвязные**: `MULTIPOINT`, `MULTIPOINT`, `MULTIPOLYGON`, `GEOMETRYCOLLECTION`\n:::\n\n::: {.column width=\"50%\"}\n::: callout-note\n## Линейная связность\n\nЛинейно связным называется пространство, в котором любые две точки можно соединить непрерывной кривой.\n\n![](images/connect.svg){width=\"60%\"}\n:::\n:::\n:::\n\nОставшиеся виды моделей включают: `CIRCULARSTRING`, `COMPOUNDCURVE`, `CURVEPOLYGON`, `MULTICURVE`, `MULTISURFACE`, `CURVE`, `SURFACE`, `POLYHEDRALSURFACE`, `TIN`, `TRIANGLE`.\n\n## Векторная модель\n\n![](images/simple_features.svg){width=\"100%\"}\n\n## Векторная модель\n\n**Линейно связные** модели пространственных объектов.\n\n| Тип          | Описание                                                                                                                                                                                                                                         |\n|------------------------|------------------------------------------------|\n| `POINT`      | нуль-мерная геометрия, содержащая одну точку                                                                                                                                                                                                     |\n| `LINESTRING` | последовательность точек, соединенных прямыми, несамопересекающимися отрезками; одномерная геометрия                                                                                                                                             |\n| `POLYGON`    | геометрия с положительной площадью (двумерная); последовательность точек, отрезки между которыми формируют замкнутое кольцо без самопересечений; первое кольцо является внешним, ноль и более остальных колец представляют дырки внутри полигона |\n\n## Векторная модель\n\n**Линейно несвязные** модели пространственных объектов.\n\n| Тип                  | Описание                                                                                                              |\n|------------------------|------------------------------------------------|\n| `MULTIPOINT`         | множество точек; геометрия типа `MULTIPOINT` называется *простой* если ни одна пара точек в `MULTIPOINT` не совпадает |\n| `MULTILINESTRING`    | множество линий                                                                                                       |\n| `MULTIPOLYGON`       | множество полигонов                                                                                                   |\n| `GEOMETRYCOLLECTION` | множество геометрий произвольного типа за исключением `GEOMETRYCOLLECTION`                                            |\n\n## Хранение координат\n\n\n```{r}\nlibrary(sf)\np = st_point(c(0.5,0.5))\n\npc = rbind(c(0.5,0.5), c(1, 3), c(2, 1), c(0.2, 2), c(2, 3), c(1.5, 1.5))\nmp = st_multipoint(pc)\n\ns1 = rbind(c(0,1),c(0.5,1.5),c(1.2,1.2),c(2,1.3),c(3,2))\nls = st_linestring(s1)\n\ns1 = rbind(c(0.5,1.5),c(1.2,1.2),c(2,1.3))\ns2 = rbind(c(0,1.5),c(0.5,2.0),c(1.2,1.7))\ns3 = rbind(c(2,1.8),c(3,2.5))\nmls = st_multilinestring(list(s1,s2,s3))\n\np1 = rbind(c(0.5,0.5), c(2,0), c(3,2), c(1.5,4), c(0,3), c(0.5,0.5))\np2 = rbind(c(1,1), c(0.8,2), c(2,2.2), c(1.4,1.1), c(1,1))\npol = st_polygon(list(p1, p2))\np3 = rbind(c(3,3.3), c(3.5, 3.1), c(4,3), c(4,3.7), c(3.7, 3.96), c(3.2,4), c(3,3.3))\np4 = rbind(c(3.2,3.4), c(3.8,3.2), c(3.8,3.7), c(3.3,3.8), c(3.2,3.4))\np5 = rbind(c(3,1.2), c(2.5,0.2), c(3.5,0.2), c(3.5,1.2), c(3,1.2))\np6 = rbind(c(0,1), c(0.1,0.8), c(0.2,0.5), c(0.1,0.3), c(0, 0.7), c(0,1))\nmpol = st_multipolygon(list(list(p1,p2), list(p3,p4), list(p5), list(p6)))\n\ngc = st_geometrycollection(list(pol, mp + c(3, -1), mls + c(2.5,2)))\n```\n\n\n**Well-Known Text (WKT)** --- текстовый формат\n\n\n```{r}\ncat(st_as_text(p))\ncat(st_as_text(ls))\ncat(st_as_text(pol))\ncat(st_as_text(mp))\ncat(st_as_text(mls))\n# cat(st_as_text(mpol))\n# cat(st_as_text(gc))\n```\n\n\n::: callout-note\n## Назначение\n\nФормат **WKT** используется в текстовых форматах файлов, а также для визуального анализа координат объектов. Он занимает много места в памяти компьютера и медленно читается/записывается программами.\n:::\n\n## Хранение координат\n\n**Well-Known Binary (WKB)** --- бинарный формат\n\n\n```{r}\ncat('POINT:', st_as_binary(p))\ncat('LINESTRING:', st_as_binary(ls))\n# cat('POLYGON:', st_as_binary(pol))\n# cat(st_as_binary(mp))\n# cat(st_as_binary(mls))\n# cat(st_as_binary(mpol))\n# cat(st_as_binary(gc))\n```\n\n\n::: callout-note\n## Назначение\n\nФормат **WKB** используется в бинарных форматах файлов, в том числе а базах данных. Он занимает мало места в памяти компьютера и быстро читается/записывается программами, но не подходит для визуального анализа.\n:::\n\n## Особенности векторной модели\n\n1.  Используется для реализации объектно-ориентированной концептуальной модели.\n2.  Основана на генерализации. Физическое или абстрактное тело представляется в виде конечного множества координат.\n3.  В зависимости от уровня детализации один и тот же объект может представляться с помощью разной модели.\n4.  Значения атрибутов в пределах границ каждого объекта предполагаются постоянными.\n\n::: callout-warning\n## Ограничение\n\nВекторная модель не годится для представления *географических полей*.\n:::\n\n## Библиография\n\n",
    "supporting": [
      "adv_01_Features_files"
    ],
    "filters": [],
    "includes": {}
  }
}