{
  "hash": "c9151d8501646b17ce31e827ce7c9ca2",
  "result": {
    "markdown": "---\ntitle: \"Сетевой анализ\"\nsubtitle: \"Основы геоинформатики: лекция 10\"\ndate: 04/21/2023\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  message: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom_small.scss]\n    margin: 0.2\n    slide-number: true\n    footer: \"Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Географические сети\n\nСетевые формы структурной организации явлений играют большую роль в географическое среде\n\n![](images/net_examples.svg){width=\"100%\"}\n\nДля моделирования таких структур используется *теория графов*.\n\n## Граф\n\nПростой граф $G(V,E)$ --- совокупность множества вершин $V = \\{v_1, v_2, ...\\}$ и множества ребер $E$ [@newman2018].\n\n::: columns\n::: {.column width=\"50%\"}\n-   $E$ состоит из упорядоченных пар элементов множества вершин:\n\n    $$\n    e_{ij} = \\{v_i, v_j \\},~ i \\neq j\n    $$\n\n-   $V$ не пусто;\n\n-   $E$ может быть пустым;\n\n-   не все комбинации $\\{v_i, v_j \\}$ могут входить в $E$.\n:::\n\n::: {.column width=\"50%\"}\n![](images/graph.svg){width=\"100%\"}\n:::\n:::\n\n## Матрица смежности\n\nПредставление ребер в виде матрицы $A = \\{a_{ij}\\}$, где $a_{ij} = 1$, если существует ребро $e_{ij}$, и $a_{ij} = 0$, если такого ребра нет.\n\n::: columns\n::: {.column width=\"45%\"}\n![](images/adj_1.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"55%\"}\n$$\n\\begin{bmatrix}\n0 & 0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} & 0 & 0 \\\\\n0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & \\color{blue}{\\mathbf 1} \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\\end{bmatrix}\n$$\n:::\n:::\n\n## Матрица смежности\n\nПредставление ребер в виде матрицы $A = \\{a_{ij}\\}$, где $a_{ij} = 1$, если существует ребро $e_{ij}$, и $a_{ij} = 0$, если такого ребра нет.\n\n::: columns\n::: {.column width=\"45%\"}\n![](images/adj_2.svg){width=\"100%\"}\n:::\n\n::: {.column width=\"55%\"}\n$$\n\\begin{bmatrix}\n0 & 0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & 0 & 0 \\\\\n0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & 0 & 0 & 0 \\\\\n0 & 0 & \\color{red}{\\mathbf 1} & \\color{red}{\\mathbf 1} & 0 & 0 & \\color{red}{\\mathbf 1} & 0 \\\\\n\\color{red}{\\mathbf 1} & \\color{red}{\\mathbf 1} & 0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & 0 \\\\\n0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & \\color{red}{\\mathbf 1} & 0 & \\color{red}{\\mathbf 1} \\\\\n0 & 0 & 0 & 0 & 0 & 0 & \\color{red}{\\mathbf 1} & 0 \\\\\n\\end{bmatrix}\n$$\n:::\n:::\n\n## Топологическая эквивалентность\n\n**Топологически эквивалентными** являются графы, у которых совпадают матрицы смежности [@barthelemy:2022].\n\n![](images/two_graphs_raw.svg){width=\"100%\"}\n\n::: callout-note\n## Географические сети\n\nГеографические сети отличаются тем, что для них важную роль играет не только топологическая эквивалентность, но также местоположение (координаты) вершин.\n:::\n\n## Топологическая эквивалентность\n\n**Топологически эквивалентными** являются графы, у которых совпадают матрицы смежности [@barthelemy:2022].\n\n![](images/two_graphs.svg){width=\"100%\"}\n\n::: callout-note\n## Географические сети\n\nГеографические сети отличаются тем, что для них важную роль играет не только топологическая эквивалентность, но также местоположение (координаты) вершин.\n:::\n\n## Задачи\n\n**Основные направления** сетевого анализа:\n\n1.  **Решение задач на графах** --- построение маршрутов, изохрон, матриц корреспонденций, определение ближайших пунктов обслуживания и оптимизация их расстановки.\n2.  **Структурный анализ** --- вычисление показателей, характеризующих топологию сети, значимость ее отдельных элементов\n3.  **Динамика** **и** **эволюция** географических сетей\n4.  **Надежность, устойчивость и уязвимость** географических сетей.\n\n## Решение задач на графах\n\n::: columns\n::: {.column width=\"50%\"}\nНеобходимо на основе векторных данных создать графовую (сетевую) модель, состоящую из вершин и ребер\n\n::: callout-important\n## Важно\n\nДля того чтобы граф построился корректно, линии должны быть аккуратно пристыкованы друг к другу в местах сочленений. В противном случае в местах их стыковки не будут созданы вершины графа.\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='left' width=768}\n:::\n:::\n\n:::\n:::\n\n## Кратчайший маршрут\n\nВыполняется поиск последовательности ребер графа, которая дает минимальную стоимость передвижения между точками.\n\n::: columns\n::: {.column width=\"45%\"}\n::: callout-note\n## Особенности\n\n-   стоимость одного ребра графа обычно выражается в времени передвижения по нему, либо его длине;\n\n-   стоимость может быть масштабирована на коэффициент значимости ребра;\n\n-   дополнительные задержки могут быть заложены в вершинах графа;\n\n-   может учитываться трафик движения.\n:::\n:::\n\n::: {.column width=\"55%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='left' width=768}\n:::\n:::\n\n:::\n:::\n\n## Задача коммивояжёра\n\n::: columns\n::: {.column width=\"40%\"}\n**Задача коммивояжера** --- определение оптимального маршрута объезда заданного множества точек\n\n::: callout-note\n## Использование\n\nОдна из самых распространенных задач в логистике. Решается в целях оптимизации объезда клиентов, складов и т.д. Вычислительно является сложной задачей.\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Ближайший пункт обслуживания\n\n::: columns\n::: {.column width=\"40%\"}\nЗадача данного класса позволяет находить для каждой точки клиента ближайший к ней пункт обслуживания\n\n::: callout-tip\n## Пример\n\nДля каждого заведения общепита найти ближайшее по времени отделение Сбербанка **для пешехода**\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Ближайший пункт обслуживания\n\n::: columns\n::: {.column width=\"40%\"}\nЗадача данного класса позволяет находить для каждой точки клиента ближайший к ней пункт обслуживания\n\n::: callout-tip\n## Пример\n\nДля каждого заведения общепита найти ближайшее по времени отделение Сбербанка **для автомобилиста**\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Изохроны\n\n::: columns\n::: {.column width=\"40%\"}\n**Изохрона** --- это линия постоянного времени движения от или до заданной точки.\n\n::: callout-note\n## Алгоритм построения\n\n1.  В каждой вершине графа вычислить время движения от/до указанной точки.\n2.  Собрать из вершин триангуляционное покрытие --- поверхность времени движения.\n3.  Извлечь из покрытия изолинии для заданных значений.\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Анализ структуры\n\n::: columns\n::: {.column width=\"50%\"}\n**Анализ структуры** географической сети охарактеризовать ее устройство в виде формальных показателей, определить топологические отношения и центральность отдельных элементов.\n\n::: callout-note\n## Центральность\n\nЦентральность --- это важность элемента сети. Существует множество показателей центральности\n:::\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Центральность\n\n::: columns\n::: {.column width=\"40%\"}\n**Центральность по промежуточности** показывает количество маршрутов, проходящих через узел/ребро.\n\n::: callout-note\n## Расчет и интерпретация\n\n1.  Строятся маршруты между всеми возможными парами вершин в графе.\n2.  В каждой вершине суммируется число прошедших через нее маршрутов.\n\nРезультат показывает основные магистрали в сети.\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Центральность\n\n::: columns\n::: {.column width=\"40%\"}\n**Центральность по близости** обратно пропорциональна сумме расстояний от вершины до остальных вершин.\n\n::: callout-tip\n## Интерпретация\n\nЦентральность по близости позволяет выделить условный \"центр\" сети --- множество вершин, равноудаленных от всех остальных\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Центральность\n\n::: columns\n::: {.column width=\"40%\"}\n**Центральность по степени** показывает количество ребер, с которыми связана вершина.\n\n::: callout-note\n## Интерпретация\n\nЦентральность по степени является локальной характеристикой, она показывается важность вершины в ее собственной окрестности\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Центральность\n\n::: columns\n::: {.column width=\"40%\"}\n**Центральность по влиятельности** показывает сумму степеней вершин, с которыми связана текущая вершина.\n\n::: callout-note\n## Интерпретация\n\nЦентральность по влиятельности позволяет выделить области графа, в которых наблюдается сложная топология сети\n:::\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](10_Networks_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='left' width=100%}\n:::\n:::\n\n:::\n:::\n\n## Словарик\n\n::: columns\n::: {.column width=\"50%\" style=\"color: blue; text-align: end;\"}\nСеть\n\nГраф\n\nМатрица смежности\n\nМаршрут\n\nЗадача коммивояжёра\n\nБлижайший пункт обслуживания\n\nИзохрона\n\nЦентральность\n\nПрмежуточность\n\nБлизость\n\nСтепень\n:::\n\n::: {.column width=\"50%\" style=\"color: red\"}\nNetwork\n\nGraph\n\nAdjacency matrix\n\nRoute\n\nTraveling salesman problem\n\nClosest facility\n\nIsochrone\n\nCentrality\n\nBetweenness\n\nCloseness\n\nDegree\n:::\n:::\n\n## Библиография\n",
    "supporting": [
      "10_Networks_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}