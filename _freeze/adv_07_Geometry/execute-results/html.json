{
  "hash": "d94ddf35918630a4b21d972a1784c285",
  "result": {
    "markdown": "---\ntitle: \"Геометрические операции\"\nsubtitle: \"Геоинформатика I. Базы пространственных данных\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Основные операции\n\n::: columns\n::: {.column width=\"50%\"}\n1.  Расстояние между точками\n2.  Расстояние от точки до прямой\n3.  Расстояние от точки до линии/полигона\n4.  Точка относительно прямой\n5.  Пересечение отрезков\n6.  Точка в полигоне\n7.  Оверлей полигонов\n8.  Периметр линии\n9.  Площадь полигона\n10. Центроид полигона\n:::\n\n::: {.column width=\"50%\"}\n1.  Точка на поверхности полигона\n2.  Точка на линии\n3.  Триангуляция Делоне\n4.  Диаграмма Вороного\n5.  Скелет и срединная ось полигона\n6.  Буферная зона\n7.  Ограничивающий прямоугольник\n8.  Минимальный по площади ограничивающий прямоугольник\n9.  Выпуклая оболочка\n10. Альфа-оболочка\n:::\n:::\n\n## Вектор и прямая\n\n::: columns\n::: {.column width=\"70%\"}\nПусть заданы две точки $p_1 = (x_1, y_1)$ и $p_2 = (x_2, y_2)$.\n\n**Вектор** между $p_1$ и $p_2$ определяется как\n\n$$\n\\overrightarrow{p_1p_2} = (x_2 - x_1,~y_2 - y_1)\n$$\n\n**Прямая** через $p_1$ и $p_2$ задается уравнением\n\n$$\n\\frac{y-y_1}{y_2-y_1} = \\frac{x-x_1}{x_2-x_1},\n$$\n\nи в каноническом виде\n\n$$\nax + by + c = 0\n$$\n\nгде $a = y_1-y_2$, $b = x_2 -x_1$, $c = x_1y_2 - x_2y_1$\n:::\n\n::: {.column width=\"30%\"}\n![](images/p1_p2.svg){width=\"100%\"}\n:::\n:::\n\n## Расстояние от точки до прямой\n\n::: columns\n::: {.column width=\"50%\"}\n**Евклидово расстояние** от точки $p_1$ до точки $p_2$ вычисляется как:\n\n$$\nd(p_1,p_2) = \\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2}\n$$\n\n**Расстояние** от точки $p = (x_p, y_p)$ до прямой $l$ вычисляется как:\n\n$$\nd(p, l) = \\frac{|ax_p + by_p + c|}{\\sqrt{a^2 + b^2}}\n$$\n\nгде $a$, $b$ и $c$ --- коэффициенты уравнения прямой $l$.\n:::\n\n::: {.column width=\"50%\"}\n![](images/d_p_l.svg){width=\"80%\"}\n:::\n:::\n\n## Расстояние от точки до отрезка\n\nВ зависимости от конфигурации это может быть как расстояние до прямой, так и расстояние до одной из крайних точек отрезка.\n\n::: columns\n::: {.column width=\"60%\"}\nПусть дана точка $p$ и отрезок $\\overline{qr}$, лежащий на прямой $l$. Введем три вектора:\n\n$$\n\\mathbf u = \\overrightarrow{qp},~\\mathbf v = \\overrightarrow{pr},~\\mathbf w = \\overrightarrow{qr}\n$$\n\nТогда расстояние определится как:\n\n$$\n\\mathrm d(p, \\overline{qr}) = \\begin{cases}\n\\mathrm d(p, q),~если~(\\mathbf u, \\mathbf w) < 0; \\\\\n\\mathrm d(p, r),~если~(\\mathbf v, \\mathbf w) < 0; \\\\\n\\mathrm d(p, l)~\\textrm{в противном случае}\n\\end{cases}\n$$\n\nгде $(\\mathbf a, \\mathbf b) = x_a x_b + y_a y_b$ --- скалярное произведение векторов\n:::\n\n::: {.column width=\"40%\"}\n![](images/point_segment_dist.svg){width=\"100%\"}\n:::\n:::\n\n## Расстояние от точки до линии\n\n**Расстояние от точки до линии** $L$ , состоящей из $k$ вершин --- это минимальное из расстояний от точки до каждого из отрезков линии:\n\n$$\nd(p, L) = \\min \\big[\\textrm d(p, \\overline{p_j p_{j+1}})\\big], ~j=0...k-1\n$$\n\n::: columns\n::: {.column width=\"30%\"}\n::: callout-note\n## Аппроксимация\n\nЕсли длины сегментов линии существенно меньше, чем расстояние до точки, то в качестве приближения можно взять расстояние до ближайшей точки линии.\n:::\n:::\n\n::: {.column width=\"70%\"}\n![](images/d_p_polyline.svg){width=\"100%\"}\n:::\n:::\n\n## Расстояние от точки до полигона\n\n**Расстояние от точки до полигона** $A$, состоящего из $n$ колец, равняется $0$, если точка внутри полигона, иначе равна минимальному расстоянию до границы полигона.\n\n$$\nd(p, A) = \\min\\big[\\textrm d(p, \\overline{p_{i,j} p_{i,j+1}})\\big],~i = 0...n-1,~j = 0...k_i\n$$\n\n::: columns\n::: {.column width=\"40%\"}\n::: callout-note\n## Точка в полигоне\n\nДля определения принадлежности точки полигону необходимо использовать соответствующий тест\n:::\n:::\n\n::: {.column width=\"60%\"}\n![](images/d_p_polygon.svg){width=\"100%\"}\n:::\n:::\n\n## Библиография\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}