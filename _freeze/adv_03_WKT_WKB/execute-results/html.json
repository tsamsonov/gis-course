{
  "hash": "2488a90fef341b3847a42ef670a8abdc",
  "result": {
    "markdown": "---\ntitle: \"WKT и WKB\"\nsubtitle: \"Геоинформатика I. Базы пространственных данных\"\ndate: today\ndate-format: long\nauthor: \"Самсонов Тимофей Евгеньевич\"\nexecute:\n  echo: false\n  freeze: true\nengine: knitr\nformat:\n  revealjs: \n    theme: [default, custom.scss]\n    margin: 0.2\n    width: 1280\n    height: 720\n    slide-number: true\n    footer: \"Самсонов Т. Е. Геоинформатика: курс лекций\"\n    header-includes: <link rel=\"stylesheet\" media=\"screen\" href=\"https://fontlibrary.org//face/pt-sans\" type=\"text/css\"/>\nbibliography: references.yaml\nmainfont: PT Sans\n---\n\n\n## Well-Known Text (WKT)\n\n**Well-Known Text (WKT)** --- формальный язык описания геометрий, который используется для\n\n-   создания новых экземпляров геометрии;\n\n-   конвертации экземпляров в алфавитно-цифровую текстовую форму для отображения и *сериализации*.\n\n::: callout-note\n## Сериализация\n\nПреобразование состояния объекта в форму, пригодную для сохранения или передачи. Обратный процесс называется *десериализацией*.\n:::\n\n**WKT** используется для описания не только геометрий, но также *пространственных систем отсчета*.\n\n**WKT** является *регистронезависимым*: `POINT`, `Point` и `point` --- это одно и то же.\n\n## Формальная грамматика\n\nАлфавит\n\n:   Множество неделимых (атомарных) символов\n\nСлово\n\n:   Конечный упорядоченный набор (кортеж) символов из заданного алфавита\n\nФормальный язык\n\n:   Множество конечных слов над конечным алфавитом\n\nСинтаксис\n\n:   Совокупность правил, упорядочивающих структуру предложений\n\nФормальная грамматика\n\n:   Способ формирования из алфавита языка строк (слов, словосочетаний, предложений) в соответствии с его синтаксисом\n\n## Производящее правило\n\nПроизводящее правило\n\n:   Правило замены символов, которое может применяться для генерации новой последовательности символов\n\nТерминальные символы\n\n:   Символы, входящие в алфавит\n\nНетерминальные символы\n\n:   Заменяются группой терминальных символов в соответствии с производящими правилами\n\n## Форма Бэкуса-Наура (БНФ)\n\n**Форма Бэкуса-Наура (БНФ)** --- формальная грамматика с последовательным определением синаксических категорий через производящие правила вида:\n\n`<symbol> ::= expression`\n\n-   `<symbol>` --- нетерминальный символ (переменная)\n\n-   `::=` --- оператор замены символа слева (`<symbol>`) на выражение справа (`expression`).\n\n-   `expression` --- выражение, которое состоит из одной и более *альтернативных* последовательностей терминальных или нетерминальных символов (токенов)\n\n-   `|` --- символ, используемый для разделения альтернативных последовательностей в выражении `expression`\n\n::: callout-note\n## Угловые скобки (`<>`)\n\nВ нотации Бэкуса-Наура нетерминальные символы всегда заключаются в угловые скобки (`<>`).\n:::\n\n## Форма Бэкуса-Наура (БНФ)\n\n**БНФ** базируется на следующих обозначениях:\n\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n| `{}`     | Опциональный (необязательный) токен; фигурные скобки используются для обозначения и не являются частью токена                |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n| `()`     | Группировка последовательности токенов в один токен; круглые скобки используются для обозначения и не являются частью токена |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n| `*`      | Опциональное (необязательное) использование множества экземпляров токена                                                     |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n| `|`      | Разделитель альтернативных токенов; не включается в результат                                                                |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n| `<>`     | Определяемый нетерминальный токен                                                                                            |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n| `::=`    | Оператор, обозначающий производящее правило: левый операнд может быть заменен на правый.                                     |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n|          | Последовательность символов без обозначений представляет собой терминальный токен                                            |\n+----------+------------------------------------------------------------------------------------------------------------------------------+\n\n## Определение WKT\n\n|                                                   |\n|---------------------------------------------------|\n| `<empty set> ::= EMPTY`                           |\n| `<left paren> ::= (`                              |\n| `<right paren> ::= )`                             |\n| `<comma> ::= ,`                                   |\n| `<period> ::= .`                                  |\n| `<decimal point> ::= .`                           |\n| `<digit> ::= 0|1|2|3|4|5|6|7|8|9`                 |\n| `<plus sign> ::= +`                               |\n| `<minus sign> ::= -`                              |\n| `<sign> ::= <plus sign> | <minus sign>`           |\n| `<unsigned integer> ::= (<digit>)*`               |\n| `<signed integer> ::= {<sign>}<unsigned integer>` |\n\n## Разложение целого со знаком\n\n![](images/signed_integer.svg){width=\"50%\"}\n\n## Определение WKT\n\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<exact numeric literal> ::= <unsigned integer> {<decimal po int>{<unsigned integer>}}|<decimal point><unsigned integer>` |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<mantissa> ::= <exact numeric literal>`                                                                                  |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<exponent> ::= <signed integer>`                                                                                         |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<approximate numeric literal> ::= <mantissa>E<exponent>`                                                                 |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<unsigned numeric literal> ::= <exact numeric literal> | <approximate numeric literal>`                                  |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<signed numeric literal> ::= {<sign>}<unsigned numeric literal>`                                                         |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<x> ::= <signed numeric literal>`                                                                                        |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<y> ::= <signed numeric literal>`                                                                                        |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<z> ::= <signed numeric literal>`                                                                                        |\n+---------------------------------------------------------------------------------------------------------------------------+\n| `<m> ::= <signed numeric literal>`                                                                                        |\n+---------------------------------------------------------------------------------------------------------------------------+\n\n## Разложение действительного числа\n\n![](images/signed_literal.svg){width=\"100%\"}\n\n## Определение $2D$-геометрий\n\n+---------------------------------------------------------------------------------------------+\n| `<point> ::= <x> <y>`                                                                       |\n+---------------------------------------------------------------------------------------------+\n| `<point text> ::= <empty set> | <left paren>`                                               |\n|                                                                                             |\n| `<point> <right paren>`                                                                     |\n+---------------------------------------------------------------------------------------------+\n| `<point tagged text> ::= point <point text>`                                                |\n+---------------------------------------------------------------------------------------------+\n| `<linestring text> ::= <empty set> | <left paren> <point> {<comma> <point>}* <right paren>` |\n+---------------------------------------------------------------------------------------------+\n| `<linestring tagged text> ::= linestring <linestring text>`                                 |\n+---------------------------------------------------------------------------------------------+\n| `<polygon text> ::= <empty set> | <left paren>`                                             |\n|                                                                                             |\n| `<linestring text>{<comma> <linestring text>}* <right paren>`                               |\n+---------------------------------------------------------------------------------------------+\n| `<polygon tagged text> ::= polygon <polygon text>`                                          |\n+---------------------------------------------------------------------------------------------+\n| `<triangle tagged text> ::= triangle <polygon text>`                                        |\n+---------------------------------------------------------------------------------------------+\n\n## Разложение $2D$-точки\n\n![](images/point_tagged.svg){width=\"100%\"}\n\nДля остальных классов пустая (`EMPTY`) геометрия описывается аналогичным образом: `LINESTRING EMPTY`, `POLYGON EMPTY` и т.п.\n\n## Разложение $2D$-линии и полигона\n\n![](images/line_polygon_tagged.svg){width=\"100%\"}\n\n## Определение $2D$-геометрий\n\n+------------------------------------------------------------------------------------------------------------------+\n| `<polyhedralsurface text> ::= <empty set> | <left paren> <polygon text> {<comma> <polygon text>}* <right paren>` |\n+------------------------------------------------------------------------------------------------------------------+\n| `<polyhedralsurface tagged text> ::= polyhedralsurface <polyhedralsurface text>`                                 |\n+------------------------------------------------------------------------------------------------------------------+\n| `<tin tagged text> ::= tin <polyhedralsurface text>`                                                             |\n+------------------------------------------------------------------------------------------------------------------+\n\n![](images/tin_tagged.svg){width=\"100%\"}\n\n## Определение $2D$-коллекций\n\n+---------------------------------------------------------------------------------------------------------------------+\n| `<multipoint text> ::= <empty set> | <left paren>`                                                                  |\n|                                                                                                                     |\n| `<point text> {<comma> <point text>}* <right paren>`                                                                |\n+---------------------------------------------------------------------------------------------------------------------+\n| `<multipoint tagged text> ::= multipoint <multipoint text>`                                                         |\n+---------------------------------------------------------------------------------------------------------------------+\n| `<multilinestring text> ::= <empty set> | <left paren> <linestring text>{<comma> <linestring text>}* <right paren>` |\n+---------------------------------------------------------------------------------------------------------------------+\n| `<multilinestring tagged text> ::= multilinestring <multilinestring text>`                                          |\n+---------------------------------------------------------------------------------------------------------------------+\n| `<multipolygon text> ::= <empty set> | <left paren>`                                                                |\n|                                                                                                                     |\n| `<polygon text> {<comma> <polygon text>}* <right paren>`                                                            |\n+---------------------------------------------------------------------------------------------------------------------+\n| `<multipolygon tagged text> ::=`                                                                                    |\n|                                                                                                                     |\n| `multipolygon <multipolygon text>`                                                                                  |\n+---------------------------------------------------------------------------------------------------------------------+\n\n## Разложение $2D$-мульти\\[точки\\|линии\\]\n\n![](images/multipoint_tagged.svg){width=\"100%\"}\n\n## Разложение $2D$-мультиполигона\n\n![](images/multipolygon_tagged.svg){width=\"100%\"}\n\n## Определение $2D$-`GEOMETRYCOLLECTION`\n\n+-----------------------------------------------------------------------------------------------------------------------------------+\n| `<geometry tagged text> ::=`                                                                                                      |\n|                                                                                                                                   |\n| `<point tagged text> | <linestring tagged text>`                                                                                  |\n|                                                                                                                                   |\n| `| <polygon tagged text> | <triangle tagged text>`                                                                                |\n|                                                                                                                                   |\n| `| <polyhedralsurface tagged text> | <tin tagged text>`                                                                           |\n|                                                                                                                                   |\n| `| <multipoint tagged text> | <multilinestring tagged text>`                                                                      |\n|                                                                                                                                   |\n| `| <multipolygon tagged text>`                                                                                                    |\n|                                                                                                                                   |\n| `| <geometrycollection tagged text>`                                                                                              |\n+-----------------------------------------------------------------------------------------------------------------------------------+\n| `<geometrycollection text> ::= <empty set> | <left paren> <geometry tagged text> {<comma> <geometry tagged text>}* <right paren>` |\n+-----------------------------------------------------------------------------------------------------------------------------------+\n| `<geometrycollection tagged text> ::= geometrycollection <geometrycollection text>`                                               |\n+-----------------------------------------------------------------------------------------------------------------------------------+\n\n## Разложение $2D$-`GEOMETRYCOLLECTION`\n\n![](images/geometry_tagged.svg){width=\"100%\"}\n\n## Определение $3D/4D$-геометрий и коллекций\n\nИдентично $2D$ со следующими модификациями:\n\n-   Количество координат равно числу измерений ($3$ или $4$)\n\n-   После названия *tagged*-геометрии добавляется расширение `z`, `m` или `zm`:\\\n    `point z`, `linestring m`, `polygon zm`.\n\n![](images/linestringzm_tagged.svg){width=\"100%\"}\n\n## Дополнительные измерения\n\n1.  Стандартные геометрические операции и топологические предикаты *игнорируют* дополнительные измерения $ZM$.\n\n2.  Не существует ограничений на координату $M$ --- она, в частности, не обязана непрерывно возрастать вдоль объекта `LINESTRING`.\n\n3.  Интерфейс объектов с $M$-геометрией содержит дополнительные методы `LocateAlong()` и `LocateBetween()`.\n\n+-------------------------+-------------------------------------------------------------------------------------------+\n| Метод                   | Назначение                                                                                |\n+=========================+===========================================================================================+\n| `LocateAlong(m)`        | Возвращает производную геометрическую коллекцию, которая соответствует `m`                |\n+-------------------------+-------------------------------------------------------------------------------------------+\n| `LocateBetween(m1, m2)` | Возвращает производную геометрическую коллекцию, которая соответствует отрезку `[m1, m2]` |\n+-------------------------+-------------------------------------------------------------------------------------------+\n\n## Дополнительные измерения\n\nЗапрос измерения мультиточечного объекта:\n\n**`p:`** `MULTIPOINT M(0 0 4, 2 1 1, 3 1 2, 4 2 4, 5 3 5, 7 2 7)`\n\n**`p.LocateAlong(4):`** `MULTIPOINT M(0 0 4, 3 1 4)`\n\n**`p.LocateBetween(2,4):`** `MULTIPOINT M(0 0 4, 2 1 2, 3 1 4)`\n\n**`p.LocateAlong(3):`** `POINT M()` --- *пустой* объект\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_03_WKT_WKB_files/figure-revealjs/unnamed-chunk-1-1.png){width=600px height=450px}\n:::\n:::\n\n\n## Дополнительные измерения\n\nЗапрос измерения линейного объекта :\n\n**`l:`** `MULTILINESTRING M((0 0 4, 2 1 1, 3 1 2), (4 2 4, 5 3 6))`\n\n**`l.LocateAlong(3):`** `MULTIPOINT M(1.3 0.7 3)`\n\n**`l.LocateBetween(2,5):`** `GEOMETRYCOLLECTION M(LINESTRING M(0 0 4,1.33 0.67 2),POINT M(3 1 2),LINESTRING M(4 2 4,4.5 2.5 5))`\n\n**`l.LocateAlong(0.5):`** `POINT M()` --- *пустой* объект\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](adv_03_WKT_WKB_files/figure-revealjs/unnamed-chunk-2-3.png){width=600px height=300px}\n:::\n:::\n\n\n## Библиография\n",
    "supporting": [
      "adv_03_WKT_WKB_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}