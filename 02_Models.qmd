---
title: "Модели пространственных данных"
subtitle: "Основы геоинформатики. Лекция 2"
date: 02/09/2024
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Три уровня моделирования

::: columns
::: {.column width="10%"}
![](images/123.png){width="65%"}
:::

::: {.column width="90%"}

Концептуальная модель [@gost:43.0.3-2009]

:   Абстрактная модель, определяющая структуру исследуемого объекта (составные части и связи), свойства составных частей, причинно-следственные связи

Модель пространственных данных [@lurie:2016]

:   Набор логических правил формализованного цифрового описания объектов реальности как пространственных объектов.

Модели пространственных объектов

:   Геометрические примитивы, используемые для координатного описания пространственных объектов или их частей.
:::
:::

## Концептуальные модели {.white-text background-image="images/image-1401221242.png"}

В реальном мире существует бесконечное разнообразие явлений.

## Концептуальные модели {.white-text background-image="images/image-633758101.png"}

**Объектно-ориентированная модель** используется когда явление интерпретируется как состоящее из дискретных объектов с четкими границами. *Характеристики объектов в пределах их границ предполагаются постоянными*.\
\
\
\
\
\
\

::: callout-tip
## Пример

Здания имеют четкие границы и моделируются как отдельные объекты
:::

## Концептуальные модели {.white-text background-image="images/image-1627346778.png"}

**Сетевая модель** используется для интерпретации явлений, состоящих из множества связанных между собой объектов. *Сетевая модель является производной от объектно-ориентированной*.

\
\
\
\
\
\
\

::: callout-tip
## Пример

Автомобильные дороги образуют сетевую структуру
:::

## Концептуальные модели {.white-text background-image="images/image-1639184355.png"}

**Модель географических полей** используется для интерпретации явлений, *сплошным* образом покрывающих пространство. Как правило, моделируемая характеристика явления меняется *непрерывно*, но это не является обязательным условием.

\
\
\
\
\
\

::: callout-tip
## Пример

Земная поверхность имеет сплошной характер, ее высота меняется \[не\]прерывно
:::

## Концептуальные модели

Особенности концептуальных моделей географических явлений:

1.  Всегда являются *упрощением* реальности.

2.  Обобщают модели *картографической локализации* (по пунктам, на линиях, по площадям, рассеянной, сплошной).

3.  Выбираются в соответствии с масштабом и целью исследования, а также способом *интерпретации* явления.

    ::: callout-tip
    ## Пример

    Рельеф может рассматриватиься как совокупность форм (объектно-ориентированная модель) и как поверхность (модель географического поля).
    :::

4.  Определяют выбор *модели пространственных данных*.

## Модели пространственных данных

Модель пространственных данных задаётся отображением множества объектов на множество значений их атрибутов.

::: columns
::: {.column width="50%"}
**Простой** **объект** имеет одно значение каждого атрибута.

::: callout-note
## Вектор (vector)

Каждый *объект* имеет кортеж значений атрибутов. Объект называется **векторным,** т.к. любая точка на границе описывается *векторным уравнением*.

![](images/simple_feature.svg){width="100%"}
:::
:::

::: {.column width="50%"}
**Сложный** **объект** имеет множест-во значений каждого атрибута.

::: callout-note
## Покрытие (coverage)

В каждой *точке*, принадлежащей объекту, существует кортеж значений атрибутов. Его можно запросить с помощью функции, которая называется **покрытием**.

![](images/complex_feature.svg){width="100%"}
:::
:::
:::

## Векторное уравнение

**Векторное уравнение** позволяет получать координаты промежуточных точек на основе конечного числа опорных точек.

::: columns
::: {.column width="50%"}
Пусть $\mathbf{p_0}$ — начальная точка отрезка, а $\mathbf{p_1}$ — конечная точка.

Тогда произвольная точка $\mathbf{p}$ на отрезке определяется значением параметра $0 \leq t \leq 1$ в *векторном уравнении*:

$$
\mathbf{p} = (1-t)\mathbf{p_0} + t\mathbf{p_1}
$$
:::

::: {.column width="50%"}
![](images/vector_eq.svg){width="100%"}
:::
:::

## Векторная модель

**Simple Features** --- стандарт @OGC2010, который определяет общую модель хранения и доступа к простым (векторным) объектам.

-   все геометрии состоят из точек;
-   все точки в геометрии имеют одинаковую размерность;
-   размерность точек может быть 2, 3 или 4.

В дополнение к обязательным измерениям $X$ и $Y$ *возможны*:

-   $Z$, обозначающее высоту
-   $M$, обозначающее некоторую меру --- например, время

Существует 4 варианта координат: $XY$, $XYZ$, $XYM$ и $XYZM$.

В географических координатах $X$ --- долгота, $Y$ --- широта.

## Векторная модель

Стандарт включает в себя **17 моделей пространственных объектов**.

::: columns
::: {.column width="50%"}
Основными являются 7 моделей:

-   **Линейно связные**: `POINT`, `LINESTRING`, `POLYGON`
-   **Линейно несвязные**: `MULTIPOINT`, `MULTILINESTRING`, `MULTIPOLYGON`, `GEOMETRYCOLLECTION`
:::

::: {.column width="50%"}
::: callout-note
## Линейная связность

Линейно связным называется пространство, в котором любые две точки можно соединить непрерывной кривой.

![](images/connect.svg){width="60%"}
:::
:::
:::

Оставшиеся виды моделей включают: `CIRCULARSTRING`, `COMPOUNDCURVE`, `CURVEPOLYGON`, `MULTICURVE`, `MULTISURFACE`, `CURVE`, `SURFACE`, `POLYHEDRALSURFACE`, `TIN`, `TRIANGLE`.

## Векторная модель

![](images/simple_features.svg){width="100%"}

## Векторная модель

**Линейно связные** модели пространственных объектов.

| Тип          | Описание                                                                                                                                                                                                                                         |
|----------------|--------------------------------------------------------|
| `POINT`      | нуль-мерная геометрия, содержащая одну точку                                                                                                                                                                                                     |
| `LINESTRING` | последовательность точек, соединенных прямыми, несамопересекающимися отрезками; одномерная геометрия                                                                                                                                             |
| `POLYGON`    | геометрия с положительной площадью (двумерная); последовательность точек, отрезки между которыми формируют замкнутое кольцо без самопересечений; первое кольцо является внешним, ноль и более остальных колец представляют дырки внутри полигона |

## Векторная модель

**Линейно несвязные** модели пространственных объектов.

| Тип                  | Описание                                                                                                              |
|------------------|------------------------------------------------------|
| `MULTIPOINT`         | множество точек; геометрия типа `MULTIPOINT` называется *простой* если ни одна пара точек в `MULTIPOINT` не совпадает |
| `MULTILINESTRING`    | множество линий                                                                                                       |
| `MULTIPOLYGON`       | множество полигонов                                                                                                   |
| `GEOMETRYCOLLECTION` | множество геометрий произвольного типа за исключением `GEOMETRYCOLLECTION`                                            |

## Хранение координат

```{r}
library(sf)
p = st_point(c(0.5,0.5))

pc = rbind(c(0.5,0.5), c(1, 3), c(2, 1), c(0.2, 2), c(2, 3), c(1.5, 1.5))
mp = st_multipoint(pc)

s1 = rbind(c(0,1),c(0.5,1.5),c(1.2,1.2),c(2,1.3),c(3,2))
ls = st_linestring(s1)

s1 = rbind(c(0.5,1.5),c(1.2,1.2),c(2,1.3))
s2 = rbind(c(0,1.5),c(0.5,2.0),c(1.2,1.7))
s3 = rbind(c(2,1.8),c(3,2.5))
mls = st_multilinestring(list(s1,s2,s3))

p1 = rbind(c(0.5,0.5), c(2,0), c(3,2), c(1.5,4), c(0,3), c(0.5,0.5))
p2 = rbind(c(1,1), c(0.8,2), c(2,2.2), c(1.4,1.1), c(1,1))
pol = st_polygon(list(p1, p2))
p3 = rbind(c(3,3.3), c(3.5, 3.1), c(4,3), c(4,3.7), c(3.7, 3.96), c(3.2,4), c(3,3.3))
p4 = rbind(c(3.2,3.4), c(3.8,3.2), c(3.8,3.7), c(3.3,3.8), c(3.2,3.4))
p5 = rbind(c(3,1.2), c(2.5,0.2), c(3.5,0.2), c(3.5,1.2), c(3,1.2))
p6 = rbind(c(0,1), c(0.1,0.8), c(0.2,0.5), c(0.1,0.3), c(0, 0.7), c(0,1))
mpol = st_multipolygon(list(list(p1,p2), list(p3,p4), list(p5), list(p6)))

gc = st_geometrycollection(list(pol, mp + c(3, -1), mls + c(2.5,2)))
```

**Well-Known Text (WKT)** --- текстовый формат

```{r}
cat(st_as_text(p))
cat(st_as_text(ls))
cat(st_as_text(pol))
cat(st_as_text(mp))
cat(st_as_text(mls))
# cat(st_as_text(mpol))
# cat(st_as_text(gc))
```

::: callout-note
## Назначение

Формат **WKT** используется в текстовых форматах файлов, а также для визуального анализа координат объектов. Он занимает много места в памяти компьютера и медленно читается/записывается программами.
:::

## Хранение координат

**Well-Known Binary (WKB)** --- бинарный формат

```{r}
cat('POINT:', st_as_binary(p))
cat('LINESTRING:', st_as_binary(ls))
# cat('POLYGON:', st_as_binary(pol))
# cat(st_as_binary(mp))
# cat(st_as_binary(mls))
# cat(st_as_binary(mpol))
# cat(st_as_binary(gc))
```

::: callout-note
## Назначение

Формат **WKB** используется в бинарных форматах файлов, в том числе а базах данных. Он занимает мало места в памяти компьютера и быстро читается/записывается программами, но не подходит для визуального анализа.
:::

## Особенности векторной модели

1.  Используется для реализации объектно-ориентированной концептуальной модели.
2.  Основана на генерализации. Физическое или абстрактное тело представляется в виде конечного множества координат.
3.  В зависимости от уровня детализации один и тот же объект может представляться с помощью разной модели.
4.  Значения атрибутов в пределах границ каждого объекта предполагаются постоянными.

::: callout-warning
## Ограничение

Векторная модель не годится для представления *географических полей*.
:::

## Покрытие

Покрытие [@ogc-07-011:2005]

:   Пространственный объект, который действует как **функция**, возвращающая значения

    -   в пределах своей *области значений* (атрибутивного домена);

    -   в пределах своей *области определения* (пространственного, временного или пространственно-временного домена);

    для любой точки в системе координат покрытия.

![](images/complex_feature.svg){fig-align="center" width="100%"}

## Модель покрытий

::: columns
::: {.column width="60%"}
Модель покрытий предполагает, что можно представить поле изменения атрибутов внутри объектов.

::: callout-important
## Однако есть проблема

::: columns
::: {.column width="20%"}
![](images/rick_thinking.png)
:::

::: {.column width="80%"}
Географические поля определены на бесконечном множестве точек, в то время как любые модели данных состоят из конечного числа элементов. Как обойти это ограничение?
:::
:::
:::
:::

::: {.column width="40%"}
![](images/transform_cov.svg){width="45%"}
:::
:::

::: callout-tip
## Решение

Необходимо внутри объекта создать сетку опорных геометрий и определить функцию, которая сможет интерполировать значения между ними.
:::

## Топологическое покрытие

Построение покрытия начинается с простого объекта, обозначающего границу покрытия.

![](images/cov_details_1.svg){width="100%"}

## Топологическое покрытие

В **топологическом покрытии** объект разрезается узлами и дугами на области фиксированных значений поля.

![](images/cov_details_3.svg){width="100%"}

## Топологическое покрытие

**Функция покрытия** в каждой точке возвращает значение полигона, который её *покрывает*. Покрытие является сплошным.

![](images/cov_details_4.svg){width="100%"}

## Топологическое покрытие

::: columns
::: {.column width="65%"}
Элементы топологической модели имеют свои названия.

![](images/cov_details_5.svg){width="100%"}
:::

::: {.column width="35%"}
::: callout-caution
## Ограничение

Топологическая модель подходит только для представления полей с пространственной структурой в виде областей фиксированных значений.
:::
:::
:::

## Триангуляционное покрытие

Построение покрытия начинается с простого объекта.

![](images/tin_details_1.svg){width="100%"}

## Триангуляционное покрытие

В объект добавляются известные значения геополя в точках.

![](images/tin_details_2.svg){width="100%"}

## Триангуляционное покрытие

Точки данных соединяются *сплошной* сеткой треугольников --- **триангуляцией**.

![](images/tin_details_3.svg){width="100%"}

## Триангуляционное покрытие

**Функция покрытия** реализуется путем *интерполяции* (линейной, естественной и т.д.) поля внутри треугольников.

![](images/tin_details_4.svg){width="100%"}

## Триангуляционное покрытие

У каждого узла есть ячейка (область влияния). Совокупность таких ячеек называется **диаграммой Вороного**.

![](images/tin_details_5.svg){width="100%"}

## Триангуляционное покрытие

Диаграмма Вороного дает альтернативную функцию покрытия, в которой поле считается *постоянным* в пределах ячеек.

![](images/tin_details_6.svg){width="100%"}

## Диаграмма Вороного

::: columns
::: {.column width="50%"}
![](images/voronoy.gif)
:::

::: {.column width="50%"}

Диаграмма Вороного

:   Диаграмма Вороного конечного множества точек $S$ на плоскости представляет такое разбиение плоскости, при котором каждая область этого разбиения образует множество точек, более близких к одному из элементов множества $S$, чем к любому другому элементу множества.
:::
:::

## Триангуляционное покрытие

Элементы триангуляционной модели имеют свои названия.

![](images/tin_details_7.svg){width="100%"}

## Растровое покрытие

В растровом покрытии множество узлов с данными поля упорядочивается в виде матрицы --- **растра**.

![](images/raster_details_1.svg){width="100%"}

## Растровое покрытие

Сетка четырехугольников на узлах с данными обеспечивает сплошное покрытие объекта.

![](images/raster_details_2.svg){width="100%"}

## Растровое покрытие

Функция покрытия реализуется путем *интерполяции* (билинейной, кубической и т.д.) внутри четырехугольников.

![](images/raster_details_3.svg){width="100%"}

## Растровое покрытие

У каждого узла растра есть ассоциированная с ним зона влияния --- **ячейка (пиксель)**.

![](images/raster_details_4.svg){width="100%"}

## Растровое покрытие

Пиксельное представление даёт альтернативную функцию покрытия, в которой поле считается *постоянным* в ячейке.

![](images/raster_details_5.svg){width="100%"}

## Растровое покрытие

Элементы растровой модели имеют свои названия.

![](images/raster_details_6.svg){width="100%"}

## Геометрия растра

**Геометрия растра** определяет, где именно располагаются в пространстве узлы и может быть описана параметрами:

| Параметр    | Назначение                              |
|-------------|-----------------------------------------|
| `NCOLS`     | Количество столбцов                     |
| `NROWS`     | Количество строк                        |
| `XLLCENTER` | Координата $X$ левого нижнего узла      |
| `YLLCENTER` | Координата $Y$ левого нижнего узла      |
| `CELLSIZE`  | Размер ячейки (расстояние между узлами) |

::: callout-important
## Обратите внимание

Растр может иметь разное расстояние между узлами по осям $X$ и $Y$. В этом случае вместо `CELLSIZE` указывается два параметра: `CELLSIZEX` и `CELLSIZEY` .
:::

## Сравнение моделей покрытий

::: columns
::: {.column width="65%"}
![](images/raster_tin.svg){width="100%"}
:::

::: {.column width="35%"}
Модели покрытий имеют схожие элементы с одинаковыми названиями.

Ячейки имеют альтернативные имена (области и пиксели)

::: callout-note
## TIN

Триангуляцию сокращенно называют TIN (Triangular Irregular Network)
:::
:::
:::

## Преимущества моделей

::: columns
::: {.column width="50%"}
**Растр**

1.  Регулярная матричная структура, позволяющая унифицировать операторы обработки данных.
2.  Компактное хранение (достаточно указать местоположение угла растра).
3.  Соответствие устройству матрицы сканерных снимков.
:::

::: {.column width="50%"}
**TIN**

1.  Иррегулярная структура, позволяющая уплотнять данные в областях высокой изменчивости поля.
2.  Более точное взаимодействие с векторными данными, в т.ч. совместный анализ.
3.  Соответствие устройству трёхмерных моделей.
:::
:::

## Словарик

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Векторные данные

Растровые данные

Покрытие

Узел

Ребро

Грань

Ячейка

Пиксель
:::

::: {.column width="50%" style="color: red"}
Vector data

Raster data

Coverage

Node

Edge

Face

Cell

Pixel
:::
:::

## Библиография
