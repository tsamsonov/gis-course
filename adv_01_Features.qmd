---
title: "Введение"
subtitle: "Геоинформатика I. Базы пространственных данных"
date: 02/10/2023
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    width: 1280
    height: 720
    slide-number: true
    footer: "Самсонов Т. Е. Геоинформатика: курс лекций для студентов кафедры картографии и геоинформатики МГУ"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Геоинформатика

![](images/semesters.png)

## База пространственных данных

База пространственных данных [@gost:52438-2005]

:   Совокупность пространственных данных, организованных по определенным правилам, устанавливающим общие принципы описания, хранения и манипулирования данными, предназначенная для удовлетворения информационных потребностей пользователя.

::: callout-warning
## Жаргон

Не рекомендуются к использованию словосочетания: база геоданных, пространственная база данных, база данных ГИС
:::

## Пространственный объект

Пространственный объект [@gost:52438-2005]

:   Цифровая модель материального или абстрактного объекта реального или виртуального мира с указанием его идентификатора, координатных и атрибутивных данных.

![](images/feature.svg){fig-align="center" width="100%"}

## Эволюция моделей СУБД

```{mermaid}
%%| fig-width: 11
flowchart TB
  A(Файловые) --> B(Сетевые)
  A --> C(Иерархические)
  C --> D(Реляционные / РСУБД)
  B --> D
  E(Объектно-ориентированные / ООСУБД) --> F(Объектно-Реляционные / ОРСУБД)
  D --> F
```

## Пространственные данные в РСУБД

```{python}
import shapely
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt


pol = shapely.Polygon(((5, 0), (0, 5), (3, 9), (8, 8), (6, 4), (5, 0)))
p = gpd.GeoSeries(pol)

df = pd.DataFrame(
  {
    "Name": ['Уч. 2'],
    "Area": [pol.area],
    "Price": [560000]
  }
)

gdf = gpd.GeoDataFrame(
    df, geometry=p
)
```

::: columns
::: {.column width="40%"}
```{python}
p.plot()
plt.show()
```

Представление в обычной РСУБД достаточно громоздко
:::

::: {.column width="60%"}
| Name  | Area | Price  | BoundaryID |
|-------|------|--------|------------|
| Уч. 2 | 37.0 | 560000 | 1055       |

: Parcels

| BoundaryID | Edge |
|------------|------|
| 1055       | A    |
| 1055       | B    |
| 1055       | C    |
| 1055       | D    |
| 1055       | E    |

: Polygons
:::
:::

## Пространственные данные в РСУБД

::: columns
::: {.column width="50%"}
```{python}
p.plot()
plt.show()
```

Представление в обычной РСУБД достаточно громоздко
:::

::: {.column width="25%"}
| Edge | Point |
|------|-------|
| A    | 1     |
| A    | 2     |
| B    | 2     |
| B    | 3     |
| C    | 3     |
| C    | 4     |
| D    | 4     |
| D    | 5     |
| E    | 5     |
| E    | 1     |

: Edges
:::

::: {.column width="25%"}
| Point | X   | Y   |
|-------|-----|-----|
| 1     | 5   | 0   |
| 2     | 0   | 5   |
| 3     | 3   | 9   |
| 4     | 8   | 8   |
| 5     | 6   | 4   |

: Points
:::
:::

## Пространственные данные в РСУБД

::: columns
::: {.column width="50%"}
```{python}
p.plot()
plt.show()
```

Представление в обычной РСУБД достаточно громоздко
:::

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 2
flowchart TB
  A(Parcels) --> B(Polygons)
  B --> C(Edges)
  C --> D(Points)
```
:::
:::

## Абстрактные типы данных

Важное наследие объектно-ориентированных систем --- поддержка абстрактных типов данных.

::: columns
::: {.column width="45%"}
*Примитивные типы данных* составляют основу реляционных БД. ![](images/elementary_types.svg){width="90%"}
:::

::: {.column width="55%"}
*Абстрактные типы данных (АТД)* обеспечивают хранение коллекций и объектов со свойствами. ![](images/abstract_types.svg){width="100%"}
:::
:::

Большинство ОРСУБД предлагают модульный подход к АТД, позволяя добавлять и удалять их.

## Пространственная СУБД

Абстрактные типы данных --- основа реализации пространственных СУБД.

ПСУБД должна отвечать следующим требованиям:

1.  Представляет собой программный модуль, взаимодействующий с нижестоящей СУБД или являющийся ее компонентой
2.  Поддерживает множественные модели пространственных данных, соответствующие им абстрактные типы данных, а также язык запросов, из которого эти типы могут быть вызваны.
3.  Реализует пространственное индексирование, эффективные алгоритмы пространственных операций и специальные правила оптимизации запросов.

## Пространственная СУБД

Основные аспекты функционирования ПСУБД:

1.  Модели пространственных данных и пространственных отношений.
2.  Язык запросов
3.  Обработка и оптимизация запросов
4.  Организация файлового хранилища
5.  Выполнение аналитических операций (добыча данных).

## Модели пространственных данных

![](images/basic_primitives.svg){width="100%"}

Абстрактные типы данных в ПСУБД реализуют различные модели пространственных данных

## Пространственные отношения

![](images/sp_relations.svg){width="100%"}

Пространственные запросы в ПСУБД опираются на модели пространственных отношений

## Язык запросов

**Structured Query Language (SQL)** --- язык структурированных запросов. Применяется для создания, модификации и управления данными в реляционной базе данных.

Пространственная СУБД поддерживает создание и манипулирование пространственными типами данных:

``` small
SELECT 'SRID=4326;POINT(-123 34)'::geography
"0101000020E61000000000000000C05EC00000000000004140"

CREATE TABLE geotable(gid serial PRIMARY KEY, name TEXT, geom geography(POINT) );

INSERT INTO geotable ( name, geom )
  VALUES ( ST_GeomFromEWKT('SRID=312;POINTM(-126.4 45.32 15)'), 'A Place' )
```

## Пространственные расширения SQL

``` small
SELECT
  m.name,
  SUM(ST_Length(r.geom))/1000 as roads_km
FROM bc_roads AS r
JOIN bc_municipality AS m
  ON ST_Contains(m.geom, r.geom)
GROUP BY m.name
ORDER BY roads_km;

name                        | roads_km
----------------------------+------------------
SURREY                      | 1539.47553551242
VANCOUVER                   | 1450.33093486576
LANGLEY DISTRICT            | 833.793392535662
BURNABY                     | 773.769091404338
PRINCE GEORGE               | 694.37554369147
...
```

## Обработка запросов

![](images/query_plan.svg){width="100%"}

-   SQL --- декларативный язык. Он описывает *что* необходимо получить, но не *как*, т.е. не сам алгоритм выполнения процедуры.

-   СУБД должна самостоятельно определить план эффективного выполнения запроса.

-   Обработка запроса представляет собой последовательность шагов, которую инициирует СУБД для выполнения запроса.

-   Оптимизация пространственных запросов обладает своей спецификой

## Обработка запросов

``` small
SELECT
FROM reltypes R, soiltypes S
WHERE st_area(S.geom) < 10000 AND st_area(R.geom) < 10000
AND st_intersects(R.geom, s.geom)
```

![](images/filter_refine.svg){width="100%"}

Пространственный запрос состоит из фильтрации (`FILTER`) на основе MBR и уточнения (`REFINE`) по реальной геометрии.

## Хранение данных

Данные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу

![](images/ordering_comp1.svg){width="100%"}

## Хранение данных

Данные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу

![](images/ordering_comp2.svg){width="100%"}

## Оптимизация запросов

**Непространственный запрос** *`Выбери всех абитуриентов женского пола, которые являются призерами всероссийской олимпиады по географии`* раскладывается на 2 подзапроса:

-   **ПРОЕКЦИЯ** (single-scan): выбрать всех абитуриентов женского пола

-   **СОЕДИНЕНИЕ** (multi-scan): сопоставить таблицу призеров и таблицу абитуриентов

::: callout-note
## Последовательность

Сначала должен быть выполнен запрос проекции, т.к. соединение является более ресурсоемкой многопроходной (*multiscan*) операцией
:::

## Оптимизация запросов

**Пространственный запрос** *`Выбери все регионы с площадью более 100 тыс. кв. км, в которых проходил заключительный этап всероссийской олимпиады школьников по географии`* раскладывается на 2 подзапроса:

-   **ДИАПАЗОН** (single-scan): выбрать регионы с площадью более $100$ тыс. кв. км

-   **ПРОСТРАНСТВЕННОЕ СОЕДИНЕНИЕ** (multi-scan): выбрать регионы, в которых находятся города проведения заключительного этапа

::: callout-note
## Последовательность

Последовательность не очевидна, т.к. вычисление площади --- ресурсоемкая операция. Порядок выполнения пространственных запросов требует тщательного анализа.
:::

## Добыча данных

**Базы *\[пространственных\]* данных** --- источник информации, который требует особого подхода в силу потенциального объема информации и способов взаимодействия с нею.

1.  Алгоритмы для больших данных, или решения, позволяющие совмещать аналитику данных и технологии обработки больших массивов информации.
2.  Расширение функциональности языка запросов --- возможность выполнять пространственную аналитику данных "на лету".

::: callout-note
## Пример

Пространственно-временные базы данных абонентов сотовой сети могут содержать терабайты информации. Как сделать равномерную случайную выборку?
:::

## Векторная модель

**Simple Features** --- стандарт @OGC2010, который определяет общую модель хранения и доступа к простым (векторным) объектам.

-   все геометрии состоят из точек;
-   все точки в геометрии имеют одинаковую размерность;
-   размерность точек может быть 2, 3 или 4.

В дополнение к обязательным измерениям $X$ и $Y$ *возможны*:

-   $Z$, обозначающее высоту
-   $M$, обозначающее некоторую меру --- например, время

Существует 4 варианта координат: $XY$, $XYZ$, $XYM$ и $XYZM$.

В географических координатах $X$ --- долгота, $Y$ --- широта.

## Векторная модель

![](images/sf_hierarchy.svg){width="100%"}

Модель *Simple Features* представляет собой иерархию классов, между которыми существуют отношения **наследования** (**△**) и **коллекции** (**♢**).

## Geometry

Все объекты типа *Simple Features* наследуют свойства от базового класса **`GEOMETRY`**. Механизм этого наследования основан на следующих принципах:

1.  **`GEOMETRY`** представляет собой *абстрактный* класс, т.е. вы не можете создать экземпляр этого класса.

2.  Все подклассы геометрий являются замыканиями, т.е. включают границу в множество точек.

3.  На уровне класса **`GEOMETRY`** определен интерфейс --- набор методов, которые позволяют получить информацию об объекте.

4.  Реализация интерфейса зависит от конкретного класса.

5.  С каждым классом геометрии ассоциированы системы отсчета, которые определяют пространственные ($XYZ$) и дополнительные ($M$) измерения.

## Интерфейс класса `GEOMETRY`

| Метод            | Описание                                                                                                                                                                             |
|---------------------|---------------------------------------------------|
| `Dimension()`    | Пространственная размерность *данного* геометрического объекта. Меньше или равна размерности координат. Для гетерогенных коллекций --- максимальная размерность содержимых объектов. |
| `GeometryType()` | Имя подтипа класса `GEOMETRY`, экземпляром которого является *данный* объект.                                                                                                        |
| `SRID()`         | Идентификатор пространственной системы отсчета (SRS) данного объекта. Как правило, является внешним ключом к таблице систем отсчета.                                                 |

## Интерфейс класса `GEOMETRY`

| Метод        | Описание                                                                                                                                                                                                                                                                                                      |
|--------------------|----------------------------------------------------|
| `Envelope()` | Минимальный ограничивающий прямоугольник данного объекта, параллельный осям координат. Полигон, определяемый углами $(X_{min}, Y_{min})$, $(X_{min}, Y_{max})$, $(X_{max}, Y_{max})$, $(X_{max}, Y_{min})$, $(X_{min}, Y_{min})$. При этом в фактических реализациях достаточно указать минимумы и максимумы. |
| `AsText()`   | Экспортирует данный геометрический объект в конкретное представление вида *Well-Known Text (WKB)*                                                                                                                                                                                                             |
| `AsBinary()` | Экспортирует данный геометрический объект в конкретное представление вида *Well-Known Binary (WKB)*                                                                                                                                                                                                           |

## Интерфейс класса `GEOMETRY`

| Метод        | Описание                                                                                                                                                                                          |
|--------------------|----------------------------------------------------|
| `IsEmpty()`  | Возвращает `TRUE` ($1$), если *данный* геометрический объект пуст, т.е. представляет пустое множество точек $\emptyset$ в координатном пространстве; возвращает `FALSE` ($0$) в противном случае. |
| `IsSimple()` | Возвращает `TRUE` ($1$), если *данный* геометрический объект не содержит аномальных точек, таких как самопересечения и самокасания; возвращает `FALSE` ($0$) в противном случае.                  |

## Интерфейс класса `GEOMETRY`

| Метод          | Описание                                                            |
|---------------------|---------------------------------------------------|
| `Is3D()`       | Возвращает `TRUE` ($1$), если *данный* объект имеет координаты $Z$. |
| `IsMeasured()` | Возвращает `TRUE` ($1$), если *данный* объект имеет координаты $M$. |
| `Boundary()`   | Возвращает *замыкание* комбинаторной границы *данного* объекта      |

::: callout-important
## Важно

Названия методов в программных реализациях Simple Features могут отличаться от предлагаемых в стандарте. Однако наличие соответствующих методов является условием реализации стандарта.
:::

## Граница и замыкание

Граничная точка

:   Точка, в любой окрестности которой находятся как принадлежащие, так и не принадлежащие множеству точки

Граница множества $\partial A$

:   Совокупность граничных точек множества

Замыкание множества $\overline A$

:   Объединение множества и его границы: $\overline A = A \cup \partial A$

Дополнение множества $A^-$, вложенного в $\mathbb R^n$ ($A \subset \mathbb R^n$)

:   Множество всех точек $\mathbb R^n$, не являющихся элементами множества: $A^- = \mathbb R^n \backslash A$

Внутренность множества ($A^{\circ}$)

:   Объединение всех открытых подмножеств множества: $A^\circ = \mathbb R^n \backslash \overline{A^-}$

## Топологическая граница

![](images/topological_boundary.svg){width="100%"}

## Симплекс

Симплекс $\Delta^n$

:   Геометрическая фигура, являющаяся $n$-мерным обобщением треугольника

Остов симплекса

:   Множество его вершин

Грань симплекса размерности $s$

:   $s$-мерный симплекс, остов которого является подмножеством остова $\Delta^n$.\
    *Ребро* --- это грань размерности $1$.

![](images/simplices.svg){width="100%"}

## Комплекс

::: columns
::: {.column width="30%"}
![](images/complex.svg){width="100%"}
:::

::: {.column width="70%"}

Симплициальный комплекс $\mathcal K$

:   Множество симплексов, удовлетворяющее условиям:

    1.  Все грани каждого симплекса из $\mathcal K$ также принадлежат $\mathcal K$
    2.  Непустое пересечение двух симплексов $\sigma_1, \sigma_2 \in \mathcal K$ является гранью как $\sigma_1$, так и $\sigma_2$.

Симплициальный $n$-комплекс $\mathcal K$

:   $\mathcal K$, в котором наибольшее измерение какого-либо симлекса равно $n$

Триангуляция

:   Разбиение геометрического объекта на симплексы
:::
:::

## Комбинаторная граница

Комбинаторная граница $\partial \mathcal K$ $n$-комплекса $\mathcal K$

:   Множество $(n-1)$-симплексов $\mathcal K$, каждый из которых входит в состав только одного $n$-симплекса $\mathcal K$ вместе со своими гранями.

![](images/combinatorial_solo.svg){width="60%"}

## Граница Simple Features

Замыкание комбинаторной границы *данного* объекта

![](images/combinatorial_boundary.svg){width="100%"}

## Дополнительные измерения

1.  Стандартные геометрические операции и топологические предикаты *игнорируют* дополнительные измерения $ZM$.

2.  Не существует ограничений на координату $M$ --- она, в частности, не обязана непрерывно возрастать вдоль объекта `LINESTRING`.

3.  Интерфейс объектов с $M$-геометрией содержит дополнительные методы `LocateAlong()` и `LocateBetween()`.

| Метод                   | Назначение                                                                                |
|-----------------------|-------------------------------------------------|
| `LocateAlong(m)`        | Возвращает производную геометрическую коллекцию, которая соответствует `m`                |
| `LocateBetween(m1, m2)` | Возвращает производную геометрическую коллекцию, которая соответствует отрезку `[m1, m2]` |

## Дополнительные измерения

Запрос измерения мультиточечного объекта:

**`p:`** `MULTIPOINT M(0 0 4, 2 1 1, 3 1 2, 4 2 4, 5 3 5, 7 2 7)`

**`p.LocateAlong(4):`** `MULTIPOINT M(0 0 4, 3 1 4)`

**`p.LocateBetween(2,4):`** `MULTIPOINT M(0 0 4, 2 1 2, 3 1 4)`

**`p.LocateAlong(3):`** `POINT M()` --- *пустой* объект

```{python}
mpts = shapely.MultiPoint(((0, 0), (2, 1), (3, 1), (4, 2), (5, 3), (7, 2)))
gmpts = gpd.GeoSeries(mpts)
df = pd.DataFrame({})
gdf = gpd.GeoDataFrame(df, geometry=gmpts)
gdf.plot(markersize = 50, color='orangered')
plt.show()
```

## Дополнительные измерения

Запрос измерения линейного объекта :

**`l:`** `MULTILINESTRING M((0 0 4, 2 1 1, 3 1 2), (4 2 4, 5 3 6))`

**`l.LocateAlong(3):`** `MULTIPOINT M(1.3 0.7 3)`

**`l.LocateBetween(2,5):`** `GEOMETRYCOLLECTION M(LINESTRING M(0 0 4,1.33 0.67 2),POINT M(3 1 2),LINESTRING M(4 2 4,4.5 2.5 5))`

**`l.LocateAlong(0.5):`** `POINT M()` --- *пустой* объект

```{python}
#| fig-height: 4
mline = shapely.MultiLineString((((0, 0), (2, 1), (3, 1)), ((4, 2), (5, 3), (7, 2))))
gmline = gpd.GeoSeries(mline)
df = pd.DataFrame({})
gdf = gpd.GeoDataFrame(df, geometry=gmline)
gdf.plot(color='orangered')
plt.show()
```

## Геометрическая коллекция

`GEOMETRYCOLLECTION` --- коллекция геометрических элементов

-   Единственное ограничение: все элементы коллекции должны иметь единую пространственную систему отсчета.

-   Подклассы могут накладывать дополнительные ограничения.

-   Порядок элементов коллекции не имеет значения.

-   Интерфейс должен поддерживать методы `NumGeometries()` и `GeometryN()`

| Метод             | Назначение                                                          |
|-----------------------|-------------------------------------------------|
| `NumGeometries()` | Возвращает количество геометрий в *данной* геометрической коллекции |
| `GeometryN(n)`    | Возвращает $n$-ную геометрию в данной геометрической коллекции      |

## Точка (`POINT`)

::: columns
::: {.column width="50%"}
`POINT` --- $0$-мерный геометрический объект, единичное местоположение

Граница `POINT` --- пустое множество: $\partial A = \varnothing$

Интерфейс точки должен поддерживать возвращение ее координат:
:::

::: {.column width="50%"}
```{python}
#| out-width: 800px
mpt = shapely.Point((1, 1))
gmpt = gpd.GeoSeries(mpt)
df = pd.DataFrame({})
gdf = gpd.GeoDataFrame(df, geometry=gmpt)
gdf.plot(color='orangered', markersize = 250)
plt.show()
```
:::
:::

| Метод | Назначение                                                           |
|-----------------|-------------------------------------------------------|
| `X()` | Координата $x$ *данного* объекта `POINT`                             |
| `Y()` | Координата $y$ *данного* объекта `POINT`                             |
| `Z()` | Координата $z$ *данного* объекта `POINT`, или `NULL` если не задано. |
| `M()` | Координата $m$ *данного* объекта `POINT`, или `NULL` если не задано. |

## Мультиточка (`MULTIPOINT`)

`MULTIPOINT` --- $0$-мерная геометрическая коллекция объектов класса `POINT`.

::: columns
::: {.column width="70%"}
-   Элементы коллекции не связаны и не имеют какого-либо смыслового упорядочения (наследуется свойство `GEOMETRYCOLLECTION` ).

-   Граница `MULTIPOINT` --- пустое множество: $\partial A = \varnothing$.

-   Объект `MULTIPOINT` является простым, если ни одна пара `POINT` в его коллекции не совпадает.
:::

::: {.column width="30%"}
```{python}
#| fig-width: 3
#| fig-height: 1.5
#| out-width: 400px
#| out-height: 200px
mpts = shapely.MultiPoint(((0, 0), (2, 1), (3, 1), (4, 2), (5, 3), (7, 2)))
gmpts = gpd.GeoSeries(mpts)
df = pd.DataFrame({})
gdf = gpd.GeoDataFrame(df, geometry=gmpts)
gdf.plot(markersize = 50, color='orangered')
plt.show()
```
:::
:::

```{mermaid}
%%| fig-width: 9
flowchart LR
  A(MULTIPOINT) -->|"GeometryN( 0 )"| B(POINT)
  B -->|"X( )"| C(X)
  B -->|"Y( )"| D(Y)
```

## Кривая (`CURVE`)

`CURVE` --- одномерный геометрический объект, хранимый в виде последовательности точек.

::: columns
::: {.column width="30%"}
![](images/curve.svg){width="100%"}
:::

::: {.column width="70%"}
Кривая определяется как непрерывное отображение отрезка в пространство:

$$f: [a, b] \rightarrow R^n$$

-   Это абстрактный класс, вы не можете создать объект `CURVE`.

-   Интерполяция между точками определяется конкретным подклассом `CURVE`.

-   Стандарт определяет только подкласс `LINESTRING`, в котором используется линейная интерполяция.
:::
:::

## Кривая (`CURVE`)

-   Кривая является *простой*, если она не проходит дважды через одну и ту же точку, за исключением начальной и конечной точки:

$$
\texttt{f.IsSimple()} \Leftrightarrow \boxed{f(t_1)=f(t_2) \land t_1 \neq t_2 \color{red}{\Rightarrow} t_1 = a \land t_2 = b}  
$$

-   Кривая является замкнутой, если ее начальная точка равна конечной точке:

    $$
    \texttt{f.IsClosed()} \Leftrightarrow \boxed{f(a)=f(b)}  
    $$

-   Граница замкнутой кривой является пустым множеством:

    $$
    \texttt{f.IsClosed()} \Leftrightarrow \boxed{\partial f=\varnothing}  
    $$

## Кривая (`CURVE`)

-   Граница незамкнутой кривой содержит ее конечные точки:

    $$
    \texttt{!f.IsClosed()} \Leftrightarrow \boxed{\partial f=\{f(a), f(b)\}} 
    $$

-   Простая и замкнутая кривая является *кольцом* (`RING`).

-   Интерфейс объекта `CURVE` включает следующие методы:

| Метод          | Назначение                                               |
|------------------|------------------------------------------------------|
| `Length()`     | Длина данного объекта `CURVE` в ассоциированной СК       |
| `StartPoint()` | Начальная точка данного объекта `CURVE`                  |
| `EndPoint()`   | Конечная точка данного объекта `CURVE`                   |
| `IsClosed()`   | `TRUE`, если `StartPoint() == EndPoint()`                |
| `IsRing()`     | `TRUE`, если `IsSimple()` и `StartPoint() == EndPoint()` |

## `LINESTRING`, `LINE`, `LINEARRING`

`LINESTRING` --- это `CURVE` с линейной интерполяцией между точками.

::: columns
::: {.column width="30%"}
![](images/linestrings.svg){width="100%"}
:::

::: {.column width="70%"}
-   Каждая пара последовательных точек определяет отрезок

-   `LINE` --- это `LINESTRING` из двух точек

-   `LINEARRING` --- это простой замкнутый `LINESTRING`

-   Интерфейс содержит дополнительные методы:

| Метод         | Назначение                                     |
|---------------|------------------------------------------------|
| `NumPoints()` | Количество точек в данном объекте `LINESTRING` |
| `PointN(n)`   | $n$-я точка данного объекта `LINESTRING`       |
:::
:::

## `MULTICURVE`

`MULTICURVE` представляет 1-мерный подкласс `GEOMETRYCOLLECTION` --- коллекцию объектов `CURVE`.

::: columns
::: {.column width="30%"}
![](images/multicurve_borders.svg){width="100%"}
:::

::: {.column width="70%"}
-   `MULTICURVE` как и `CURVE` является абстрактным классом. Вы не можете создать объект данного класса.

-   `MULTICURVE` является *простым*, если каждый его элемент является простым, а их пересечения происходят только в граничных точках.

-   Точка принадлежит границе объекта `MULTICURVE` если она принадлежит границам *нечетного* числа его элементов.

-   Объект `MULTICURVE` замкнут, если замкнуты всего его элементы.

-   Граница замкнутого объекта `MULTICURVE` всегда пуста.
:::
:::

## `MULTICURVE`

`MULTICURVE` представляет 1-мерный подкласс `GEOMETRYCOLLECTION` --- коллекцию объектов `CURVE`.

::: columns
::: {.column width="30%"}
![](images/closed_multicurves.svg){width="80%"}
:::

::: {.column width="70%"}
Интерфейс `MULTICURVE` дополнительно к `GEOMETRYCOLLECTION` реализует следующие методы:

| Метод        | Назначение                                                                                                                                                                  |
|-------------|-----------------------------------------------------------|
| `IsClosed()` | `TRUE` ($1$) если *данный* объект `MULTICURVE` является замкнутым (т.е. каждый объект `CURVE` в коллекции является замкнутым. Возвращает `FALSE` ($0$) в противном случае   |
| `Length()`   | Длина данного объекта `MULTICURVE`, которая равна сумме длин элементов коллекции.                                                                                           |
:::
:::

## Библиография
