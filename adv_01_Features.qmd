---
title: "Географическая информация и пространственные данные"
subtitle: "Основы геоинформатики. Лекция 1"
date: 02/10/2023
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  freeze: true
engine: jupyter
jupyter: python3
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Геоинформатика

![](images/semesters.png)

## База пространственных данных

База пространственных данных [@gost:52438-2005]

:   Совокупность пространственных данных, организованных по определенным правилам, устанавливающим общие принципы описания, хранения и манипулирования данными, предназначенная для удовлетворения информационных потребностей пользователя.

::: callout-warning
## Жаргон

Не рекомендуются к использованию словосочетания: база геоданных, пространственная база данных, база данных ГИС
:::

## Пространственный объект

Пространственный объект [@gost:52438-2005]

:   Цифровая модель материального или абстрактного объекта реального или виртуального мира с указанием его идентификатора, координатных и атрибутивных данных.

![](images/feature.svg){fig-align="center" width="100%"}

## Эволюция моделей СУБД

```{mermaid}
%%| fig-width: 11
flowchart TB
  A(Файловые) --> B(Сетевые)
  A --> C(Иерархические)
  C --> D(Реляционные / РСУБД)
  B --> D
  E(Объектно-ориентированные / ООСУБД) --> F(Объектно-Реляционные / ОРСУБД)
  D --> F
```

## Пространственные данные в РСУБД

```{python}
import shapely
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt


pol = shapely.Polygon(((5, 0), (0, 5), (3, 9), (8, 8), (6, 4), (5, 0)))
p = gpd.GeoSeries(pol)

df = pd.DataFrame(
  {
    "Name": ['Уч. 2'],
    "Area": [pol.area],
    "Price": [560000]
  }
)

gdf = gpd.GeoDataFrame(
    df, geometry=p
)
```

::: columns
::: {.column width="40%"}
```{python}
p.plot()
plt.show()
```

Представление в обычной РСУБД достаточно громоздко
:::

::: {.column width="60%"}
| Name  | Area | Price  | BoundaryID |
|-------|------|--------|------------|
| Уч. 2 | 37.0 | 560000 | 1055       |

: Parcels

| BoundaryID | Edge |
|------------|------|
| 1055       | A    |
| 1055       | B    |
| 1055       | C    |
| 1055       | D    |
| 1055       | E    |

: Polygons
:::
:::

## Пространственные данные в РСУБД

::: columns
::: {.column width="50%"}
```{python}
p.plot()
plt.show()
```

Представление в обычной РСУБД достаточно громоздко
:::

::: {.column width="25%"}
| Edge | Point |
|------|-------|
| A    | 1     |
| A    | 2     |
| B    | 2     |
| B    | 3     |
| C    | 3     |
| C    | 4     |
| D    | 4     |
| D    | 5     |
| E    | 5     |
| E    | 1     |

: Edges
:::

::: {.column width="25%"}
| Point | X   | Y   |
|-------|-----|-----|
| 1     | 5   | 0   |
| 2     | 0   | 5   |
| 3     | 3   | 9   |
| 4     | 8   | 8   |
| 5     | 6   | 4   |

: Points
:::
:::

## Пространственные данные в РСУБД

::: columns
::: {.column width="50%"}
```{python}
p.plot()
plt.show()
```

Представление в обычной РСУБД достаточно громоздко
:::

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 2
flowchart TB
  A(Parcels) --> B(Polygons)
  B --> C(Edges)
  C --> D(Points)
```
:::
:::

## Абстрактные типы данных

Важным наследием объектно-ориентированных систем является поддержка абстрактных типов данных.

::: columns
::: {.column width="45%"}
*Примитивные типы данных* составляют основу реляционных БД. ![](images/elementary_types.svg){width="90%"}
:::

::: {.column width="55%"}
*Абстрактные типы данных (АТД)* обеспечивают хранение коллекций и объектов со свойствами. ![](images/abstract_types.svg){width="100%"}
:::
:::

Большинство ОРСУБД предлагают модульный подход к АТД, позволяя добавлять и удалять их.

## Пространственная СУБД

Абстрактные типы данных открывают возможность для реализации возможностей пространственных СУБД. ПСУБД должна отвечать следующим требованиям:

1.  Представляет собой программный модуль, взаимодействующий с нижестоящей СУБД или являющийся ее компонентой
2.  Поддерживает множественные модели пространственных данных, соответствующие им абстрактные типы данных, а также язык запросов, из которого эти типы могут быть вызваны.
3.  Реализует пространственное индексирование, эффективные алгоритмы пространственных операций и специальные правила оптимизации запросов.

## Пространственная СУБД

Основу функционирования ПСУБД составляют следующие аспекты:

1.  Модели пространственных данных и пространственных отношений.
2.  Язык запросов
3.  Обработка и оптимизация запросов
4.  Организация файлового хранилища
5.  Выполнение аналитических операций

## Модели пространственных данных

![](images/basic_primitives.svg){width="100%"}

Абстрактные типы данных в ПСУБД реализуют различные модели пространственных данных

## Пространственные отношения

![](images/sp_relations.svg){width="100%"}

Пространственные запросы в ПСУБД опираются на модели пространственных отношений

## Язык запросов

**Structured Query Language (SQL)** --- язык структурированных запросов. Применяется для создания, модификации и управления данными в реляционной базе данных.

Пространственная СУБД поддерживает создание и манипулирование пространственными типами данных:

``` small
SELECT 'SRID=4326;POINT(-123 34)'::geography
"0101000020E61000000000000000C05EC00000000000004140"

CREATE TABLE geotable(gid serial PRIMARY KEY, name TEXT, geom geography(POINT) );

INSERT INTO geotable ( name, geom )
  VALUES ( ST_GeomFromEWKT('SRID=312;POINTM(-126.4 45.32 15)'), 'A Place' )
```

## Пространственные расширения SQL

``` small
SELECT
  m.name,
  SUM(ST_Length(r.geom))/1000 as roads_km
FROM bc_roads AS r
JOIN bc_municipality AS m
  ON ST_Contains(m.geom, r.geom)
GROUP BY m.name
ORDER BY roads_km;

name                        | roads_km
----------------------------+------------------
SURREY                      | 1539.47553551242
VANCOUVER                   | 1450.33093486576
LANGLEY DISTRICT            | 833.793392535662
BURNABY                     | 773.769091404338
PRINCE GEORGE               | 694.37554369147
...
```

## Обработка запросов

![](images/query_plan.svg){width="100%"}

-   SQL --- декларативный язык. Он описывает *что* необходимо получить, но не *как*, т.е. не сам алгоритм выполнения процедуры.

-   СУБД должна самостоятельно определить план эффективного выполнения запроса.

-   Обработка запроса представляет собой последовательность шагов, которую инициирует СУБД для выполнения запроса.

## Обработка запросов

``` small
SELECT
FROM reltypes R, soiltypes S
WHERE st_area(S.geom) < 10000 AND st_area(R.geom) < 10000
AND st_intersects(R.geom, s.geom)
```

![](images/filter_refine.svg){width="100%"}

Пространственный запрос состоит из фильтрации (`FILTER`) на основе MBR и уточнения (`REFINE`) по реальной геометрии.

## Хранение данных

Данные в файлах имеют одномерное упорядочение. Однако записи можно хранить так чтобы пространственно близкие располагались ближе друг к другу

![](images/ordering_comp.svg){width="100%"}

## Векторная модель

**Simple Features** --- стандарт @OGC2010, который определяет общую модель хранения и доступа к простым (векторным) объектам.

-   все геометрии состоят из точек;
-   все точки в геометрии имеют одинаковую размерность;
-   размерность точек может быть 2, 3 или 4.

В дополнение к обязательным измерениям $X$ и $Y$ *возможны*:

-   $Z$, обозначающее высоту
-   $M$, обозначающее некоторую меру --- например, время

Существует 4 варианта координат: $XY$, $XYZ$, $XYM$ и $XYZM$.

В географических координатах $X$ --- долгота, $Y$ --- широта.

## Векторная модель

![](images/sf_hierarchy.svg){width="100%"}

## Векторная модель

Стандарт включает в себя **17 моделей пространственных объектов**.

::: columns
::: {.column width="50%"}
Основными являются 7 моделей:

-   **Линейно связные**: `POINT`, `LINESTRING`, `POLYGON`
-   **Линейно несвязные**: `MULTIPOINT`, `MULTIPOINT`, `MULTIPOLYGON`, `GEOMETRYCOLLECTION`
:::

::: {.column width="50%"}
::: callout-note
## Линейная связность

Линейно связным называется пространство, в котором любые две точки можно соединить непрерывной кривой.

![](images/connect.svg){width="60%"}
:::
:::
:::

Оставшиеся виды моделей включают: `CIRCULARSTRING`, `COMPOUNDCURVE`, `CURVEPOLYGON`, `MULTICURVE`, `MULTISURFACE`, `CURVE`, `SURFACE`, `POLYHEDRALSURFACE`, `TIN`, `TRIANGLE`.

## Векторная модель

![](images/simple_features.svg){width="100%"}

## Векторная модель

**Линейно связные** модели пространственных объектов.

| Тип          | Описание                                                                                                                                                                                                                                         |
|-----------------------|------------------------------------------------|
| `POINT`      | нуль-мерная геометрия, содержащая одну точку                                                                                                                                                                                                     |
| `LINESTRING` | последовательность точек, соединенных прямыми, несамопересекающимися отрезками; одномерная геометрия                                                                                                                                             |
| `POLYGON`    | геометрия с положительной площадью (двумерная); последовательность точек, отрезки между которыми формируют замкнутое кольцо без самопересечений; первое кольцо является внешним, ноль и более остальных колец представляют дырки внутри полигона |

## Векторная модель

**Линейно несвязные** модели пространственных объектов.

| Тип                  | Описание                                                                                                              |
|-----------------------|------------------------------------------------|
| `MULTIPOINT`         | множество точек; геометрия типа `MULTIPOINT` называется *простой* если ни одна пара точек в `MULTIPOINT` не совпадает |
| `MULTILINESTRING`    | множество линий                                                                                                       |
| `MULTIPOLYGON`       | множество полигонов                                                                                                   |
| `GEOMETRYCOLLECTION` | множество геометрий произвольного типа за исключением `GEOMETRYCOLLECTION`                                            |

## Хранение координат

```{r}
library(sf)
p = st_point(c(0.5,0.5))

pc = rbind(c(0.5,0.5), c(1, 3), c(2, 1), c(0.2, 2), c(2, 3), c(1.5, 1.5))
mp = st_multipoint(pc)

s1 = rbind(c(0,1),c(0.5,1.5),c(1.2,1.2),c(2,1.3),c(3,2))
ls = st_linestring(s1)

s1 = rbind(c(0.5,1.5),c(1.2,1.2),c(2,1.3))
s2 = rbind(c(0,1.5),c(0.5,2.0),c(1.2,1.7))
s3 = rbind(c(2,1.8),c(3,2.5))
mls = st_multilinestring(list(s1,s2,s3))

p1 = rbind(c(0.5,0.5), c(2,0), c(3,2), c(1.5,4), c(0,3), c(0.5,0.5))
p2 = rbind(c(1,1), c(0.8,2), c(2,2.2), c(1.4,1.1), c(1,1))
pol = st_polygon(list(p1, p2))
p3 = rbind(c(3,3.3), c(3.5, 3.1), c(4,3), c(4,3.7), c(3.7, 3.96), c(3.2,4), c(3,3.3))
p4 = rbind(c(3.2,3.4), c(3.8,3.2), c(3.8,3.7), c(3.3,3.8), c(3.2,3.4))
p5 = rbind(c(3,1.2), c(2.5,0.2), c(3.5,0.2), c(3.5,1.2), c(3,1.2))
p6 = rbind(c(0,1), c(0.1,0.8), c(0.2,0.5), c(0.1,0.3), c(0, 0.7), c(0,1))
mpol = st_multipolygon(list(list(p1,p2), list(p3,p4), list(p5), list(p6)))

gc = st_geometrycollection(list(pol, mp + c(3, -1), mls + c(2.5,2)))
```

**Well-Known Text (WKT)** --- текстовый формат

```{r}
cat(st_as_text(p))
cat(st_as_text(ls))
cat(st_as_text(pol))
cat(st_as_text(mp))
cat(st_as_text(mls))
# cat(st_as_text(mpol))
# cat(st_as_text(gc))
```

::: callout-note
## Назначение

Формат **WKT** используется в текстовых форматах файлов, а также для визуального анализа координат объектов. Он занимает много места в памяти компьютера и медленно читается/записывается программами.
:::

## Хранение координат

**Well-Known Binary (WKB)** --- бинарный формат

```{r}
cat('POINT:', st_as_binary(p))
cat('LINESTRING:', st_as_binary(ls))
# cat('POLYGON:', st_as_binary(pol))
# cat(st_as_binary(mp))
# cat(st_as_binary(mls))
# cat(st_as_binary(mpol))
# cat(st_as_binary(gc))
```

::: callout-note
## Назначение

Формат **WKB** используется в бинарных форматах файлов, в том числе а базах данных. Он занимает мало места в памяти компьютера и быстро читается/записывается программами, но не подходит для визуального анализа.
:::

## Особенности векторной модели

1.  Используется для реализации объектно-ориентированной концептуальной модели.
2.  Основана на генерализации. Физическое или абстрактное тело представляется в виде конечного множества координат.
3.  В зависимости от уровня детализации один и тот же объект может представляться с помощью разной модели.
4.  Значения атрибутов в пределах границ каждого объекта предполагаются постоянными.

::: callout-warning
## Ограничение

Векторная модель не годится для представления *географических полей*.
:::

## Библиография
