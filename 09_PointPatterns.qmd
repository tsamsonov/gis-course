---
title: "Пространственная статистика III: модели размещения объектов"
subtitle: "Основы геоинформатики: лекция 9"
date: 04/14/2023
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  message: false
engine: knitr
format:
  revealjs: 
    theme: [default, custom_small.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Пространственная статистика

**Пространственная статистика** --- анализ и моделирование пространственных явлений методами математической статистики.

![](images/spatstat1.svg){width="100%"}

## Пространственная статистика

**Пространственная статистика** --- анализ и моделирование пространственных явлений методами математической статистики.

![](images/spatstat2.svg){width="100%"}

## Размещение

::: columns
::: {.column width="65%"}
**Размещение** объектов в пространстве может как быть случайным, так и подчиняться определенным закономерностям.

Модели размещения позволяют описать характер размещения в виде количественных статистических параметров.

::: callout-note
## Как это работает?

Например, плотность размещения деревьев можно связать с крутизной и экспозицией склона.
:::
:::

::: {.column width="35%"}
![](images/patterns.svg){width="100%"}
:::
:::

## Точечный процесс и паттерн

```{r}
library(tidyverse)
library(sf)
library(spatstat)
library(gganimate)

lambda = 300 # Интенсивность Пуассоновского процесса
k = 10 # Интенсивность кластеров
s = 0.04 # Ожидаемый размер кластера
m = 15 # Ожидаемое количество точек в кластере
r = 0.05 # Расстояние ингибиции (для регулярного процесса)
```

::: columns
::: {.column width="50%"}
**Точечный процесс** --- случайный процесс $\mathbf P$ , *реализациями* которого являются точечные паттерны.

**Точечный паттерн** --- неупоря-доченное множество точек:

$$\mathbf{p} = \{p_1, p_2,...p_n\}$$

Количество точек $n = n(\mathbf p)$ может быть любым неотрицательным числом.
:::

::: {.column width="50%"}
```{r, fig.width=4, fig.height=4}
adf = function(ppp) {
  ppp$df = tibble(
    x = ppp$x,
    y = ppp$y
  )
  return(ppp)
}

nframes = 20
pois = lapply(1:nframes, \(iter) { 
  p = rpoispp(lambda)
  tibble(
    x = p$x,
    y = p$y,
    iter = iter
  )
}) |> bind_rows()

gp = ggplot(pois, aes(x,y)) +
  geom_point(size = 3, color = 'steelblue4') +
  coord_equal() +
  theme_void() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 480, height = 480)
```
:::
:::

## Эталонные распределения

Характер пространственного распределения устанавливается путем сравнения с **эталонными моделями** распределений.

::: columns
::: {.column width="50%"}
Распространены следующие эталонные распределения:

1.  Абсолютно случайное
    -   однородное

    -   неоднородное
2.  Кластерное
3.  Регулярное
:::

::: {.column width="50%"}
::: callout-tip
## Экспериментальный подход

1.  В пределах той же территории генерируется множество случайных паттернов, состоящих из того же числа точек.
2.  Статистические характеристики случайных паттернов сравниваются с аналогичными характеристиками фактического распределения.
3.  Делается вывод о том, к какому распределению принадлежит фактическое.
:::
:::
:::

## Абс. случайное распределение

::: columns
::: {.column width="55%"}
1.  Координаты $X$ и $Y$ имеют равномерное распределение в заданной области $B$.

2.  Ожидаемое количество точек, попадающих в регион $B$ пропорционально его площади:

$$
\mu = \mathbb E\big[n(\mathbf{P} \cap B)\big] = \lambda |B|,
$$

где $\lambda$ --- интенсивность.
:::

::: {.column width="45%"}
```{r yeah}
gp = ggplot() +
  annotate('rect', xmin = 0.1, xmax = 0.7, 
           ymin = 0.2, ymax = 0.7, alpha = 0.5, 
           color = 'magenta', fill = 'pink') +
  annotate("text", x = 0.4, y = 0.45, 
           label = "B", size = 20) +
  geom_point(data = pois, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  coord_equal() +
  theme_bw() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 480, height = 480)
```
:::
:::

::: callout-tip
## Интенсивность

Интенсивность точечного процесса --- ожидаемое количество точек *на единицу площади*.
:::

## Абс. случайное распределение

::: columns
::: {.column width="55%"}
Вероятность того, что в области $B$ окажется ровно $k$ точек имеет распределение Пуассона:

$$
\mathbb{P}\{N = k\} = e^{-\mu} \frac{\mu^k}{k!}
$$

::: callout-note
## Пуассоновский процесс

Абсолютно случайный точечный процесс также называют *пуассоновским*.
:::
:::

::: {.column width="45%"}
```{r, ref.label='yeah'}
```
:::
:::

::: callout-tip
## Однородный пуассоновский процесс

Пуассоновский процесс называется *однородным*, если его интенсивность не зависит от местоположения. То есть, $\lambda$ --- константа.
:::

## Симуляция Пуассоновского процесса

Пусть дана область $B = [x_{min}, x_{max}] \times [y_{min}, y_{max}]$ и интенсивность точечного процесса $\lambda$.

Необходимо сгенерировать:

1.  Случайное число $N$, имеющее распределение Пуассона с параметром $\mu = \lambda |B|$.

2.  $N$ координат $x_i = x_1, x_2, ..., x_N$, имеющих равномерное распределение на промежутке $[x_{min}, x_{max}]$.

3.  $N$ координат $y_i = y_1, y_2, ..., y_N$, имеющих равномерное распределение на промежутке $[y_{min}, y_{max}]$.

Точечный паттерн $p_i = (x_i, y_i)$ собирается из полученных координат.

## Неоднородная случайность

::: columns
::: {.column width="55%"}
1.  Неоднородный пуассоновский процесс имеет функцию интенсивности $\lambda(x,y)$, которая зависит от местоположения.
2.  Ожидаемое количество точек в регионе $B$:

$$
\mu = \mathbb E\big[n(\mathbf{P} \cap B)\big] = \int_B \lambda(x,y) dx dy
$$

::: callout-note
## Процесс Кокса

Процесс Кокса --- неоднородный Пуассоновский процесс, в котором $\lambda$ --- случайная величина.
:::
:::

::: {.column width="45%"}
```{r}
hpois = lapply(1:nframes, \(iter) {
  lambda = function(x,y) { 500 * (y^2 + x) }
  p = rpoispp(lambda)
  tibble(
    x = p$x,
    y = p$y,
    iter = iter
  )
}) |> bind_rows()

gp = ggplot() +
  annotate('rect', xmin = 0.1, xmax = 0.7, 
           ymin = 0.2, ymax = 0.7, alpha = 0.5, 
           color = 'magenta', fill = 'pink') +
  annotate("text", x = 0.4, y = 0.45, 
           label = "B", size = 20) +
  geom_point(data = hpois, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  coord_equal() +
  theme_bw() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 480, height = 480)
```

$$
\lambda(x,y) = x + y^2
$$
:::
:::

## Симуляция неоднородного процесса

Метод *Льюиса-Шедлера* (Lewis-Shedler thinning):

1.  Генерируется однородный Пуассоновской процесс с интенсивностью $\lambda_{max} = \max\big[\lambda(x, y)\big]$.

2.  Осуществляется случайное прореживание (исключение) точек с вероятностью сохранения точки $\mathbb P(x,y) = \lambda(x,y) / \lambda_{max}$, пропорциональной функции интенсивности.

Чтобы понять, будет ли точка исключена, генерируется случайное число 0 или 1, имеющее распределение Бернулли с вероятностью положительного исхода $\mathbb P = \mathbb P(x,y)$.

## Граничный эффект

::: columns
::: {.column width="50%"}
**Центробежная** конфигурация (тяготеет к границе) может свидетельствовать о:

-   влиянии объектов (границы) на конфигурацию точек

-   наличии определенного ресурса у границы

-   необходимости предотвращения выхода объектов другого типа за границу объекта или проникновения извне
:::

::: {.column width="50%"}
```{r}
border = lapply(1:nframes, \(iter) {
  lambda = function(x,y) { 500 * ((y-0.5)^2 + (x-0.5)^2) }
  p = rpoispp(lambda)
  tibble(
    x = p$x,
    y = p$y,
    iter = iter
  )
}) |> bind_rows()

gp = ggplot() +
  geom_point(data = border, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  coord_equal() +
  theme_bw() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 480, height = 480)
```
:::
:::

## Граничный эффект

::: columns
::: {.column width="50%"}
**Центростремительная** конфигурация (отталкивается от границы) может свидетельствовать о:

-   неблагоприятности приграничных территорий для данного типа точек

-   сосредоточении ресурсов в центральной части региона
:::

::: {.column width="50%"}
```{r}
center = lapply(1:nframes, \(iter) {
  lambda = function(x,y) { 500 * (1.0 - abs(y-0.5) - abs(x-0.5)) }
  p = rpoispp(lambda)
  tibble(
    x = p$x,
    y = p$y,
    iter = iter
  )
}) |> bind_rows()

gp = ggplot() +
  geom_point(data = center, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  coord_equal() +
  theme_bw() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 480, height = 480)
```
:::
:::

## Кластерное распределение

::: columns
::: {.column width="50%"}
**Кластерным** называется распределение, в котором точки имеют тенденцию образовывать скопления --- кластеры.

Точки из одного кластера в среднем значительно ближе, чем точки из разных кластеров.

::: callout-note
## Кластер

Объединение нескольких однородных элементов, которое может рассматриваться как самостоятельная единица, обладающая определёнными свойствами.
:::
:::

::: {.column width="50%"}
```{r}
matern = lapply(1:nframes, \(iter) {
  p = rMatClust(k, s, m)
  tibble(
    x = p$x,
    y = p$y,
    iter = iter
  )
}) |> bind_rows()

gp = ggplot() +
  geom_point(data = matern, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  coord_equal() +
  theme_bw() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 480, height = 480)
```
:::
:::

## Кластерное распределение

Модели кластерных процессов работают в три этапа.

I. Генерируется "родительский" точечный процесс:

```{r}
parents = tibble(
  x = runif(k),
  y = runif(k)
)

ggplot() +
  geom_point(data = parents, mapping = aes(x,y), 
             size = 5, color = 'red') +
  coord_equal() +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_bw()
```

## Кластерное распределение

Модели кластерных процессов работают в три этапа.

II\. Относительно родителей генерируются потомки:

```{r}
dist  = rnorm(m * k, 0, s)
theta = runif(m * k, 0, 2 * pi)
  
offspr = tibble(
  x = rep(parents$x, m) + dist * cos(theta),
  y = rep(parents$y, m) + dist * sin(theta)
)

ggplot() +
  geom_point(data = offspr, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  geom_point(data = parents, mapping = aes(x,y), 
             size = 5, color = 'red') +
  coord_equal() +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_bw()
```

## Кластерное распределение

Модели кластерных процессов работают в три этапа.

III\. Родительские точки исключаются:

```{r}
ggplot() +
  geom_point(data = offspr, mapping = aes(x,y), 
             size = 3, color = 'steelblue4') +
  coord_equal() +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_bw()
```

## Кластерное распределение

Самая известная кластерная модель --- **Неймана-Скотта**:

1.  Родительские точки --- Пуассоновский процесс.
2.  Внутри каждого кластера потомки распределены независимо друг от друга.
3.  Потомки из разных кластеров так же распределены независимо друг от друга
4.  Закон распределения потомков относительно центра кластера одинаков для всех кластеров.

::: callout-note
## Модель Неймана-Скотта

Модель Неймана-Скотта была разработана для описания звёздных скоплений, но нашла широкое применение за пределами астрономии, в том числе в географическом анализе.
:::

## Генерация потомков

Сдвиг координат родителя на вектор, длина и направление которого подчиняются заданном закону распределения.

::: columns
::: {.column width="50%"}
::: callout-note
## Процесс Матерна

```{r, fig.height=4, fig.width=4, fig.align='left'}
p = rMatClust(k*2, s * 1.5, m * 5)
matern = tibble(
    x = p$x,
    y = p$y
)

ggplot() +
  geom_point(data = matern, mapping = aes(x,y), 
             size = 1, color = 'blue', alpha = 0.25) +
  ggtitle("Равномерное распределение длины") +
  coord_equal() +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_bw() 
```
:::
:::

::: {.column width="50%"}
::: callout-note
## Процесс Томаса

```{r, fig.height=4, fig.width=4, fig.align='left'}
p = rThomas(k*2, s * 0.75, m * 5)
thomas = tibble(
    x = p$x,
    y = p$y
)

ggplot() +
  geom_point(data = thomas, mapping = aes(x,y), 
             size = 1, color = 'red', alpha = 0.25) +
  ggtitle("Нормальное распределение длины") +
  coord_equal() +
  xlim(0, 1) +
  ylim(0, 1) +
  theme_bw() 
```
:::
:::
:::

## Регулярное распределение

::: columns
::: {.column width="55%"}
**Регулярным** называется случайное распределение, при котором точки не могут располагаться ближе чем $r$ --- *расстояние* *ингибиции*.

::: callout-caution
## Регулярное ≠ равномерное

Не следует путать регулярное распределение с равномерным. Равномерность означает постоянную плотность распределения.
:::
:::

::: {.column width="45%"}
```{r, fig.width=4, fig.height=4}
ssi = lapply(1:nframes, \(iter) { 
  p = rSSI(r, lambda)
  tibble(
    x = p$x,
    y = p$y,
    iter = iter
  )
}) |> bind_rows()

gp = ggplot(ssi, aes(x,y)) +
  geom_point(size = 4, color = 'steelblue4', alpha = 0.5) +
  coord_equal() +
  theme_bw() +
  transition_states(iter)

animate(gp, fps = 1, nframes = nframes, 
        rewind = TRUE, detail = 0, width = 400, height = 400)
```
:::
:::

::: callout-tip
## Причины

Регулярность распределения обычно свидетельствует о конкуренции за пространство и часто встречается в животном мире.
:::

## Регулярное распределение

::: columns
::: {.column width="50%"}
**Последовательная** модель генерации:

-   генерировать абсолютно случайные (пуассоновские) точки по одной;

-   каждую последующую сохранять, если она находится на расстоянии не ближе $r$ от сохраненных ранее.
:::

::: {.column width="50%"}
```{r}
ssi_1 = ssi |> 
  filter(iter == 1) |> 
  mutate(num = row_number())

gp = ggplot(ssi_1, aes(x,y)) +
  geom_point(size = 4, color = 'steelblue4', alpha = 0.5) +
  coord_equal() +
  theme_bw() +
  transition_manual(num, cumulative = T)

animate(gp, nframes = gp$num, detail = 0, width = 480, height = 480)
```
:::
:::

## Диагностика распределений

Выявление типа распределения осуществляется на основе статистических тестов применительно к свойствам двух типов

::: columns
::: {.column width="50%"}
#### Свойства I порядка

Оценивается *интенсивность* точечного процесса $\lambda$ , ее статистическое распределение

-   плотность пространственного распределения;

-   количество точек по ячейкам регулярной сетки.
:::

::: {.column width="50%"}
#### Свойства II порядка

Оцениваются *расстояния* между точками, их статистическое распределение

-   расстояние до ближайшего соседа;

-   расстояние до $K$ ближайших соседей (функция Рипли).
:::
:::

## Плотность распределения

Оценка плотности пространственного распределения делается методом **ядерного сглаживания**.

Над каждой точкой позиционируется *ядро* --- мини-поверхность:

![](images/density_1.svg){width="100%"}

## Плотность распределения

Оценка плотности пространственного распределения делается методом **ядерного сглаживания**.

*Сумма* поверхностей дает оценку плотности в точке:

![](images/density_2.svg){width="100%"}

## Плотность распределения

::: columns
::: {.column width="50%"}
**Однородный пуассоновский**

```{r, fig.width=5, fig.height=5}
pat = filter(pois, iter == 1)
ggplot(pat, aes(x,y)) +
  geom_density_2d_filled() +
  geom_density_2d(linewidth = 0.25, colour = "black") +
  geom_point(alpha = 0.5) +
  coord_equal() +
  guides(fill = guide_legend(override.aes = list(size = 0.5))) +
  theme(legend.title = element_text(size = 7), 
        legend.text = element_text(size = 7))
```
:::

::: {.column width="50%"}
**Неоднородный пуассоновский**

```{r, fig.width=5, fig.height=5}
pat = filter(hpois, iter == 1)
ggplot(pat, aes(x,y)) +
  geom_density_2d_filled() +
  geom_density_2d(linewidth = 0.25, colour = "black") +
  geom_point(alpha = 0.5) +
  coord_equal() +
  guides(fill = guide_legend(override.aes = list(size = 0.5))) +
  theme(legend.title = element_text(size = 7), 
        legend.text = element_text(size = 7))
```
:::
:::

## Плотность распределения

::: columns
::: {.column width="50%"}
**Кластерный Матерна**

```{r, fig.width=5, fig.height=5}
ggplot(matern, aes(x,y)) +
  geom_density_2d_filled() +
  geom_point(alpha = 0.25) +
  geom_density_2d(linewidth = 0.25, colour = "black") +
  coord_equal() +
  guides(fill = guide_legend(override.aes = list(size = 0.5))) +
  theme(legend.title = element_text(size = 7), 
        legend.text = element_text(size = 7))
```
:::

::: {.column width="50%"}
**Кластерный Томаса**

```{r, fig.width=5, fig.height=5}
ggplot(thomas, aes(x,y)) +
  geom_density_2d_filled() +
  geom_point(alpha = 0.25) +
  geom_density_2d(linewidth = 0.25, colour = "black") +
  coord_equal() +
  guides(fill = guide_legend(override.aes = list(size = 0.5))) +
  theme(legend.title = element_text(size = 7), 
        legend.text = element_text(size = 7))
```
:::
:::

## Плотность распределения

::: columns
::: {.column width="50%"}
**Диагностика плотности**

1.  Чем выше разброс значений плотности распределения, тем сильнее оно отличается от регулярного.
2.  При оценке плотности могут возникать краевые эффекты, связанные с тем, что вблизи границ располагается меньшее число точек
:::

::: {.column width="50%"}
**Регулярный**

```{r, fig.width=5, fig.height=5}
ggplot(ssi_1, aes(x,y)) +
  geom_density_2d_filled() +
  geom_point(alpha = 0.25) +
  geom_density_2d(linewidth = 0.25, colour = "black") +
  coord_equal() +
  guides(fill = guide_legend(override.aes = list(size = 0.5))) +
  theme(legend.title = element_text(size = 7), 
        legend.text = element_text(size = 7))
```
:::
:::

## G-функция

$G$**-функция** --- эмпирическая функция распределения расстояний до ближайшего соседа:

$$
G(r) = \frac{1}{n}\sum_{i=1}^n \big[r_{min}(p_i) < r \big],
$$

-   $r_{min}$ --- расстояние от $p_i$ до ближайшей к ней точки.

-   $[~\circ~]$ --- индикаторная функция, принимающая значения:

    -   $1$, если $\circ = ИСТИНА$,

    -   $0$, если $\circ = ЛОЖЬ$.

## G-функция

Чтобы понять тип распределения, необходимо сравнить $G$-функцию для фактического распределения с $G$-функцией, которую имел бы абсолютно случайный паттерн на той же территории при том же количестве точек

1.  По фактическим данным оценивается интенсивность процесса $\lambda$.
2.  Осуществляется множество симуляций пуассоновского процесса с интенсивностью $\lambda$.
3.  Для каждого значения $r$ находят среднюю величину $G(r)$, а также разброс $\pm 3\sigma$ по множеству симуляций.
4.  Полученные значения дают оценку ожидаемой $G$-функции и ее доверительного интервала для случайного распределения.

## G-функция

::: columns
::: {.column width="40%"}
**Абсолютно случайное** распределение

График фактического распределения $\widehat G_{obs} (r)$ находится в пределах доверительного интервала относительно теоретического распределения $G_{theo}(r)$.

Достоверных отличий нет.
:::

::: {.column width="60%"}
```{r, fig.width=5, fig.height=5, out.width='100%'}
pat = rpoispp(lambda)
rad = 0.005 * 0:200
G = envelope(pat, Gest, r = rad, nsim = 100, verbose=FALSE)
plot(G, xlim = c(0, 0.15), main = NULL)
```
:::
:::

## G-функция

::: columns
::: {.column width="40%"}
**Кластерное** распределение

График фактического распределения $\widehat G_{obs} (r)$ находится ***над*** графиком теоретического распределения $G_{theo}(r)$.

Малые расстояния встречаются *чаще*, чем в пуассоновском процессе.
:::

::: {.column width="60%"}
```{r, fig.width=5, fig.height=5, out.width='100%'}
pat = rMatClust(k, s, m)
rad = 0.005 * 0:200
G = envelope(pat, Gest, r = rad, nsim = 100, verbose=FALSE)
plot(G, xlim = c(0, 0.15), main = NULL)
```
:::
:::

## G-функция

::: columns
::: {.column width="40%"}
**Регулярное** распределение

График фактического распределения $\widehat G_{obs} (r)$ находится ***под*** графиком теоретического распределения $G_{theo}(r)$.

Малые расстояния встречаются *реже*, чем в пуассоновском процессе.
:::

::: {.column width="60%"}
```{r, fig.width=5, fig.height=5, out.width='100%'}
pat = rSSI(r, lambda)
rad = 0.005 * 0:200
G = envelope(pat, Gest, r = rad, nsim = 100, verbose=FALSE)
plot(G, xlim = c(0, 0.15), main = NULL)
```
:::
:::

## Пример

Рассмотрим данные по расположению деревьев во влажном тропическом лесу:

```{r, fig.align='left'}
data(bei)

beidf = tibble(
  x = bei$x,
  y = bei$y
)

ggplot(beidf, aes(x,y)) +
  geom_point(color = 'darkgreen', alpha = 0.5) +
  coord_equal() +
  theme_bw()
```

## Плотность распределения

Характер плотности пространственного распределения говорит о неоднородном Пуассоновском процессе

```{r}
ggplot(beidf, aes(x,y)) +
  geom_density_2d_filled() +
  geom_density_2d(linewidth = 0.25, colour = "black") +
  geom_point(alpha = 0.5) +
  coord_equal() +
  guides(fill = guide_legend(override.aes = list(size = 0.5))) +
  theme(legend.title = element_text(size = 7), 
        legend.text = element_text(size = 7)) +
  theme_bw()
```

## G-функция

Характер G-функции говорит о неоднородном Пуассоновском либо кластерном процессе

```{r, fig.width=10, fig.height=5, out.width='100%'}
rad = 0:200
G = envelope(bei, Gest, r = rad, nsim = 100, verbose=FALSE)
plot(G, xlim = c(0, 20), main = NULL)
```

## Высота рельефа

Можно связать функцию интенсивности с *ковариатами* --- внешними факторами, такими как высота и уклон рельефа.

```{r, fig.height=7, fig.width=12, fig.align='left'}
data(bei.extra)
elev = bei.extra[[1]] # высота
grad = bei.extra[[2]] # градиент (уклон)

plot(elev, main = NULL)
plot(bei, add = TRUE)
```

## Уклон

Можно связать функцию интенсивности с *ковариатами* --- внешними факторами, такими как высота и уклон рельефа.

```{r, fig.height=7, fig.width=12, fig.align='left'}
plot(grad, main = NULL)
plot(bei, add = TRUE)
```

## Оценка интенсивности

**Интенсивность процесса** как функция от уклона

```{r, fig.height=7, fig.width=12, fig.align='left'}
model = ppm(bei ~ offset(log(grad)), data = bei.extra)
plot(model, how = "image", se = FALSE, main = NULL)
```

## Моделирование

**Методом Льюиса-Шедлера** можно смоделировать альтернативные конфигурации неоднородного процесса:

```{r, fig.height=7, fig.width=12, fig.align='left'}
sim = simulate(model)
plot(elev, main = NULL)
plot(sim[[1]], col = 'black', cex = 0.5, add = TRUE)
```

## Моделирование

**Методом Льюиса-Шедлера** можно смоделировать альтернативные конфигурации неоднородного процесса:

```{r, fig.height=7, fig.width=12, fig.align='left'}
sim = simulate(model)
plot(elev, main = NULL)
plot(sim[[1]], col = 'black', cex = 0.5, add = TRUE)
```

## Моделирование

**Методом Льюиса-Шедлера** можно смоделировать альтернативные конфигурации неоднородного процесса:

```{r, fig.height=7, fig.width=12, fig.align='left'}
sim = simulate(model)
plot(elev, main = NULL)
plot(sim[[1]], col = 'black', cex = 0.5, add = TRUE)
```

## Моделирование

**Методом Льюиса-Шедлера** можно смоделировать альтернативные конфигурации неоднородного процесса:

```{r, fig.height=7, fig.width=12, fig.align='left'}
sim = simulate(model)
plot(elev, main = NULL)
plot(sim[[1]], col = 'black', cex = 0.5, add = TRUE)
```

## Моделирование

**Методом Льюиса-Шедлера** можно смоделировать альтернативные конфигурации неоднородного процесса:

```{r, fig.height=7, fig.width=12, fig.align='left'}
sim = simulate(model)
plot(elev, main = NULL)
plot(sim[[1]], col = 'black', cex = 0.5, add = TRUE)
```

## Словарик

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Случайный процесс

Точечный процесс

Точечный паттерн

Пуассоновский процесс

Неоднородный процесс

Кластерный процесс

Регулярный процесс

Плотность простр. распред.

Ядерное сглаживание

Эмпирическая функция распределения
:::

::: {.column width="50%" style="color: red"}
Random process

Point process

Point pattern

Poisson process

Inhomogeneous process

Cluster process

Regular process

Spatial density

Kernel smoothing

Cumulative distribution function
:::
:::

## Библиография
