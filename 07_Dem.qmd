---
title: "Цифровое моделирование рельефа и геоморфометрия"
subtitle: "Основы геоинформатики: лекция 7"
date: 03/29/2024
date-format: long
author: "Самсонов Тимофей Евгеньевич"
execute:
  echo: false
  message: false
  warning: false
  freeze: true
engine: knitr
format:
  revealjs: 
    theme: [default, custom.scss]
    margin: 0.2
    slide-number: true
    footer: "Самсонов Т. Е. Основы геоинформатики: курс лекций для студентов географического факультета МГУ"
    header-includes: <link rel="stylesheet" media="screen" href="https://fontlibrary.org//face/pt-sans" type="text/css"/>
bibliography: references.yaml
mainfont: PT Sans
---

## Покрытие

Покрытие [@ogc-07-011:2005]

:   Пространственный объект, который действует как **функция**, возвращающая значения

    -   в пределах своей *области значений* (атрибутивного домена);

    -   в пределах своей *области определения* (пространственного, временного или пространственно-временного домена);

    для любой *прямой позиции* — координат в СК покрытия.

![](images/complex_feature.svg){fig-align="center" width="100%"}

## Цифровая модель рельефа

Цифровая модель рельефа (ЦМР)

:   Покрытие, функция которого возвращает параметр(ы) рельефа земной поверхности.

::: callout-tip
## Примеры

Высоты, углы наклона, экспозиции, направления стока, закрытость небосвода
:::

Цифровая модель высот (ЦМВ)

:   Покрытие, функция которого возвращает отметку высоты земной поверхности.

::: callout-note
## Заменяемость терминов

Обычно, когда говорят о ЦМР, предполагают в виду именно ЦМВ, т.к. это наиболее распространенный случай. Ошибкой это не считается.
:::

## Растровая ЦМР

::: columns
::: {.column width="50%"}
Наиболее часто для представления ЦМР используются **растровые покрытия**.

В качестве *функции покрытия* используется билинейная, бикубическая и прочие методы интерполяции.

Справа изображен фрагмент растровой ЦМР. Окрестность $3 \times 3$.
:::

::: {.column width="50%"}
![](images/dem.svg){width="100%"}
:::
:::

## Растровая ЦМР --- пример

```{r}
#| fig-align: left
#| fig.width: 7 

library(sf)
library(terra)
library(tidyterra)
library(ggplot2)

dem = rast('data/dem_fergana.tif')

ggplot() +
  geom_spatraster(data = dem) +
  scale_fill_hypso_c() +
  labs(title = 'Ферганская долина', 
       fill = 'Высота, [м]')
```

## Растровая ЦМР --- крупно

```{r}
#| fig-align: left
#| fig.width: 7 

box = st_bbox(dem)
dx = box[3] - box[1]
dy = box[4] - box[2]
xl = c(box[1] + 1*dx/7, box[1] + 2*dx/7)
yl = c(box[2] + 4*dy/7, box[2] + 5*dy/7)

ggplot() +
  geom_spatraster(data = dem) +
  scale_fill_hypso_c() +
  labs(title = 'Ферганская долина', 
       fill = 'Высота, [м]') +
  coord_sf(xlim = xl, ylim = yl)
```

## Геоморфометрия

**Геоморфометрия** --- геометрический анализ *земной* *поверхности*.

Распространенные задачи геоморфометрии включают:

1.  Вычисление локальных морфометрических величин.
2.  Выделение форм и элементов форм рельефа.
3.  Гидрологический и топоклиматический анализ.

Для представления поверхности как правило используется ЦМР.

::: callout-note
## Применение

Методы геоморфометрии могут применяться к рельефу любой поверхности, не только земной. Например, градиент (скорость изменения) может быть вычислен как для отметок высот, так и для температур.
:::

## Аппроксимация поверхности

::: columns
::: {.column width="50%"}
Для вычисления производных поверхность локально аппроксимируется.

Например, в методе **Эванса** [@evans:1980] используется функция 2 степени:

$$
Z(x,y) = \\ Ax^2 + By^2 + Cxy + Dx +Ey + F
$$

::: callout-tip
## Узлов больше чем коэффициентов

Поэтому поверхность не проходит через узлы, а даёт общий тренд. Устойчивость к случайным ошибкам в данных повышается.
:::
:::

::: {.column width="50%"}
![](images/dem_surface.svg){width="100%"}
:::
:::

## Производные поверхности

::: columns
::: {.column width="50%"}
**Производные** поверхности имеют важнейшее значение для анализа рельефа:

$$
\frac{\partial Z}{\partial x} = 2Ax + Cy + D \rightarrow Z_x \\
\frac{\partial Z}{\partial y} = 2By + Cx + E \rightarrow Z_y
$$

При вычислении в центральном узле окрестности:

$$
Z_x (0,0) = D; \ \ Z_y (0,0) = E
$$
:::

::: {.column width="50%"}
![](images/dem_surface.svg){width="100%"}
:::
:::

## Морфометрические величины

::: columns
::: {.column width="50%"}
Морфометрические величины, рассчитываемые для узла сетки называются локальными.

**Уклон (**$S$**) и угол наклона (**$\phi$**)**:

$$
S = \sqrt{Z_x^2 + Z_y^2}; \ \phi = \arctan(S)
$$

**Экспозиция**:

$$
\theta = \pi - \arctan \Big(\frac{Z_y}{Z_x}\Big) + \frac{\pi}{2} \Big(\frac{Z_x}{|Z_x|}\Big)
$$
:::

::: {.column width="50%"}
![](images/dem_surface.svg){width="100%"}
:::
:::

## Углы наклона

```{r}
#| fig-align: left
#| fig.width: 7 
slope = terrain(dem, 'slope', 
                unit = 'degrees')

ggplot() +
  geom_spatraster(data = slope) +
  scale_fill_gradient(
    low = 'lightcyan', 
    high = 'darkred'
  ) +
  labs(title = 'Углы наклона', 
       fill = 'Градусы [°]')
```

## Углы наклона — крупно

```{r}
#| fig-align: left
#| fig.width: 7 

ggplot() +
  geom_spatraster(data = slope) +
  scale_fill_gradient(
    low = 'lightcyan', 
    high = 'darkred'
  ) +
  labs(title = 'Углы наклона', 
       fill = 'Градусы [°]')  +
  coord_sf(xlim = xl, ylim = yl)
```

## Экспозиция

```{r}
#| fig-align: left
#| fig.width: 7 
aspect = terrain(dem, 'aspect', 
                 unit = 'degrees')

ggplot() +
  geom_spatraster(data = aspect) +
  scale_fill_gradientn(
    colors = rainbow(9), 
    values = 0:8 / 8
  ) +
  labs(title = 'Экспозиция', 
       fill = 'Градусы [°]')
```

## Экспозиция — крупно

```{r}
#| fig-align: left
#| fig.width: 7 

ggplot() +
  geom_spatraster(data = aspect) +
  scale_fill_gradientn(
    colors = rainbow(9), 
    values = 0:8 / 8
  ) +
  labs(title = 'Экспозиция', 
       fill = 'Градусы [°]') +
  coord_sf(xlim = xl, ylim = yl)
```

## Морфометрические величины

**Кривизна кривой** обратно пропорциональна радиусу касательной окружности $r$ --- *радиусу кривизны*.

-   чем больше радиус, тем меньше кривизна;

-   выпуклые и вогнутые изгибы различаются знаком кривизны;

-   единица измерения кривизны обычно $1/м$.

![](images/curv.svg){width="100%"}

## Морфометрические величины

::: columns
::: {.column width="50%"}
**Плановая кривизна**:

$$
K_{p} = \frac{Z_{xx} \color{red}{Z_x^2 +} 2Z_{xy} Z_x Z_y + Z_{yy} \color{red}{Z_y^2} }{pq^{3/2}}
$$

::: callout-tip
## Интерпретация

Кривизна изолинии поверхности в точке. Положительные значения соответствуют областям дивергенции (хребты), отрицательные --- конвергенции (тальвеги).
:::
:::

::: {.column width="50%"}
**Профильная кривизна**:

$$
K_{c} = \frac{Z_{xx} \color{blue}{Z_y^2 -} 2Z_{xy} Z_x Z_y + Z_{yy} \color{blue}{Z_x^2} }{pq^{3/2}}
$$

::: callout-tip
## Интерпретация

Кривизна склона в направлении максимального уклона. Положительные значению соответствуют вогнутым склонам, отрицательные --- выпуклым.
:::
:::
:::

$\frac{\partial^2 Z}{\partial x^2} = 2A \rightarrow Z_{xx}; \  \frac{\partial^2 Z}{\partial y^2} = 2B \rightarrow Z_{yy}; \ \frac{\partial^2 Z}{\partial x \partial y} = C \rightarrow Z_{xy}$

$p = Z_x^2 + Z_y^2; \ q = p + 1$

## Плановая кривизна

```{r}
#| fig-align: left
#| fig.width: 7 
curv_plan = rast('data/curv_plan.tif')

ggplot() +
  geom_spatraster(data = curv_plan) +
  scale_fill_gradient2(low = "blue", high = "red") +
  labs(title = 'Плановая кривизна', 
       fill = '')
```

## Плановая кривизна — крупно

```{r}
#| fig-align: left
#| fig.width: 7

ggplot() +
  geom_spatraster(data = curv_plan) +
  scale_fill_gradient2(low = "blue", high = "red") +
  labs(title = 'Плановая кривизна', 
       fill = '') +
  coord_sf(xlim = xl, ylim = yl)
```

## Профильная кривизна

```{r}
#| fig-align: left
#| fig.width: 7 
curv_profile = rast('data/curv_profile.tif')

ggplot() +
  geom_spatraster(data = curv_profile) +
  scale_fill_gradient2(low = "blue", high = "red") +
  labs(title = 'Профильная кривизна', 
       fill = '')
```

## Профильная кривизна — крупно

```{r}
#| fig-align: left
#| fig.width: 7

ggplot() +
  geom_spatraster(data = curv_profile) +
  scale_fill_gradient2(low = "blue", high = "red") +
  labs(title = 'Профильная кривизна', 
       fill = '') +
  coord_sf(xlim = xl, ylim = yl)
```

## Интенсивность отражения света

В **модели** **Ламберта** зависит от угла $\alpha$ между вектором **нормали** к поверхности $\textbf N$ и вектором направления на источник света $\textbf L$:

::: columns
::: {.column width="55%"}
$$
I = \cos \alpha = (\textbf L, \textbf N)
$$

$\textbf N = \big\{-Z_x, -Z_y, 1 \big\} / \sqrt{Z_x^2 + Z_y^2 + 1}$

$\textbf L = \begin{cases} \cos(h) \cos(A),\\ \cos(h) \sin(A),\\ \sin(h) \end{cases}$

$(\textbf L, \textbf N)$ — скалярное произведение;

$A, \ h$ — азимут и высота источника света (Солнца).
:::

::: {.column width="45%"}
![](images/dem_lighting.svg){width="90%"}
:::
:::

## Аналитическая отмывка

Визуализация интенсивности отраженного света.

```{r}
#| fig-align: left
#| fig.width: 6

# углы наклона для классической отмывки
slope_rad10 = terrain(dem * 10, 'slope', unit = 'radians')

# углы наклона для вертикальной отмывки
slope_rad5 = terrain(dem * 5, 'slope', unit = 'radians')

# экспозиция для любой отмывки
aspect_rad = terrain(dem, 'aspect', unit = 'radians')

hill = shade(
  slope = slope_rad10, 
  aspect = aspect_rad, 
  angle = 45, 
  direction = 315
)

ggplot() +
  geom_spatraster(data = hill) +
  scale_fill_gradient(
    low = 'black', 
    high = 'white'
  ) +
  ggtitle('Отмывка при северо-западном освещении (A = 315, h = 45)') +
  theme(legend.position = "none")
```

## Аналитическая отмывка — крупно

Визуализация интенсивности отраженного света.

```{r}
#| fig-align: left
#| fig.width: 6

ggplot() +
  geom_spatraster(data = hill) +
  scale_fill_gradient(
    low = 'black', 
    high = 'white'
  ) +
  ggtitle('Отмывка при северо-западном освещении (A = 315, h = 45)') +
  theme(legend.position = "none") +
  coord_sf(xlim = xl, ylim = yl)
```

## Отвесная отмывка

*Отвесная* отмывка подчеркивает линии хребтов.

```{r}
#| fig-align: left
#| fig.width: 6

hill_vert = shade(
  slope = slope_rad5, 
  aspect = aspect_rad, 
  angle = 90
)

ggplot() +
  geom_spatraster(data = hill_vert) +
  scale_fill_gradient(
    low = 'black', 
    high = 'white'
  ) +
  ggtitle('Отмывка отвесная (h = 90)') +
  theme(legend.position = "none")
```

## Отвесная отмывка — крупно

*Отвесная* отмывка подчеркивает линии хребтов.

```{r}
#| fig-align: left
#| fig.width: 6

ggplot() +
  geom_spatraster(data = hill_vert) +
  scale_fill_gradient(
    low = 'black', 
    high = 'white'
  ) +
  ggtitle('Отмывка отвесная (h = 90)') +
  theme(legend.position = "none") +
  coord_sf(xlim = xl, ylim = yl)
```

## Комбинированная отмывка

Наиболее наглядна комбинация боковой и отвесной отмывки.

```{r}
#| fig-align: left
#| fig.width: 6

hill_comb = hill * hill_vert

ggplot() +
  geom_spatraster(data = hill_comb) +
  scale_fill_gradient(
    low = 'black', 
    high = 'white'
  ) +
  ggtitle('Комбинированная отмывка') +
  theme(legend.position = "none")
```

## Комб. отмывка — крупно

Наиболее наглядна комбинация боковой и отвесной отмывки.

```{r}
#| fig-align: left
#| fig.width: 6

ggplot() +
  geom_spatraster(data = hill_comb) +
  scale_fill_gradient(
    low = 'black', 
    high = 'white'
  ) +
  ggtitle('Комбинированная отмывка') +
  theme(legend.position = "none") +
  coord_sf(xlim = xl, ylim = yl)
```

## Гидрологический анализ ЦМР

**Гидрологический анализ ЦМР** --- совокупность методов обработки ЦМР, связанных с анализом и моделированием геометрических условий распределения поверхностного стока.

Распространенные задачи гидрологического анализа включают:

1.  Определение направлений стока.
2.  Вычисление площади водосбора.
3.  Построение сети потенциальных водотоков.
4.  Построение границ бассейнов.

::: callout-note
## Предварительная подготовка ЦМР

Для гидрологического анализа играют очень важную роль процедуры предварительной подготовки ЦМР, такие как *заполнение замкнутых понижений*.
:::

## Направление стока

**Направление стока** указывает распределение стока по одному или множеству направлений.

::: columns
::: {.column width="50%"}
В методе **D8** [@OCallaghan:1984bu] весь сток направляется в направлении ячейки с максимальным уклоном.

-   Направления кодируются числами вида $2^n$.

-   Код `0` используется для бессточных ячеек.

-   Направление стока строго однозначно.
:::

::: {.column width="50%"}
![](images/d8.svg){width="100%"}
:::
:::

## Направление стока

::: columns
::: {.column width="55%"}
**Алгоритм вычисления**
:::

::: {.column width="45%"}
![](images/d8_process0.svg){width="100%"}
:::
:::

## Направление стока

::: columns
::: {.column width="55%"}
**Алгоритм вычисления**

1.  Получить разности высот соседних ячеек и центральной ячейки
:::

::: {.column width="45%"}
![](images/d8_process1.svg){width="100%"}
:::
:::

## Направление стока

::: columns
::: {.column width="55%"}
**Алгоритм вычисления**

1.  Получить разности высот соседних ячеек и центральной ячейки

2.  Разности диагональных соседей поделить на $\sqrt{2}$, т.к. их центры соответственно дальше.
:::

::: {.column width="45%"}
![](images/d8_process2.svg){width="100%"}
:::
:::

## Направление стока

::: columns
::: {.column width="55%"}
**Алгоритм вычисления**

1.  Получить разности высот соседних ячеек и центральной ячейки

2.  Разности диагональных соседей поделить на $\sqrt{2}$, т.к. их центры соответственно дальше.

3.  Среди полученных разностей найти минимальную.
:::

::: {.column width="45%"}
![](images/d8_process3.svg){width="100%"}
:::
:::

## Направление стока

::: columns
::: {.column width="55%"}
**Алгоритм вычисления**

1.  Получить разности высот соседних ячеек и центральной ячейки

2.  Разности диагональных соседей поделить на $\sqrt{2}$, т.к. их центры соответственно дальше.

3.  Среди полученных разностей найти минимальную.

4.  Если она отрицательная, то присвоить соответствующий код направления.
:::

::: {.column width="45%"}
![](images/d8_final.svg){width="100%"}

::: callout-note
## Бессточная ячейка

Если все разности $\geq 0$, то стока из ячейки нет. Будет присвоен код $0$.
:::
:::
:::

## Направление стока

**Направление стока** указывает распределение стока по одному или множеству направлений.

::: columns
::: {.column width="50%"}
В методе **D8** [@OCallaghan:1984bu] весь сток направляется в направлении ячейки с максимальным уклоном.

-   Направления кодируются числами вида $2^n$.

-   Код `0` используется для бессточных ячеек.

-   Направление стока строго однозначно.
:::

::: {.column width="50%"}
![Пример растра направлений стока](images/d8_ex.svg){width="100%"}
:::
:::

## Направление стока

```{r}
library(whitebox)
# wbt_flow_accumulation_full_workflow(
#   dem       = 'data/dem_fergana.tif',
#   out_dem   = 'data/fill.tif',
#   out_pntr  = 'data/dir.tif',
#   out_accum = 'data/acc.tif',
#   out_type = 'ca'
# )
# 
# wbt_extract_streams(
#   flow_accum = 'data/acc.tif',
#   output = 'data/str.tif',
#   threshold = 1e8
# )
# 
# wbt_raster_streams_to_vector(
#   streams = 'data/str.tif',
#   d8_pntr = 'data/dir.tif',
#   output = 'data/streams.shp',
# )

# wbt_watershed(
#   d8_pntr = 'data/dir.tif',
#   pour_pts = 'data/pour_pts.shp',
#   output = 'data/wsh.tif'
# )

# wbt_raster_to_vector_polygons(
#   'data/wsh.tif', 'data/watersheds.shp'
# )

wbt_plan_curvature(
  dem = 'dem_fergana.tif',
  output = 'curv_plan.tif',
  log = TRUE,
  wd = 'data'
)

wbt_profile_curvature(
  dem = 'dem_fergana.tif',
  output = 'curv_profile.tif',
  log = TRUE,
  wd = 'data'
)

fill = rast('data/fill.tif')
dir = rast('data/dir.tif')
acc = rast('data/acc.tif')

streams = read_sf('data/streams.shp') |> 
  st_set_crs(crs(dem, proj=TRUE))

watersheds_1000 = read_sf('data/watersheds.shp') |> 
  st_set_crs(crs(dem, proj=TRUE))

streams_1000 = read_sf('data/streams1000.shp') |> 
  st_set_crs(crs(dem, proj=TRUE))

pour_pts = read_sf('data/pour_pts.shp') |> 
  st_set_crs(crs(dem, proj=TRUE))

levels(dir) = data.frame(
  value = c(0, 2^(0:7)), 
  desc = c('NA', 'NE', 'E', 'SE', 
           'S', 'SW', 'W', 'NW', 'N')
)
```

```{r}
#| fig-align: left
#| fig.width: 7
ggplot() +
  geom_spatraster(data = dir) +
  scale_fill_manual(values = rev(rainbow(9))) +
  labs(title = 'Направление стока', 
       fill = '')
```

## Направление стока — крупно

```{r}
#| fig-align: left
#| fig.width: 7
ggplot() +
  geom_spatraster(data = dir) +
  scale_fill_manual(values = rev(rainbow(9))) +
  labs(title = 'Направление стока', 
       fill = '') +
  coord_sf(xlim = xl, ylim = yl)
```

## Аккумуляция стока

**Аккумуляция стока ---** количественный показатель, аппроксимирующий площадь бассейна.

::: columns
::: {.column width="50%"}
Может быть выражена в:

-   *количестве* дренируемых ячеек --- сток из которых попадает в данный пиксель;

-   *суммарной площади* дренируемых ячеек.

-   *суммарной площади* дренируемых ячеек, нормированной на их ширину перпендикулярно направлению стока.
:::

::: {.column width="50%"}
![Пример растра аккумуляции стока](images/acc.svg){width="100%"}
:::
:::

## Аккумуляция стока

**Аккумуляция стока ---** количественный показатель, аппроксимирующий площадь бассейна.

::: columns
::: {.column width="50%"}
Аккумуляция в $j$-й ячейке:

$$
A_j = k + \sum_{i=1}^k A_i,
$$

-   $k$ --- количество соседних ячеек, сток из которых попадает в $j$-ю;

-   $A_i$ --- величина аккумуляции стока в $i$-й ячейке.
:::

::: {.column width="50%"}
![Пример растра аккумуляции стока](images/acc.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
:::

::: {.column width="50%"}
![Шаг 1](images/acc_0.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
2.  Вычислить $A_j = k + \sum_{i=1}^k A_i$ для всех ячеек, у которых $A_i$ *определено для всех входящих ячеек*.
:::

::: {.column width="50%"}
![Шаг 2](images/acc_1.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
2.  Вычислить $A_j = k + \sum_{i=1}^k A_i$ для всех ячеек, у которых $A_i$ *определено для всех входящих ячеек*.
3.  Повторять шаг 2 до тех пор, пока $A_j$ не будет известно для всех ячеек ЦМР.
:::

::: {.column width="50%"}
![Шаг 3](images/acc_2.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
2.  Вычислить $A_j = k + \sum_{i=1}^k A_i$ для всех ячеек, у которых $A_i$ *определено для всех входящих ячеек*.
3.  Повторять шаг 2 до тех пор, пока $A_j$ не будет известно для всех ячеек ЦМР.
:::

::: {.column width="50%"}
![Шаг 4](images/acc_3.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
2.  Вычислить $A_j = k + \sum_{i=1}^k A_i$ для всех ячеек, у которых $A_i$ *определено для всех входящих ячеек*.
3.  Повторять шаг 2 до тех пор, пока $A_j$ не будет известно для всех ячеек ЦМР.
:::

::: {.column width="50%"}
![Шаг 5](images/acc_4.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
2.  Вычислить $A_j = k + \sum_{i=1}^k A_i$ для всех ячеек, у которых $A_i$ *определено для всех входящих ячеек*.
3.  Повторять шаг 2 до тех пор, пока $A_j$ не будет известно для всех ячеек ЦМР.
:::

::: {.column width="50%"}
![Шаг 6](images/acc_5.svg){width="100%"}
:::
:::

## Аккумуляция стока

::: columns
::: {.column width="50%"}
Алгоритм вычисления:

1.  Записать $A_j=0$ во все ячейки, не имеющие входящего стока.
2.  Вычислить $A_j = k + \sum_{i=1}^k A_i$ для всех ячеек, у которых $A_i$ *определено для всех входящих ячеек*.
3.  Повторять шаг 2 до тех пор, пока $A_j$ не будет известно для всех ячеек ЦМР.
:::

::: {.column width="50%"}
![Шаг 7](images/acc_6.svg){width="100%"}
:::
:::

## Аккумуляция стока

```{r}
#| fig-align: left
#| fig.width: 7
ggplot() +
  geom_spatraster(data = acc / 10^9) +
  scale_fill_gradient(low = 'white', high = 'black', trans = 'log') +
  labs(title = 'Аккумуляция стока (площадь)', 
       fill = expression(Тыс.~км^2))
```

## Аккумуляция стока — крупно

```{r}
#| fig-align: left
#| fig.width: 7
ggplot() +
  geom_spatraster(data = acc / 10^9) +
  scale_fill_gradient(low = 'white', high = 'black', trans = 'log') +
  labs(title = 'Аккумуляция стока (площадь)', 
       fill = expression(Тыс.~км^2)) +
  coord_sf(xlim = xl, ylim = yl)
```

## Потенциальные водотоки

**Потенциальные водотоки ---** линии с высокой аккумуляцией стока.

::: columns
::: {.column width="50%"}
1.  Выделяют ячейки, аккумуляция стока в которых превышает заданную величину. На рисунке справа представлен пример для $A \geq 2$.
:::

::: {.column width="50%"}
![Растровая маска потенциальных водотоков](images/str.svg){width="100%"}
:::
:::

## Потенциальные водотоки

**Потенциальные водотоки ---** линии с высокой аккумуляцией стока.

::: columns
::: {.column width="50%"}
1.  Выделяют ячейки, аккумуляция стока в которых превышает заданную величину. На рисунке справа представлен пример для $A \geq 2$.
2.  Выполняют трассировку линий по узлам выделенных ячеек с использованием растра направлений стока.
:::

::: {.column width="50%"}
![Потенциальные водотоки](images/streams.svg){width="100%"}
:::
:::

## Потенциальные водотоки

```{r}
#| fig-align: left
#| fig.width: 7 
ggplot() +
  geom_spatraster(data = dem) +
  geom_sf(data = streams, color = 'deepskyblue4') +
  scale_fill_hypso_c() +
  labs(title = expression(Потенциальные~водотоки~(A~`>`~100~км^2)), 
       fill = 'Высота, [м]')
```

## Потенциальные водотоки

```{r}
#| fig-align: left
#| fig.width: 7 
ggplot() +
  geom_spatraster(data = dem) +
  geom_sf(data = streams_1000, color = 'deepskyblue4') +
  scale_fill_hypso_c() +
  labs(title = expression(Потенциальные~водотоки~(A~`>`~1000~км^2)), 
       fill = 'Высота, [м]')
```

## Потенциальные водотоки — крупно

```{r}
#| fig-align: left
#| fig.width: 7 
ggplot() +
  geom_spatraster(data = dem) +
  geom_sf(data = streams, color = 'deepskyblue4', linewidth = 1) +
  scale_fill_hypso_c() +
  labs(title = expression(Потенциальные~водотоки~(A~`>`~100~км^2)), 
       fill = 'Высота, [м]') +
  coord_sf(xlim = xl, ylim = yl)
```

## Дренажный граф

::: columns
::: {.column width="50%"}
**Дренажный граф** --- частный случай сети потенциальных водотоков, который получается при $A \geq 0$, а каждая линия соответствует одной связи в растре направлений стока.

::: callout-tip
## Особенность

Дренажный граф представляет полную систему связей между ячейками ЦМР.
:::
:::

::: {.column width="50%"}
![Дренажный граф](images/drainage.svg){width="100%"}
:::
:::

## Бассейны

::: columns
::: {.column width="50%"}
**Бассейн** получается путём поиска по модели *направлений стока* всех ячеек, сток из которых попадает в указанную ячейку.

::: callout-important
## Важно

Обычно на карте указывают точку для определения границы бассейна. Если она попала в ячейку с низкой аккумуляцией стока, то будет выделен бассейн малой площади.
:::
:::

::: {.column width="50%"}
![Бассейн](images/watershed.svg){width="100%"}
:::
:::

## Бассейны

```{r}
#| fig-align: left
#| fig.width: 7 
ggplot() +
  geom_spatraster(data = dem) +
  scale_fill_hypso_c() +
  labs(title = 'Бассейны', 
       fill = 'Высота, [м]') +
  ggnewscale::new_scale_fill() +
  geom_sf(data = watersheds_1000, 
          mapping = aes(fill = factor(FID)), 
          linewidth = 1, color = 'black', alpha = 0.5,
          show.legend = FALSE) +
  geom_sf(data = streams_1000, color = 'deepskyblue4') +
  geom_sf(data = pour_pts, size = 2, fill = 'white', shape = 21,
          stroke = 1.5)
```

## Бассейны — крупно

```{r}
#| fig-align: left
#| fig.width: 7 

box = st_bbox(watersheds_1000[1, ])
ggplot() +
  geom_spatraster(data = dem) +
  scale_fill_hypso_c() +
  labs(title = 'Бассейны', 
       fill = 'Высота, [м]') +
  ggnewscale::new_scale_fill() +
  geom_sf(data = watersheds_1000, 
          mapping = aes(fill = factor(FID)), 
          linewidth = 1, color = 'black', alpha = 0.5,
          show.legend = FALSE) +
  geom_sf(data = streams_1000, color = 'deepskyblue4') +
  geom_sf(data = pour_pts, size = 2, fill = 'white', shape = 21,
          stroke = 1.5) +
  coord_sf(xlim = box[c(1, 3)], ylim = box[c(2, 4)])
```

## Словарик

::: columns
::: {.column width="50%" style="color: blue; text-align: end;"}
Цифровая модель высот

Поверхность

Геоморфометрия

Производная

Уклон

Экспозиция

Кривизна

Отмывка

Направление стока

Аккумуляция стока

Бассейн / водосбор
:::

::: {.column width="50%" style="color: red"}
Digital elevation model

Surface

Geomorphometry

Derivative

Slope

Aspect

Curvature

Hillshading

Flow direction

Flow accumulation

Basin / watershed
:::
:::

## Библиография
